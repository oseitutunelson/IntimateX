{"id":"f9eaac044fcadc9b4e48727acb54ceb7","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Content.sol":{"content":"//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.20;\n\nimport {PriceConvertor} from \"./PriceConvertor.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract Content{\n    //set the price of a content using content id\n    //buy content\n    //allow users to access content only when purchased\n    IERC721 public nftContract;\n\n    using PriceConvertor for uint256;\n\n    //errors\n    error Content__PriceMustNotBeZero();\n    error Content__ContentAlreadyPurchased();\n    error Content__TransactionFailed();\n    error Content__ContentPurchaseError();\n    error Content__ContentIdDoesNotExist();\n\n    //events\n    event ContentPriceSet(address indexed owner,uint256 indexed price);\n\n    mapping(address => mapping(uint256 => uint256)) public addressToContentToPrice;\n    mapping(address => bool) public contentPurchased;\n    mapping(address => uint256) public addressToContent;\n    \n\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address priceFeed,address nftContractAddress){\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n        nftContract = IERC721(nftContractAddress);\n    }\n\n    function setContentPrice(uint256 content_id,uint256 price) public{\n        if(price <= 0){\n            revert Content__PriceMustNotBeZero();\n        }\n        addressToContentToPrice[msg.sender][content_id] = price.getConversionRate(s_priceFeed);\n        addressToContent[msg.sender] = content_id;\n        emit ContentPriceSet(msg.sender,price);\n    }\n\n    function buyContent(address owner,uint256 content_id) public payable{\n        //check if content id exist\n        if(nftContract.ownerOf(content_id) != owner){\n           revert Content__ContentIdDoesNotExist();\n        }\n        //check if the content is already purchased\n        if(contentPurchased[msg.sender] == true){\n            revert Content__ContentAlreadyPurchased();\n        }\n        if(msg.value.getConversionRate(s_priceFeed) == addressToContentToPrice[owner][content_id]){\n            contentPurchased[msg.sender] = true;\n            (bool success,) = owner.call{value : msg.value.getConversionRate(s_priceFeed)}(\"\");\n           if(!success){\n            revert Content__TransactionFailed();\n           } \n        }\n        else revert Content__ContentPurchaseError();\n    }\n\n    function setNftContract(address _nftContractAddress) external {\n         nftContract = IERC721(_nftContractAddress);\n    }\n\n\n    //getter functions\n    function getContentPrice(address owner,uint256 content_id) public view returns(uint256){\n        return addressToContentToPrice[owner][content_id];\n    }\n\n    function getContentAccess(address user) public view returns (bool){\n        return contentPurchased[user];\n    }\n\n    function getContentId(address user) public view returns (uint256){\n        return addressToContent[user];\n    }\n}"},"contracts/NFT.sol":{"content":"//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title  Nft  Contract\n * @author Owusu Nelson Osei Tutu\n * @notice A nft contract with additional features \n */\n\nimport {ERC721URIStorage,ERC721} from \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Content} from './Content.sol';\n\ncontract Nft is ERC721URIStorage,Ownable{\n    \n    Content public contentContract;\n    \n     //nft data structure\n    struct NftData {\n        uint256 tokenId;\n        string name;\n        string description;\n        string image;\n        address creator;\n    }\n\n    NftData[] public nftFeed; // Store all NFTs in a global feed\n\n   struct NFT{\n     uint256 tokenId;\n   }\n\n    mapping(address => uint256) private _nftsMinted;\n    mapping(address => uint256) private _nftsOwned;\n    mapping (address => mapping (uint256 => NFT)) private tokenOfOwnerByIndexMapping;\n\n   constructor(string memory name, string memory symbol,address initialOwner,address contentContractAddress,address priceFeed) ERC721(name,symbol) Ownable(initialOwner){\n    contentContract = new Content(priceFeed,contentContractAddress);\n   }\n\n   /**\n    *   Functions\n    */\n\n   //mint function\n   function mint(address _to,uint256 tokenId,string calldata _uri) external{\n     _mint(_to,tokenId);\n     _setTokenURI(tokenId,_uri);\n      \n      for(uint i = 0;i < balanceOf(msg.sender);i++){\n            tokenOfOwnerByIndexMapping[_to][i] = NFT({\n                tokenId : tokenId\n            });\n        }\n      // Track NFTs minted\n        _nftsMinted[_to] += 1;\n        // Track NFTs owned\n        _nftsOwned[_to] += 1;\n\n         NftData memory newNft = NftData(tokenId, \"Name\", \"Description\", \"ImageHash\", msg.sender);\n        nftFeed.push(newNft);\n   }\n\n\n     /** Getter Functions */\n\n    // Get the number of NFTs minted by an address\n    function nftsMinted(address owner) external view returns (uint256) {\n        return _nftsMinted[owner];\n    }\n\n    // Get the number of NFTs owned by an address\n    function nftsOwned(address owner) external view returns (uint256) {\n        return _nftsOwned[owner];\n    }\n\n    function tokenOfOwnerByIndex(address _owner,uint256 _index) public view returns (uint256){\n        return tokenOfOwnerByIndexMapping[_owner][_index].tokenId;\n    }\n\n     // Get the entire feed\n    function getNftFeed() public view returns (NftData[] memory) {\n        return nftFeed;\n    }\n\n    //get Price of nft\n    function getNftPrice(uint256 tokenId, address owner) external view returns (uint256) {\n        return contentContract.getContentPrice(owner, tokenId);\n    } \n}"},"contracts/PriceConvertor.sol":{"content":"//SPDX-License-Identifier: MIT\n\n \npragma solidity ^0.8.18;\n\n//import contract ABI from github\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor{\n    //function to get pricefeed\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        //get latest price feed\n        (,int256 price,,,) = priceFeed.latestRoundData();\n\n        return uint256(price * 1e18);\n    }\n\n    //convert eth amount to usd\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n\n    //function to getversion\n    function getVersion() internal view returns(uint256){\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\n    }\n} "}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","exportedSymbols":{"AggregatorV3Interface":[45]},"id":46,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AggregatorV3Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":45,"linearizedBaseContracts":[45],"name":"AggregatorV3Interface","nameLocation":"120:21:0","nodeType":"ContractDefinition","nodes":[{"functionSelector":"313ce567","id":6,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"155:8:0","nodeType":"FunctionDefinition","parameters":{"id":2,"nodeType":"ParameterList","parameters":[],"src":"163:2:0"},"returnParameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6,"src":"189:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3,"name":"uint8","nodeType":"ElementaryTypeName","src":"189:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"188:7:0"},"scope":45,"src":"146:50:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7284e416","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"description","nameLocation":"209:11:0","nodeType":"FunctionDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"220:2:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11,"src":"246:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8,"name":"string","nodeType":"ElementaryTypeName","src":"246:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"245:15:0"},"scope":45,"src":"200:61:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":16,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"274:7:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":16,"src":"307:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13,"name":"uint256","nodeType":"ElementaryTypeName","src":"307:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"306:9:0"},"scope":45,"src":"265:51:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9a6fc8f5","id":31,"implemented":false,"kind":"function","modifiers":[],"name":"getRoundData","nameLocation":"329:12:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_roundId","nameLocation":"354:8:0","nodeType":"VariableDeclaration","scope":31,"src":"347:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":17,"name":"uint80","nodeType":"ElementaryTypeName","src":"347:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"341:25:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"roundId","nameLocation":"397:7:0","nodeType":"VariableDeclaration","scope":31,"src":"390:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":20,"name":"uint80","nodeType":"ElementaryTypeName","src":"390:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"answer","nameLocation":"413:6:0","nodeType":"VariableDeclaration","scope":31,"src":"406:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":22,"name":"int256","nodeType":"ElementaryTypeName","src":"406:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"startedAt","nameLocation":"429:9:0","nodeType":"VariableDeclaration","scope":31,"src":"421:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":24,"name":"uint256","nodeType":"ElementaryTypeName","src":"421:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"updatedAt","nameLocation":"448:9:0","nodeType":"VariableDeclaration","scope":31,"src":"440:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"440:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"answeredInRound","nameLocation":"466:15:0","nodeType":"VariableDeclaration","scope":31,"src":"459:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":28,"name":"uint80","nodeType":"ElementaryTypeName","src":"459:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"389:93:0"},"scope":45,"src":"320:163:0","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"feaf968c","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"latestRoundData","nameLocation":"496:15:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"511:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"roundId","nameLocation":"556:7:0","nodeType":"VariableDeclaration","scope":44,"src":"549:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":33,"name":"uint80","nodeType":"ElementaryTypeName","src":"549:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"answer","nameLocation":"572:6:0","nodeType":"VariableDeclaration","scope":44,"src":"565:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":35,"name":"int256","nodeType":"ElementaryTypeName","src":"565:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"startedAt","nameLocation":"588:9:0","nodeType":"VariableDeclaration","scope":44,"src":"580:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":40,"mutability":"mutable","name":"updatedAt","nameLocation":"607:9:0","nodeType":"VariableDeclaration","scope":44,"src":"599:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":39,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"answeredInRound","nameLocation":"625:15:0","nodeType":"VariableDeclaration","scope":44,"src":"618:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":41,"name":"uint80","nodeType":"ElementaryTypeName","src":"618:6:0","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"548:93:0"},"scope":45,"src":"487:155:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":46,"src":"110:534:0","usedErrors":[],"usedEvents":[]}],"src":"32:613:0"},"id":0},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1690],"Ownable":[193]},"id":194,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":47,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:1"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":49,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":194,"sourceUnit":1691,"src":"128:45:1","symbolAliases":[{"foreign":{"id":48,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"136:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":51,"name":"Context","nameLocations":["692:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1690,"src":"692:7:1"},"id":52,"nodeType":"InheritanceSpecifier","src":"692:7:1"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"175:487:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":193,"linearizedBaseContracts":[193,1690],"name":"Ownable","nameLocation":"681:7:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":54,"mutability":"mutable","name":"_owner","nameLocation":"722:6:1","nodeType":"VariableDeclaration","scope":193,"src":"706:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"735:85:1","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":59,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:1","nodeType":"ErrorDefinition","parameters":{"id":58,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"account","nameLocation":"866:7:1","nodeType":"VariableDeclaration","scope":59,"src":"858:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:1"},"src":"825:50:1"},{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"881:82:1","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":64,"name":"OwnableInvalidOwner","nameLocation":"974:19:1","nodeType":"ErrorDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"owner","nameLocation":"1002:5:1","nodeType":"VariableDeclaration","scope":64,"src":"994:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:1"},"src":"968:41:1"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":70,"name":"OwnershipTransferred","nameLocation":"1021:20:1","nodeType":"EventDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:1","nodeType":"VariableDeclaration","scope":70,"src":"1042:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:1","nodeType":"VariableDeclaration","scope":70,"src":"1073:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:1"},"src":"1015:84:1"},{"body":{"id":95,"nodeType":"Block","src":"1259:153:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":76,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1273:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":78,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":77,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:1","typeDescriptions":{}}},"id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":90,"nodeType":"IfStatement","src":"1269:95:1","trueBody":{"id":89,"nodeType":"Block","src":"1301:63:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":84,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:1","typeDescriptions":{}}},"id":86,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":82,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"1322:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":88,"nodeType":"RevertStatement","src":"1315:38:1"}]}},{"expression":{"arguments":[{"id":92,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1392:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":91,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1373:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":94,"nodeType":"ExpressionStatement","src":"1373:32:1"}]},"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"1105:115:1","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":96,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:1","nodeType":"VariableDeclaration","scope":96,"src":"1237:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":72,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:1"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"1259:0:1"},"scope":193,"src":"1225:187:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":103,"nodeType":"Block","src":"1521:41:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":99,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"1531:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"1531:13:1"},{"id":102,"nodeType":"PlaceholderStatement","src":"1554:1:1"}]},"documentation":{"id":97,"nodeType":"StructuredDocumentation","src":"1418:77:1","text":" @dev Throws if called by any account other than the owner."},"id":104,"name":"onlyOwner","nameLocation":"1509:9:1","nodeType":"ModifierDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[],"src":"1518:2:1"},"src":"1500:62:1","virtual":false,"visibility":"internal"},{"body":{"id":112,"nodeType":"Block","src":"1693:30:1","statements":[{"expression":{"id":110,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1710:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":109,"id":111,"nodeType":"Return","src":"1703:13:1"}]},"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"1568:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":113,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:1","nodeType":"FunctionDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[],"src":"1652:2:1"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":113,"src":"1684:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:1"},"scope":193,"src":"1638:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":129,"nodeType":"Block","src":"1841:117:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":117,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1855:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":119,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"1866:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":128,"nodeType":"IfStatement","src":"1851:101:1","trueBody":{"id":127,"nodeType":"Block","src":"1880:72:1","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":123,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"1928:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":122,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"1901:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":126,"nodeType":"RevertStatement","src":"1894:47:1"}]}}]},"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"1729:62:1","text":" @dev Throws if the sender is not the owner."},"id":130,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:1","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"1816:2:1"},"returnParameters":{"id":116,"nodeType":"ParameterList","parameters":[],"src":"1841:0:1"},"scope":193,"src":"1796:162:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":143,"nodeType":"Block","src":"2347:47:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:1","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":136,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2357:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"2357:30:1"}]},"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"1964:324:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":144,"implemented":true,"kind":"function","modifiers":[{"id":134,"kind":"modifierInvocation","modifierName":{"id":133,"name":"onlyOwner","nameLocations":["2337:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":104,"src":"2337:9:1"},"nodeType":"ModifierInvocation","src":"2337:9:1"}],"name":"renounceOwnership","nameLocation":"2302:17:1","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[],"src":"2319:2:1"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"2347:0:1"},"scope":193,"src":"2293:101:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":171,"nodeType":"Block","src":"2613:145:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":152,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2627:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:1","typeDescriptions":{}}},"id":156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":166,"nodeType":"IfStatement","src":"2623:91:1","trueBody":{"id":165,"nodeType":"Block","src":"2651:63:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:1","typeDescriptions":{}}},"id":162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":158,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"2672:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":164,"nodeType":"RevertStatement","src":"2665:38:1"}]}},{"expression":{"arguments":[{"id":168,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"2742:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":167,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2723:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"ExpressionStatement","src":"2723:28:1"}]},"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"2400:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":172,"implemented":true,"kind":"function","modifiers":[{"id":150,"kind":"modifierInvocation","modifierName":{"id":149,"name":"onlyOwner","nameLocations":["2603:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":104,"src":"2603:9:1"},"nodeType":"ModifierInvocation","src":"2603:9:1"}],"name":"transferOwnership","nameLocation":"2552:17:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:1","nodeType":"VariableDeclaration","scope":172,"src":"2570:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":146,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:1"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"2613:0:1"},"scope":193,"src":"2543:215:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":191,"nodeType":"Block","src":"2975:124:1","statements":[{"assignments":[179],"declarations":[{"constant":false,"id":179,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:1","nodeType":"VariableDeclaration","scope":191,"src":"2985:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":181,"initialValue":{"id":180,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"3004:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:1"},{"expression":{"id":184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":182,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"3020:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":183,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"3029:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":185,"nodeType":"ExpressionStatement","src":"3020:17:1"},{"eventCall":{"arguments":[{"id":187,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"3073:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":188,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"3083:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":186,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"3052:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":190,"nodeType":"EmitStatement","src":"3047:45:1"}]},"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"2764:143:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":192,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:1","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:1","nodeType":"VariableDeclaration","scope":192,"src":"2940:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:1"},"returnParameters":{"id":177,"nodeType":"ParameterList","parameters":[],"src":"2975:0:1"},"scope":193,"src":"2912:187:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":194,"src":"663:2438:1","usedErrors":[59,64],"usedEvents":[70]}],"src":"102:3000:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[1981]},"id":198,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":195,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":198,"sourceUnit":1982,"src":"132:59:2","symbolAliases":[{"foreign":{"id":196,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"140:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:2"},"id":2},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","exportedSymbols":{"IERC165":[1981],"IERC4906":[221],"IERC721":[1488]},"id":222,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":199,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:3"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":201,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":222,"sourceUnit":198,"src":"133:38:3","symbolAliases":[{"foreign":{"id":200,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"141:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","file":"./IERC721.sol","id":203,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":222,"sourceUnit":226,"src":"172:38:3","symbolAliases":[{"foreign":{"id":202,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"180:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":205,"name":"IERC165","nameLocations":["279:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"279:7:3"},"id":206,"nodeType":"InheritanceSpecifier","src":"279:7:3"},{"baseName":{"id":207,"name":"IERC721","nameLocations":["288:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"288:7:3"},"id":208,"nodeType":"InheritanceSpecifier","src":"288:7:3"}],"canonicalName":"IERC4906","contractDependencies":[],"contractKind":"interface","documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"212:45:3","text":"@title EIP-721 Metadata Update Extension"},"fullyImplemented":false,"id":221,"linearizedBaseContracts":[221,1488,1981],"name":"IERC4906","nameLocation":"267:8:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"302:201:3","text":"@dev This event emits when the metadata of a token is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFT."},"eventSelector":"f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7","id":213,"name":"MetadataUpdate","nameLocation":"514:14:3","nodeType":"EventDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"537:8:3","nodeType":"VariableDeclaration","scope":213,"src":"529:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"528:18:3"},"src":"508:39:3"},{"anonymous":false,"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"553:212:3","text":"@dev This event emits when the metadata of a range of tokens is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFTs."},"eventSelector":"6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c","id":220,"name":"BatchMetadataUpdate","nameLocation":"776:19:3","nodeType":"EventDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"indexed":false,"mutability":"mutable","name":"_fromTokenId","nameLocation":"804:12:3","nodeType":"VariableDeclaration","scope":220,"src":"796:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"796:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":218,"indexed":false,"mutability":"mutable","name":"_toTokenId","nameLocation":"826:10:3","nodeType":"VariableDeclaration","scope":220,"src":"818:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"795:42:3"},"src":"770:68:3"}],"scope":222,"src":"257:583:3","usedErrors":[],"usedEvents":[213,220,1387,1396,1405]}],"src":"107:734:3"},"id":3},"@openzeppelin/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1488]},"id":226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":223,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../token/ERC721/IERC721.sol","id":225,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":226,"sourceUnit":1489,"src":"132:52:4","symbolAliases":[{"foreign":{"id":224,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"140:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:79:4"},"id":4},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[362],"IERC20Errors":[267],"IERC721Errors":[315]},"id":363,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":227,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"138:139:5","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":267,"linearizedBaseContracts":[267],"name":"IERC20Errors","nameLocation":"288:12:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":229,"nodeType":"StructuredDocumentation","src":"307:309:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":237,"name":"ERC20InsufficientBalance","nameLocation":"627:24:5","nodeType":"ErrorDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"sender","nameLocation":"660:6:5","nodeType":"VariableDeclaration","scope":237,"src":"652:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"balance","nameLocation":"676:7:5","nodeType":"VariableDeclaration","scope":237,"src":"668:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"needed","nameLocation":"693:6:5","nodeType":"VariableDeclaration","scope":237,"src":"685:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":234,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:5"},"src":"621:80:5"},{"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"707:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":242,"name":"ERC20InvalidSender","nameLocation":"870:18:5","nodeType":"ErrorDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"sender","nameLocation":"897:6:5","nodeType":"VariableDeclaration","scope":242,"src":"889:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:5"},"src":"864:41:5"},{"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"911:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":247,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:5","nodeType":"ErrorDefinition","parameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:5","nodeType":"VariableDeclaration","scope":247,"src":"1102:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:5"},"src":"1075:45:5"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"1126:345:5","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":256,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:5","nodeType":"ErrorDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"spender","nameLocation":"1517:7:5","nodeType":"VariableDeclaration","scope":256,"src":"1509:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:5","nodeType":"VariableDeclaration","scope":256,"src":"1526:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"needed","nameLocation":"1553:6:5","nodeType":"VariableDeclaration","scope":256,"src":"1545:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:5"},"src":"1476:85:5"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"1567:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":261,"name":"ERC20InvalidApprover","nameLocation":"1752:20:5","nodeType":"ErrorDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"approver","nameLocation":"1781:8:5","nodeType":"VariableDeclaration","scope":261,"src":"1773:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":258,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:5"},"src":"1746:45:5"},{"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"1797:195:5","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":266,"name":"ERC20InvalidSpender","nameLocation":"2003:19:5","nodeType":"ErrorDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"spender","nameLocation":"2031:7:5","nodeType":"VariableDeclaration","scope":266,"src":"2023:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:5"},"src":"1997:43:5"}],"scope":363,"src":"278:1764:5","usedErrors":[237,242,247,256,261,266],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"2044:141:5","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":315,"linearizedBaseContracts":[315],"name":"IERC721Errors","nameLocation":"2196:13:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"2216:219:5","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":273,"name":"ERC721InvalidOwner","nameLocation":"2446:18:5","nodeType":"ErrorDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"owner","nameLocation":"2473:5:5","nodeType":"VariableDeclaration","scope":273,"src":"2465:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:5"},"src":"2440:40:5"},{"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"2486:132:5","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":278,"name":"ERC721NonexistentToken","nameLocation":"2629:22:5","nodeType":"ErrorDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:5","nodeType":"VariableDeclaration","scope":278,"src":"2652:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:5"},"src":"2623:46:5"},{"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"2675:289:5","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":287,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:5","nodeType":"ErrorDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"sender","nameLocation":"3004:6:5","nodeType":"VariableDeclaration","scope":287,"src":"2996:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:5","nodeType":"VariableDeclaration","scope":287,"src":"3012:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"owner","nameLocation":"3037:5:5","nodeType":"VariableDeclaration","scope":287,"src":"3029:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:5"},"src":"2969:75:5"},{"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"3050:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":292,"name":"ERC721InvalidSender","nameLocation":"3213:19:5","nodeType":"ErrorDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"sender","nameLocation":"3241:6:5","nodeType":"VariableDeclaration","scope":292,"src":"3233:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:5"},"src":"3207:42:5"},{"documentation":{"id":293,"nodeType":"StructuredDocumentation","src":"3255:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":297,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:5","nodeType":"ErrorDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:5","nodeType":"VariableDeclaration","scope":297,"src":"3447:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:5"},"src":"3419:46:5"},{"documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"3471:247:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":304,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:5","nodeType":"ErrorDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"operator","nameLocation":"3764:8:5","nodeType":"VariableDeclaration","scope":304,"src":"3756:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:5","nodeType":"VariableDeclaration","scope":304,"src":"3774:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:5"},"src":"3723:68:5"},{"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3797:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":309,"name":"ERC721InvalidApprover","nameLocation":"3982:21:5","nodeType":"ErrorDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"approver","nameLocation":"4012:8:5","nodeType":"VariableDeclaration","scope":309,"src":"4004:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:5"},"src":"3976:46:5"},{"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"4028:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":314,"name":"ERC721InvalidOperator","nameLocation":"4236:21:5","nodeType":"ErrorDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"operator","nameLocation":"4266:8:5","nodeType":"VariableDeclaration","scope":314,"src":"4258:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:5"},"src":"4230:46:5"}],"scope":363,"src":"2186:2092:5","usedErrors":[273,278,287,292,297,304,309,314],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"4280:143:5","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":362,"linearizedBaseContracts":[362],"name":"IERC1155Errors","nameLocation":"4434:14:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"4455:361:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":327,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:5","nodeType":"ErrorDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"sender","nameLocation":"4862:6:5","nodeType":"VariableDeclaration","scope":327,"src":"4854:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":321,"mutability":"mutable","name":"balance","nameLocation":"4878:7:5","nodeType":"VariableDeclaration","scope":327,"src":"4870:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"needed","nameLocation":"4895:6:5","nodeType":"VariableDeclaration","scope":327,"src":"4887:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":325,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:5","nodeType":"VariableDeclaration","scope":327,"src":"4903:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":324,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:5"},"src":"4821:99:5"},{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"4926:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":332,"name":"ERC1155InvalidSender","nameLocation":"5089:20:5","nodeType":"ErrorDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"sender","nameLocation":"5118:6:5","nodeType":"VariableDeclaration","scope":332,"src":"5110:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:5"},"src":"5083:43:5"},{"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"5132:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":337,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:5","nodeType":"ErrorDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:5","nodeType":"VariableDeclaration","scope":337,"src":"5325:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:5"},"src":"5296:47:5"},{"documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"5349:256:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":344,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:5","nodeType":"ErrorDefinition","parameters":{"id":343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"operator","nameLocation":"5653:8:5","nodeType":"VariableDeclaration","scope":344,"src":"5645:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":342,"mutability":"mutable","name":"owner","nameLocation":"5671:5:5","nodeType":"VariableDeclaration","scope":344,"src":"5663:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":341,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:5"},"src":"5610:68:5"},{"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"5684:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":349,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:5","nodeType":"ErrorDefinition","parameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"approver","nameLocation":"5900:8:5","nodeType":"VariableDeclaration","scope":349,"src":"5892:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":346,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:5"},"src":"5863:47:5"},{"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"5916:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":354,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:5","nodeType":"ErrorDefinition","parameters":{"id":353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"operator","nameLocation":"6155:8:5","nodeType":"VariableDeclaration","scope":354,"src":"6147:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:5"},"src":"6118:47:5"},{"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"6171:280:5","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":361,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:5","nodeType":"ErrorDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:5","nodeType":"VariableDeclaration","scope":361,"src":"6488:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:5","nodeType":"VariableDeclaration","scope":361,"src":"6507:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:5"},"src":"6456:73:5"}],"scope":363,"src":"4424:2107:5","usedErrors":[327,332,337,344,349,354,361],"usedEvents":[]}],"src":"112:6420:5"},"id":5},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[1690],"ERC165":[1969],"ERC721":[1371],"IERC165":[1981],"IERC721":[1488],"IERC721Errors":[315],"IERC721Metadata":[1660],"IERC721Receiver":[1506],"Strings":[1945]},"id":1372,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":364,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1489,"src":"133:38:6","symbolAliases":[{"foreign":{"id":365,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"141:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1507,"src":"172:54:6","symbolAliases":[{"foreign":{"id":367,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"180:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":370,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1661,"src":"227:65:6","symbolAliases":[{"foreign":{"id":369,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"235:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":372,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1691,"src":"293:48:6","symbolAliases":[{"foreign":{"id":371,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"301:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":374,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1946,"src":"342:48:6","symbolAliases":[{"foreign":{"id":373,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"350:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":1970,"src":"391:69:6","symbolAliases":[{"foreign":{"id":375,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"399:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":376,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"408:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1372,"sourceUnit":363,"src":"461:66:6","symbolAliases":[{"foreign":{"id":378,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"469:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":381,"name":"Context","nameLocations":["804:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1690,"src":"804:7:6"},"id":382,"nodeType":"InheritanceSpecifier","src":"804:7:6"},{"baseName":{"id":383,"name":"ERC165","nameLocations":["813:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"813:6:6"},"id":384,"nodeType":"InheritanceSpecifier","src":"813:6:6"},{"baseName":{"id":385,"name":"IERC721","nameLocations":["821:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"821:7:6"},"id":386,"nodeType":"InheritanceSpecifier","src":"821:7:6"},{"baseName":{"id":387,"name":"IERC721Metadata","nameLocations":["830:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":1660,"src":"830:15:6"},"id":388,"nodeType":"InheritanceSpecifier","src":"830:15:6"},{"baseName":{"id":389,"name":"IERC721Errors","nameLocations":["847:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"847:13:6"},"id":390,"nodeType":"InheritanceSpecifier","src":"847:13:6"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"529:246:6","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1371,"linearizedBaseContracts":[1371,315,1660,1488,1969,1981,1690],"name":"ERC721","nameLocation":"794:6:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":393,"libraryName":{"id":391,"name":"Strings","nameLocations":["873:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1945,"src":"873:7:6"},"nodeType":"UsingForDirective","src":"867:26:6","typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":395,"mutability":"mutable","name":"_name","nameLocation":"932:5:6","nodeType":"VariableDeclaration","scope":1371,"src":"917:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":394,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":397,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:6","nodeType":"VariableDeclaration","scope":1371,"src":"964:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":396,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":401,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:6","nodeType":"VariableDeclaration","scope":1371,"src":"993:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":400,"keyName":"tokenId","keyNameLocation":"1009:7:6","keyType":{"id":398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":405,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:6","nodeType":"VariableDeclaration","scope":1371,"src":"1051:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":404,"keyName":"owner","keyNameLocation":"1067:5:6","keyType":{"id":402,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":409,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:6","nodeType":"VariableDeclaration","scope":1371,"src":"1109:59:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":408,"keyName":"tokenId","keyNameLocation":"1125:7:6","keyType":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":415,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:6","nodeType":"VariableDeclaration","scope":1371,"src":"1175:86:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":414,"keyName":"owner","keyNameLocation":"1191:5:6","keyType":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":413,"keyName":"operator","keyNameLocation":"1216:8:6","keyType":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":431,"nodeType":"Block","src":"1437:57:6","statements":[{"expression":{"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":423,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"1447:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":424,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1455:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":426,"nodeType":"ExpressionStatement","src":"1447:13:6"},{"expression":{"id":429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":427,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"1470:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":428,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"1480:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":430,"nodeType":"ExpressionStatement","src":"1470:17:6"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"1268:108:6","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":432,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":418,"mutability":"mutable","name":"name_","nameLocation":"1407:5:6","nodeType":"VariableDeclaration","scope":432,"src":"1393:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":417,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:6","nodeType":"VariableDeclaration","scope":432,"src":"1414:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":419,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:6"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"1437:0:6"},"scope":1371,"src":"1381:113:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1968,1980],"body":{"id":462,"nodeType":"Block","src":"1669:192:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":443,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1698:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":445,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"1718:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}],"id":444,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1713:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1488","typeString":"type(contract IERC721)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1754:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":451,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"1774:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1660_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1660_$","typeString":"type(contract IERC721Metadata)"}],"id":450,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1769:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1660","typeString":"type(contract IERC721Metadata)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":458,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"1842:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":456,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1818:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1371_$","typeString":"type(contract super ERC721)"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:6","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1968,"src":"1818:23:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":442,"id":461,"nodeType":"Return","src":"1679:175:6"}]},"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"1500:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":463,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:6","nodeType":"FunctionDefinition","overrides":{"id":439,"nodeType":"OverrideSpecifier","overrides":[{"id":437,"name":"ERC165","nameLocations":["1637:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1969,"src":"1637:6:6"},{"id":438,"name":"IERC165","nameLocations":["1645:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"1645:7:6"}],"src":"1628:25:6"},"parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:6","nodeType":"VariableDeclaration","scope":463,"src":"1588:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:6"},"returnParameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"1663:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":440,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:6"},"scope":1371,"src":"1561:300:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1413],"body":{"id":490,"nodeType":"Block","src":"1992:136:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":471,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"2006:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:6","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":485,"nodeType":"IfStatement","src":"2002:87:6","trueBody":{"id":484,"nodeType":"Block","src":"2027:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:6","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":477,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"2048:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":483,"nodeType":"RevertStatement","src":"2041:37:6"}]}},{"expression":{"baseExpression":{"id":486,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2105:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":488,"indexExpression":{"id":487,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"2115:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":470,"id":489,"nodeType":"Return","src":"2098:23:6"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"1867:48:6","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":491,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:6","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"owner","nameLocation":"1947:5:6","nodeType":"VariableDeclaration","scope":491,"src":"1939:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:6"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":491,"src":"1983:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:6"},"scope":1371,"src":"1920:208:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1421],"body":{"id":503,"nodeType":"Block","src":"2257:46:6","statements":[{"expression":{"arguments":[{"id":500,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"2288:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":499,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"2274:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":498,"id":502,"nodeType":"Return","src":"2267:29:6"}]},"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"2134:46:6","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":504,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:6","nodeType":"FunctionDefinition","parameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:6","nodeType":"VariableDeclaration","scope":504,"src":"2202:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:6"},"returnParameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"2248:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:6"},"scope":1371,"src":"2185:118:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1645],"body":{"id":512,"nodeType":"Block","src":"2425:29:6","statements":[{"expression":{"id":510,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2442:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":509,"id":511,"nodeType":"Return","src":"2435:12:6"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"2309:51:6","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":513,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:6","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"2378:2:6"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":513,"src":"2410:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":507,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:6"},"scope":1371,"src":"2365:89:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1651],"body":{"id":521,"nodeType":"Block","src":"2580:31:6","statements":[{"expression":{"id":519,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2597:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":518,"id":520,"nodeType":"Return","src":"2590:14:6"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"2460:53:6","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":522,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:6","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"2533:2:6"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":522,"src":"2565:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":516,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:6"},"scope":1371,"src":"2518:93:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1659],"body":{"id":557,"nodeType":"Block","src":"2756:176:6","statements":[{"expression":{"arguments":[{"id":531,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2780:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":530,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"2766:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":533,"nodeType":"ExpressionStatement","src":"2766:22:6"},{"assignments":[535],"declarations":[{"constant":false,"id":535,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:6","nodeType":"VariableDeclaration","scope":557,"src":"2799:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":534,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":538,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":536,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2823:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:6"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":541,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2856:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":539,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:6","typeDescriptions":{}}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:6","memberName":"length","nodeType":"MemberAccess","src":"2850:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:6","trueExpression":{"arguments":[{"id":549,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2892:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2901:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:6","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1758,"src":"2901:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":546,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:6","typeDescriptions":{}}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:6","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:6","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":529,"id":556,"nodeType":"Return","src":"2843:82:6"}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"2617:55:6","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:6","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:6","nodeType":"VariableDeclaration","scope":558,"src":"2695:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:6"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"2741:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":527,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:6"},"scope":1371,"src":"2677:255:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":566,"nodeType":"Block","src":"3240:26:6","statements":[{"expression":{"hexValue":"","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":563,"id":565,"nodeType":"Return","src":"3250:9:6"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"2938:231:6","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:6","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[],"src":"3191:2:6"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"3225:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":561,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:6"},"scope":1371,"src":"3174:92:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1461],"body":{"id":582,"nodeType":"Block","src":"3384:52:6","statements":[{"expression":{"arguments":[{"id":576,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"3403:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":577,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"3407:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":578,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3416:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":575,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1174,"src":"3394:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":581,"nodeType":"ExpressionStatement","src":"3394:35:6"}]},"documentation":{"id":568,"nodeType":"StructuredDocumentation","src":"3272:46:6","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":583,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:6","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"to","nameLocation":"3348:2:6","nodeType":"VariableDeclaration","scope":583,"src":"3340:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:6","nodeType":"VariableDeclaration","scope":583,"src":"3352:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:6"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"3384:0:6"},"scope":1371,"src":"3323:113:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1477],"body":{"id":599,"nodeType":"Block","src":"3573:78:6","statements":[{"expression":{"arguments":[{"id":592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3597:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":591,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"3583:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":594,"nodeType":"ExpressionStatement","src":"3583:22:6"},{"expression":{"arguments":[{"id":596,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"3636:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":595,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"3623:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":590,"id":598,"nodeType":"Return","src":"3616:28:6"}]},"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"3442:50:6","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":600,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:6","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:6","nodeType":"VariableDeclaration","scope":600,"src":"3518:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:6"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"3564:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:6"},"scope":1371,"src":"3497:154:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1469],"body":{"id":615,"nodeType":"Block","src":"3793:69:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":609,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3822:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":611,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3836:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":612,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"3846:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":608,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"3803:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":614,"nodeType":"ExpressionStatement","src":"3803:52:6"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3657:56:6","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":616,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:6","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"operator","nameLocation":"3753:8:6","nodeType":"VariableDeclaration","scope":616,"src":"3745:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"approved","nameLocation":"3768:8:6","nodeType":"VariableDeclaration","scope":616,"src":"3763:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":604,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:6"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"3793:0:6"},"scope":1371,"src":"3718:144:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1487],"body":{"id":632,"nodeType":"Block","src":"4022:59:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":626,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4039:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":628,"indexExpression":{"id":627,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"4058:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":630,"indexExpression":{"id":629,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"4065:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":625,"id":631,"nodeType":"Return","src":"4032:42:6"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"3868:55:6","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":633,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:6","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"owner","nameLocation":"3962:5:6","nodeType":"VariableDeclaration","scope":633,"src":"3954:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":621,"mutability":"mutable","name":"operator","nameLocation":"3977:8:6","nodeType":"VariableDeclaration","scope":633,"src":"3969:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:6"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"4016:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":623,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:6"},"scope":1371,"src":"3928:153:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1453],"body":{"id":678,"nodeType":"Block","src":"4223:498:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":643,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4237:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:6","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":657,"nodeType":"IfStatement","src":"4233:87:6","trueBody":{"id":656,"nodeType":"Block","src":"4255:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:6","typeDescriptions":{}}},"id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":649,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"4276:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":655,"nodeType":"RevertStatement","src":"4269:40:6"}]}},{"assignments":[659],"declarations":[{"constant":false,"id":659,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:6","nodeType":"VariableDeclaration","scope":678,"src":"4538:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":666,"initialValue":{"arguments":[{"id":661,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"4570:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":662,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4574:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"4583:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":660,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"4562:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":667,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4610:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":668,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4627:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":677,"nodeType":"IfStatement","src":"4606:109:6","trueBody":{"id":676,"nodeType":"Block","src":"4633:82:6","statements":[{"errorCall":{"arguments":[{"id":671,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"4675:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"4681:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":673,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4690:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":670,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"4654:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$_t_error_$","typeString":"function (address,uint256,address) pure returns (error)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":675,"nodeType":"RevertStatement","src":"4647:57:6"}]}}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"4087:51:6","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":679,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:6","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"from","nameLocation":"4173:4:6","nodeType":"VariableDeclaration","scope":679,"src":"4165:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"to","nameLocation":"4187:2:6","nodeType":"VariableDeclaration","scope":679,"src":"4179:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:6","nodeType":"VariableDeclaration","scope":679,"src":"4191:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:6"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"4223:0:6"},"scope":1371,"src":"4143:578:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1443],"body":{"id":696,"nodeType":"Block","src":"4863:56:6","statements":[{"expression":{"arguments":[{"id":690,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4890:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":691,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"4896:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":692,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"4900:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":689,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[697,723],"referencedDeclaration":723,"src":"4873:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":695,"nodeType":"ExpressionStatement","src":"4873:39:6"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"4727:55:6","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":697,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:6","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"from","nameLocation":"4821:4:6","nodeType":"VariableDeclaration","scope":697,"src":"4813:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":681,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"to","nameLocation":"4835:2:6","nodeType":"VariableDeclaration","scope":697,"src":"4827:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:6","nodeType":"VariableDeclaration","scope":697,"src":"4839:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:6"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"4863:0:6"},"scope":1371,"src":"4787:132:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1433],"body":{"id":722,"nodeType":"Block","src":"5088:105:6","statements":[{"expression":{"arguments":[{"id":710,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"5111:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":711,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"5117:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":712,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"5121:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":709,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"5098:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"ExpressionStatement","src":"5098:31:6"},{"expression":{"arguments":[{"id":716,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"5162:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":717,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"5168:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":718,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"5172:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":719,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5181:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":715,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"5139:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":721,"nodeType":"ExpressionStatement","src":"5139:47:6"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"4925:55:6","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":723,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:6","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"from","nameLocation":"5019:4:6","nodeType":"VariableDeclaration","scope":723,"src":"5011:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"to","nameLocation":"5033:2:6","nodeType":"VariableDeclaration","scope":723,"src":"5025:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:6","nodeType":"VariableDeclaration","scope":723,"src":"5037:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"data","nameLocation":"5067:4:6","nodeType":"VariableDeclaration","scope":723,"src":"5054:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":705,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:6"},"returnParameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"5088:0:6"},"scope":1371,"src":"4985:208:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":735,"nodeType":"Block","src":"5782:40:6","statements":[{"expression":{"baseExpression":{"id":731,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"5799:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":733,"indexExpression":{"id":732,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"5807:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":730,"id":734,"nodeType":"Return","src":"5792:23:6"}]},"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"5199:503:6","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:6","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:6","nodeType":"VariableDeclaration","scope":736,"src":"5725:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":725,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:6"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":736,"src":"5773:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:6"},"scope":1371,"src":"5707:115:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":748,"nodeType":"Block","src":"6017:48:6","statements":[{"expression":{"baseExpression":{"id":744,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6034:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":746,"indexExpression":{"id":745,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"6050:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":743,"id":747,"nodeType":"Return","src":"6027:31:6"}]},"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"5828:105:6","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":749,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:6","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:6","nodeType":"VariableDeclaration","scope":749,"src":"5960:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:6"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":749,"src":"6008:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:6"},"scope":1371,"src":"5938:127:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":784,"nodeType":"Block","src":"6485:163:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":761,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6514:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:6","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":767,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":768,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6561:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":771,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"6589:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":772,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6596:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":770,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6572:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":776,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"6621:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":775,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"6608:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":778,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"6633:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":781,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":760,"id":783,"nodeType":"Return","src":"6495:146:6"}]},"documentation":{"id":750,"nodeType":"StructuredDocumentation","src":"6071:300:6","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":785,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:6","nodeType":"FunctionDefinition","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"owner","nameLocation":"6407:5:6","nodeType":"VariableDeclaration","scope":785,"src":"6399:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"spender","nameLocation":"6422:7:6","nodeType":"VariableDeclaration","scope":785,"src":"6414:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:6","nodeType":"VariableDeclaration","scope":785,"src":"6431:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":755,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:6"},"returnParameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":785,"src":"6479:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":758,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:6"},"scope":1371,"src":"6376:272:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":821,"nodeType":"Block","src":"7179:271:6","statements":[{"condition":{"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:6","subExpression":{"arguments":[{"id":796,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"7208:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":797,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"7215:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7224:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":795,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"7194:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":820,"nodeType":"IfStatement","src":"7189:255:6","trueBody":{"id":819,"nodeType":"Block","src":"7234:210:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"7252:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:6","typeDescriptions":{}}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":817,"nodeType":"Block","src":"7350:84:6","statements":[{"errorCall":{"arguments":[{"id":813,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"7402:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":814,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7411:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":812,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"7375:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256) pure returns (error)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":816,"nodeType":"RevertStatement","src":"7368:51:6"}]},"id":818,"nodeType":"IfStatement","src":"7248:186:6","trueBody":{"id":811,"nodeType":"Block","src":"7273:71:6","statements":[{"errorCall":{"arguments":[{"id":808,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"7321:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":807,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"7298:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":810,"nodeType":"RevertStatement","src":"7291:38:6"}]}}]}}]},"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"6654:423:6","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":822,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:6","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"owner","nameLocation":"7116:5:6","nodeType":"VariableDeclaration","scope":822,"src":"7108:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"spender","nameLocation":"7131:7:6","nodeType":"VariableDeclaration","scope":822,"src":"7123:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:6","nodeType":"VariableDeclaration","scope":822,"src":"7140:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:6"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"7179:0:6"},"scope":1371,"src":"7082:368:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"8167:78:6","statements":[{"id":836,"nodeType":"UncheckedBlock","src":"8177:62:6","statements":[{"expression":{"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":830,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"8201:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":832,"indexExpression":{"id":831,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"8211:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8223:5:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":835,"nodeType":"ExpressionStatement","src":"8201:27:6"}]}]},"documentation":{"id":823,"nodeType":"StructuredDocumentation","src":"7456:631:6","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:6","nodeType":"FunctionDefinition","parameters":{"id":828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"account","nameLocation":"8126:7:6","nodeType":"VariableDeclaration","scope":838,"src":"8118:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"value","nameLocation":"8143:5:6","nodeType":"VariableDeclaration","scope":838,"src":"8135:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":826,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:6"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[],"src":"8167:0:6"},"scope":1371,"src":"8092:153:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"8933:700:6","statements":[{"assignments":[851],"declarations":[{"constant":false,"id":851,"mutability":"mutable","name":"from","nameLocation":"8951:4:6","nodeType":"VariableDeclaration","scope":927,"src":"8943:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":850,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":855,"initialValue":{"arguments":[{"id":853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8967:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":852,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8958:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":856,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"9035:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:6","typeDescriptions":{}}},"id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":869,"nodeType":"IfStatement","src":"9031:86:6","trueBody":{"id":868,"nodeType":"Block","src":"9055:62:6","statements":[{"expression":{"arguments":[{"id":863,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9086:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":864,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"9092:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":865,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9098:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":862,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"9069:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"9069:37:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":870,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9161:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:6","typeDescriptions":{}}},"id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":897,"nodeType":"IfStatement","src":"9157:256:6","trueBody":{"id":896,"nodeType":"Block","src":"9181:232:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:6","typeDescriptions":{}}},"id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":881,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9298:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:6","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":876,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1240,"src":"9277:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":888,"nodeType":"ExpressionStatement","src":"9277:48:6"},{"id":895,"nodeType":"UncheckedBlock","src":"9340:63:6","statements":[{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":889,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"9368:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":891,"indexExpression":{"id":890,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9378:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":894,"nodeType":"ExpressionStatement","src":"9368:20:6"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9427:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:6","typeDescriptions":{}}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":912,"nodeType":"IfStatement","src":"9423:107:6","trueBody":{"id":911,"nodeType":"Block","src":"9445:85:6","statements":[{"id":910,"nodeType":"UncheckedBlock","src":"9459:61:6","statements":[{"expression":{"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":904,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"9487:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":906,"indexExpression":{"id":905,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9497:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":909,"nodeType":"ExpressionStatement","src":"9487:18:6"}]}]}},{"expression":{"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":913,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"9540:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":915,"indexExpression":{"id":914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9548:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":916,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9559:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":918,"nodeType":"ExpressionStatement","src":"9540:21:6"},{"eventCall":{"arguments":[{"id":920,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9586:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":921,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"9592:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"9596:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":919,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"9577:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"EmitStatement","src":"9572:32:6"},{"expression":{"id":925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"9622:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":849,"id":926,"nodeType":"Return","src":"9615:11:6"}]},"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"8251:582:6","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:6","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"to","nameLocation":"8863:2:6","nodeType":"VariableDeclaration","scope":928,"src":"8855:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:6","nodeType":"VariableDeclaration","scope":928,"src":"8867:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":845,"mutability":"mutable","name":"auth","nameLocation":"8892:4:6","nodeType":"VariableDeclaration","scope":928,"src":"8884:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:6"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"8924:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:6"},"scope":1371,"src":"8838:795:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":977,"nodeType":"Block","src":"10008:274:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"10022:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:6","typeDescriptions":{}}},"id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":950,"nodeType":"IfStatement","src":"10018:87:6","trueBody":{"id":949,"nodeType":"Block","src":"10040:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:6","typeDescriptions":{}}},"id":946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":942,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"10061:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":948,"nodeType":"RevertStatement","src":"10054:40:6"}]}},{"assignments":[952],"declarations":[{"constant":false,"id":952,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:6","nodeType":"VariableDeclaration","scope":977,"src":"10114:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":951,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":961,"initialValue":{"arguments":[{"id":954,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"10146:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":955,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"10150:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:6","typeDescriptions":{}}},"id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":953,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"10138:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":962,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"10184:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:6","typeDescriptions":{}}},"id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"10180:96:6","trueBody":{"id":975,"nodeType":"Block","src":"10213:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:6","typeDescriptions":{}}},"id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":968,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"10234:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":974,"nodeType":"RevertStatement","src":"10227:38:6"}]}}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"9639:311:6","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":978,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:6","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"to","nameLocation":"9978:2:6","nodeType":"VariableDeclaration","scope":978,"src":"9970:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:6","nodeType":"VariableDeclaration","scope":978,"src":"9982:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:6"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[],"src":"10008:0:6"},"scope":1371,"src":"9955:327:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"10690:43:6","statements":[{"expression":{"arguments":[{"id":987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"10710:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"10714:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":986,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[993,1019],"referencedDeclaration":1019,"src":"10700:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"10700:26:6"}]},"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"10288:340:6","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:6","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"to","nameLocation":"10660:2:6","nodeType":"VariableDeclaration","scope":993,"src":"10652:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:6","nodeType":"VariableDeclaration","scope":993,"src":"10664:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:6"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"10690:0:6"},"scope":1371,"src":"10633:100:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1018,"nodeType":"Block","src":"11038:98:6","statements":[{"expression":{"arguments":[{"id":1004,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"11054:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1005,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"11058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1003,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"11048:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"11048:18:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:6","typeDescriptions":{}}},"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"11111:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"11115:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1015,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"11124:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1008,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"11076:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1017,"nodeType":"ExpressionStatement","src":"11076:53:6"}]},"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"10739:210:6","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1019,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:6","nodeType":"FunctionDefinition","parameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"to","nameLocation":"10981:2:6","nodeType":"VariableDeclaration","scope":1019,"src":"10973:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":995,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:6","nodeType":"VariableDeclaration","scope":1019,"src":"10985:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"data","nameLocation":"11015:4:6","nodeType":"VariableDeclaration","scope":1019,"src":"11002:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":999,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:6"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[],"src":"11038:0:6"},"scope":1371,"src":"10954:182:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"11503:186:6","statements":[{"assignments":[1026],"declarations":[{"constant":false,"id":1026,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:6","nodeType":"VariableDeclaration","scope":1051,"src":"11513:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1038,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:6","typeDescriptions":{}}},"id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1032,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"11557:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:6","typeDescriptions":{}}},"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1027,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"11537:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"11591:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:6","typeDescriptions":{}}},"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"11587:96:6","trueBody":{"id":1049,"nodeType":"Block","src":"11620:63:6","statements":[{"errorCall":{"arguments":[{"id":1046,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"11664:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1045,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"11641:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1048,"nodeType":"RevertStatement","src":"11634:38:6"}]}}]},"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"11142:315:6","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:6","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:6","nodeType":"VariableDeclaration","scope":1052,"src":"11477:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1021,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:6"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"11503:0:6"},"scope":1371,"src":"11462:227:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1111,"nodeType":"Block","src":"12084:389:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12098:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1063,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:6","typeDescriptions":{}}},"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1076,"nodeType":"IfStatement","src":"12094:87:6","trueBody":{"id":1075,"nodeType":"Block","src":"12116:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:6","typeDescriptions":{}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1068,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"12137:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1074,"nodeType":"RevertStatement","src":"12130:40:6"}]}},{"assignments":[1078],"declarations":[{"constant":false,"id":1078,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:6","nodeType":"VariableDeclaration","scope":1111,"src":"12190:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1077,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1087,"initialValue":{"arguments":[{"id":1080,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"12222:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1081,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12226:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1082,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:6","typeDescriptions":{}}},"id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1079,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"12214:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12260:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:6","typeDescriptions":{}}},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12362:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"12379:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1109,"nodeType":"IfStatement","src":"12358:109:6","trueBody":{"id":1108,"nodeType":"Block","src":"12385:82:6","statements":[{"errorCall":{"arguments":[{"id":1103,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"12427:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1104,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12433:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1105,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"12442:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1102,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"12406:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$_t_error_$","typeString":"function (address,uint256,address) pure returns (error)"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1107,"nodeType":"RevertStatement","src":"12399:57:6"}]}},"id":1110,"nodeType":"IfStatement","src":"12256:211:6","trueBody":{"id":1098,"nodeType":"Block","src":"12289:63:6","statements":[{"errorCall":{"arguments":[{"id":1095,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"12333:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1094,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"12310:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1097,"nodeType":"RevertStatement","src":"12303:38:6"}]}}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"11695:313:6","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1112,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:6","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"from","nameLocation":"12040:4:6","nodeType":"VariableDeclaration","scope":1112,"src":"12032:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"to","nameLocation":"12054:2:6","nodeType":"VariableDeclaration","scope":1112,"src":"12046:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:6","nodeType":"VariableDeclaration","scope":1112,"src":"12058:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:6"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"12084:0:6"},"scope":1371,"src":"12013:460:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1129,"nodeType":"Block","src":"13481:53:6","statements":[{"expression":{"arguments":[{"id":1123,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"13505:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1124,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"13511:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1125,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"13515:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1122,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1130,1156],"referencedDeclaration":1156,"src":"13491:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"13491:36:6"}]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"12479:922:6","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1130,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:6","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"from","nameLocation":"13437:4:6","nodeType":"VariableDeclaration","scope":1130,"src":"13429:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"to","nameLocation":"13451:2:6","nodeType":"VariableDeclaration","scope":1130,"src":"13443:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:6","nodeType":"VariableDeclaration","scope":1130,"src":"13455:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:6"},"returnParameters":{"id":1121,"nodeType":"ParameterList","parameters":[],"src":"13481:0:6"},"scope":1371,"src":"13406:128:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"13873:102:6","statements":[{"expression":{"arguments":[{"id":1143,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"13893:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1144,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"13899:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1145,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"13903:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1142,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"13883:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1147,"nodeType":"ExpressionStatement","src":"13883:28:6"},{"expression":{"arguments":[{"id":1149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"13944:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"13950:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"13954:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"13963:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1148,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"13921:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1154,"nodeType":"ExpressionStatement","src":"13921:47:6"}]},"documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"13540:226:6","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:6","nodeType":"FunctionDefinition","parameters":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"from","nameLocation":"13802:4:6","nodeType":"VariableDeclaration","scope":1156,"src":"13794:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"to","nameLocation":"13816:2:6","nodeType":"VariableDeclaration","scope":1156,"src":"13808:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1134,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1137,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:6","nodeType":"VariableDeclaration","scope":1156,"src":"13820:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"data","nameLocation":"13850:4:6","nodeType":"VariableDeclaration","scope":1156,"src":"13837:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1138,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:6"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[],"src":"13873:0:6"},"scope":1371,"src":"13771:204:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"14488:50:6","statements":[{"expression":{"arguments":[{"id":1167,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"14507:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"14511:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1169,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"14520:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1166,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1174,1240],"referencedDeclaration":1240,"src":"14498:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1172,"nodeType":"ExpressionStatement","src":"14498:33:6"}]},"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"13981:432:6","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:6","nodeType":"FunctionDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"to","nameLocation":"14444:2:6","nodeType":"VariableDeclaration","scope":1174,"src":"14436:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:6","nodeType":"VariableDeclaration","scope":1174,"src":"14448:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"auth","nameLocation":"14473:4:6","nodeType":"VariableDeclaration","scope":1174,"src":"14465:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:6"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[],"src":"14488:0:6"},"scope":1371,"src":"14418:120:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1239,"nodeType":"Block","src":"14814:568:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1186,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"14880:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1187,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"14893:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:6","typeDescriptions":{}}},"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1232,"nodeType":"IfStatement","src":"14876:460:6","trueBody":{"id":1231,"nodeType":"Block","src":"14913:423:6","statements":[{"assignments":[1195],"declarations":[{"constant":false,"id":1195,"mutability":"mutable","name":"owner","nameLocation":"14935:5:6","nodeType":"VariableDeclaration","scope":1231,"src":"14927:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1199,"initialValue":{"arguments":[{"id":1197,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"14957:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1196,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"14943:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:6"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1200,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15093:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:6","typeDescriptions":{}}},"id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1206,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15115:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1207,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15124:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:6","subExpression":{"arguments":[{"id":1211,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15150:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1212,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15157:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1210,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"15133:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1221,"nodeType":"IfStatement","src":"15089:142:6","trueBody":{"id":1220,"nodeType":"Block","src":"15164:67:6","statements":[{"errorCall":{"arguments":[{"id":1217,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15211:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1216,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"15189:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1219,"nodeType":"RevertStatement","src":"15182:34:6"}]}},{"condition":{"id":1222,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"15249:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1230,"nodeType":"IfStatement","src":"15245:81:6","trueBody":{"id":1229,"nodeType":"Block","src":"15260:66:6","statements":[{"eventCall":{"arguments":[{"id":1224,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"15292:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1225,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"15299:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"15303:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1223,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"15283:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1228,"nodeType":"EmitStatement","src":"15278:33:6"}]}}]}},{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1233,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"15346:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1235,"indexExpression":{"id":1234,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"15362:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"15373:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1238,"nodeType":"ExpressionStatement","src":"15346:29:6"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"14544:171:6","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:6","nodeType":"FunctionDefinition","parameters":{"id":1184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"to","nameLocation":"14746:2:6","nodeType":"VariableDeclaration","scope":1240,"src":"14738:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:6","nodeType":"VariableDeclaration","scope":1240,"src":"14750:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"auth","nameLocation":"14775:4:6","nodeType":"VariableDeclaration","scope":1240,"src":"14767:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:6","nodeType":"VariableDeclaration","scope":1240,"src":"14781:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1182,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:6"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[],"src":"14814:0:6"},"scope":1371,"src":"14720:662:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"15684:219:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1250,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15698:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:6","typeDescriptions":{}}},"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1261,"nodeType":"IfStatement","src":"15694:91:6","trueBody":{"id":1260,"nodeType":"Block","src":"15722:63:6","statements":[{"errorCall":{"arguments":[{"id":1257,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15765:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1256,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"15743:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1259,"nodeType":"RevertStatement","src":"15736:38:6"}]}},{"expression":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1262,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"15794:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1265,"indexExpression":{"id":1263,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"15813:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1266,"indexExpression":{"id":1264,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15820:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1267,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"15832:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1269,"nodeType":"ExpressionStatement","src":"15794:46:6"},{"eventCall":{"arguments":[{"id":1271,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"15870:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"15877:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1273,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"15887:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1270,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"15855:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"EmitStatement","src":"15850:46:6"}]},"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"15388:198:6","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:6","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"owner","nameLocation":"15627:5:6","nodeType":"VariableDeclaration","scope":1277,"src":"15619:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"operator","nameLocation":"15642:8:6","nodeType":"VariableDeclaration","scope":1277,"src":"15634:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1244,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"approved","nameLocation":"15657:8:6","nodeType":"VariableDeclaration","scope":1277,"src":"15652:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1246,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:6"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[],"src":"15684:0:6"},"scope":1371,"src":"15591:312:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1305,"nodeType":"Block","src":"16210:169:6","statements":[{"assignments":[1286],"declarations":[{"constant":false,"id":1286,"mutability":"mutable","name":"owner","nameLocation":"16228:5:6","nodeType":"VariableDeclaration","scope":1305,"src":"16220:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1290,"initialValue":{"arguments":[{"id":1288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"16245:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1287,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"16236:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1291,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16267:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:6","typeDescriptions":{}}},"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1302,"nodeType":"IfStatement","src":"16263:88:6","trueBody":{"id":1301,"nodeType":"Block","src":"16288:63:6","statements":[{"errorCall":{"arguments":[{"id":1298,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"16332:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1297,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"16309:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1300,"nodeType":"RevertStatement","src":"16302:38:6"}]}},{"expression":{"id":1303,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16367:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1284,"id":1304,"nodeType":"Return","src":"16360:12:6"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"15909:224:6","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1306,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:6","nodeType":"FunctionDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:6","nodeType":"VariableDeclaration","scope":1306,"src":"16161:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:6"},"returnParameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1306,"src":"16201:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:6"},"scope":1371,"src":"16138:241:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1369,"nodeType":"Block","src":"17020:680:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1318,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17034:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:6","memberName":"code","nodeType":"MemberAccess","src":"17034:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:6","memberName":"length","nodeType":"MemberAccess","src":"17034:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"17030:664:6","trueBody":{"id":1367,"nodeType":"Block","src":"17054:640:6","statements":[{"clauses":[{"block":{"id":1347,"nodeType":"Block","src":"17168:162:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1336,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"17190:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1337,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"17200:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1506_$","typeString":"type(contract IERC721Receiver)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:6","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"17200:32:6","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:6","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1346,"nodeType":"IfStatement","src":"17186:130:6","trueBody":{"id":1345,"nodeType":"Block","src":"17243:73:6","statements":[{"errorCall":{"arguments":[{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17294:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1341,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"17272:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1344,"nodeType":"RevertStatement","src":"17265:32:6"}]}}]},"errorName":"","id":1348,"nodeType":"TryCatchClause","parameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"retval","nameLocation":"17160:6:6","nodeType":"VariableDeclaration","scope":1348,"src":"17153:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1333,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:6"},"src":"17144:186:6"},{"block":{"id":1364,"nodeType":"Block","src":"17359:325:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1352,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"17381:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:6","memberName":"length","nodeType":"MemberAccess","src":"17381:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1362,"nodeType":"Block","src":"17480:190:6","statements":[{"AST":{"nativeSrc":"17566:86:6","nodeType":"YulBlock","src":"17566:86:6","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"17603:2:6","nodeType":"YulLiteral","src":"17603:2:6","type":"","value":"32"},{"name":"reason","nativeSrc":"17607:6:6","nodeType":"YulIdentifier","src":"17607:6:6"}],"functionName":{"name":"add","nativeSrc":"17599:3:6","nodeType":"YulIdentifier","src":"17599:3:6"},"nativeSrc":"17599:15:6","nodeType":"YulFunctionCall","src":"17599:15:6"},{"arguments":[{"name":"reason","nativeSrc":"17622:6:6","nodeType":"YulIdentifier","src":"17622:6:6"}],"functionName":{"name":"mload","nativeSrc":"17616:5:6","nodeType":"YulIdentifier","src":"17616:5:6"},"nativeSrc":"17616:13:6","nodeType":"YulFunctionCall","src":"17616:13:6"}],"functionName":{"name":"revert","nativeSrc":"17592:6:6","nodeType":"YulIdentifier","src":"17592:6:6"},"nativeSrc":"17592:38:6","nodeType":"YulFunctionCall","src":"17592:38:6"},"nativeSrc":"17592:38:6","nodeType":"YulExpressionStatement","src":"17592:38:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1350,"isOffset":false,"isSlot":false,"src":"17607:6:6","valueSize":1},{"declaration":1350,"isOffset":false,"isSlot":false,"src":"17622:6:6","valueSize":1}],"id":1361,"nodeType":"InlineAssembly","src":"17557:95:6"}]},"id":1363,"nodeType":"IfStatement","src":"17377:293:6","trueBody":{"id":1360,"nodeType":"Block","src":"17401:73:6","statements":[{"errorCall":{"arguments":[{"id":1357,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17452:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1356,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"17430:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1359,"nodeType":"RevertStatement","src":"17423:32:6"}]}}]},"errorName":"","id":1365,"nodeType":"TryCatchClause","parameters":{"id":1351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1350,"mutability":"mutable","name":"reason","nameLocation":"17351:6:6","nodeType":"VariableDeclaration","scope":1365,"src":"17338:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1349,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:6"},"src":"17331:353:6"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1327,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"17109:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1329,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"17123:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"17129:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1331,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"17138:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1324,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"17088:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1323,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"17072:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1506_$","typeString":"type(contract IERC721Receiver)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1506","typeString":"contract IERC721Receiver"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:6","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"17072:36:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:6","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1366,"nodeType":"TryStatement","src":"17068:616:6"}]}}]},"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"16385:528:6","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1370,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:6","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"from","nameLocation":"16958:4:6","nodeType":"VariableDeclaration","scope":1370,"src":"16950:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"to","nameLocation":"16972:2:6","nodeType":"VariableDeclaration","scope":1370,"src":"16964:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1310,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:6","nodeType":"VariableDeclaration","scope":1370,"src":"16976:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"data","nameLocation":"17006:4:6","nodeType":"VariableDeclaration","scope":1370,"src":"16993:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1314,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:6"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[],"src":"17020:0:6"},"scope":1371,"src":"16918:782:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1372,"src":"776:16926:6","usedErrors":[273,278,287,292,297,304,309,314],"usedEvents":[1387,1396,1405]}],"src":"107:17596:6"},"id":6},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1981],"IERC721":[1488]},"id":1489,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1373,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1489,"sourceUnit":1982,"src":"134:62:7","symbolAliases":[{"foreign":{"id":1374,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"142:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1377,"name":"IERC165","nameLocations":["287:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"287:7:7"},"id":1378,"nodeType":"InheritanceSpecifier","src":"287:7:7"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"198:67:7","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1488,"linearizedBaseContracts":[1488,1981],"name":"IERC721","nameLocation":"276:7:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1379,"nodeType":"StructuredDocumentation","src":"301:88:7","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1387,"name":"Transfer","nameLocation":"400:8:7","nodeType":"EventDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:7","nodeType":"VariableDeclaration","scope":1387,"src":"409:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1380,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1383,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:7","nodeType":"VariableDeclaration","scope":1387,"src":"431:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:7","nodeType":"VariableDeclaration","scope":1387,"src":"451:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:7"},"src":"394:82:7"},{"anonymous":false,"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"482:94:7","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1396,"name":"Approval","nameLocation":"587:8:7","nodeType":"EventDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:7","nodeType":"VariableDeclaration","scope":1396,"src":"596:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1392,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:7","nodeType":"VariableDeclaration","scope":1396,"src":"619:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:7","nodeType":"VariableDeclaration","scope":1396,"src":"645:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:7"},"src":"581:89:7"},{"anonymous":false,"documentation":{"id":1397,"nodeType":"StructuredDocumentation","src":"676:117:7","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1405,"name":"ApprovalForAll","nameLocation":"804:14:7","nodeType":"EventDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:7","nodeType":"VariableDeclaration","scope":1405,"src":"819:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1401,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:7","nodeType":"VariableDeclaration","scope":1405,"src":"842:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1403,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:7","nodeType":"VariableDeclaration","scope":1405,"src":"868:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1402,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:7"},"src":"798:85:7"},{"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"889:76:7","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1413,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:7","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"owner","nameLocation":"997:5:7","nodeType":"VariableDeclaration","scope":1413,"src":"989:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1407,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:7"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"balance","nameLocation":"1035:7:7","nodeType":"VariableDeclaration","scope":1413,"src":"1027:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:7"},"scope":1488,"src":"970:74:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"1050:131:7","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1421,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:7","nodeType":"FunctionDefinition","parameters":{"id":1417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:7","nodeType":"VariableDeclaration","scope":1421,"src":"1203:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:7"},"returnParameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"owner","nameLocation":"1251:5:7","nodeType":"VariableDeclaration","scope":1421,"src":"1243:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:7"},"scope":1488,"src":"1186:72:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"1264:565:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1433,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:7","nodeType":"FunctionDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"from","nameLocation":"1868:4:7","nodeType":"VariableDeclaration","scope":1433,"src":"1860:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1423,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"to","nameLocation":"1882:2:7","nodeType":"VariableDeclaration","scope":1433,"src":"1874:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:7","nodeType":"VariableDeclaration","scope":1433,"src":"1886:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"data","nameLocation":"1918:4:7","nodeType":"VariableDeclaration","scope":1433,"src":"1903:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:7"},"returnParameters":{"id":1432,"nodeType":"ParameterList","parameters":[],"src":"1932:0:7"},"scope":1488,"src":"1834:99:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"1939:705:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1443,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:7","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"from","nameLocation":"2683:4:7","nodeType":"VariableDeclaration","scope":1443,"src":"2675:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"to","nameLocation":"2697:2:7","nodeType":"VariableDeclaration","scope":1443,"src":"2689:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:7","nodeType":"VariableDeclaration","scope":1443,"src":"2701:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:7"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[],"src":"2726:0:7"},"scope":1488,"src":"2649:78:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"2733:732:7","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1453,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:7","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"from","nameLocation":"3500:4:7","nodeType":"VariableDeclaration","scope":1453,"src":"3492:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"to","nameLocation":"3514:2:7","nodeType":"VariableDeclaration","scope":1453,"src":"3506:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1447,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:7","nodeType":"VariableDeclaration","scope":1453,"src":"3518:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:7"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[],"src":"3543:0:7"},"scope":1488,"src":"3470:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"3550:452:7","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1461,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:7","nodeType":"FunctionDefinition","parameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"to","nameLocation":"4032:2:7","nodeType":"VariableDeclaration","scope":1461,"src":"4024:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:7","nodeType":"VariableDeclaration","scope":1461,"src":"4036:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:7"},"returnParameters":{"id":1460,"nodeType":"ParameterList","parameters":[],"src":"4061:0:7"},"scope":1488,"src":"4007:55:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1462,"nodeType":"StructuredDocumentation","src":"4068:315:7","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1469,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:7","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"operator","nameLocation":"4423:8:7","nodeType":"VariableDeclaration","scope":1469,"src":"4415:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"approved","nameLocation":"4438:8:7","nodeType":"VariableDeclaration","scope":1469,"src":"4433:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1465,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:7"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[],"src":"4456:0:7"},"scope":1488,"src":"4388:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"4463:139:7","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1477,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:7","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:7","nodeType":"VariableDeclaration","scope":1477,"src":"4628:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:7"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"operator","nameLocation":"4676:8:7","nodeType":"VariableDeclaration","scope":1477,"src":"4668:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:7"},"scope":1488,"src":"4607:79:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"4692:138:7","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1487,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:7","nodeType":"FunctionDefinition","parameters":{"id":1483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"owner","nameLocation":"4869:5:7","nodeType":"VariableDeclaration","scope":1487,"src":"4861:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"operator","nameLocation":"4884:8:7","nodeType":"VariableDeclaration","scope":1487,"src":"4876:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:7"},"returnParameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1487,"src":"4917:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1484,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:7"},"scope":1488,"src":"4835:88:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1489,"src":"266:4659:7","usedErrors":[],"usedEvents":[1387,1396,1405]}],"src":"108:4818:7"},"id":7},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1506]},"id":1507,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1490,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"142:152:8","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1506,"linearizedBaseContracts":[1506],"name":"IERC721Receiver","nameLocation":"305:15:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"327:500:8","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1505,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:8","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"operator","nameLocation":"875:8:8","nodeType":"VariableDeclaration","scope":1505,"src":"867:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"from","nameLocation":"901:4:8","nodeType":"VariableDeclaration","scope":1505,"src":"893:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:8","nodeType":"VariableDeclaration","scope":1505,"src":"915:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"data","nameLocation":"955:4:8","nodeType":"VariableDeclaration","scope":1505,"src":"940:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1499,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:8"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1505,"src":"984:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1502,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:8"},"scope":1506,"src":"832:160:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1507,"src":"295:699:8","usedErrors":[],"usedEvents":[]}],"src":"116:879:8"},"id":8},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"ERC721":[1371],"ERC721URIStorage":[1632],"IERC165":[1981],"IERC4906":[221],"Strings":[1945]},"id":1633,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1508,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1633,"sourceUnit":1372,"src":"154:37:9","symbolAliases":[{"foreign":{"id":1509,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"162:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../../utils/Strings.sol","id":1512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1633,"sourceUnit":1946,"src":"192:51:9","symbolAliases":[{"foreign":{"id":1511,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"200:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","file":"../../../interfaces/IERC4906.sol","id":1514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1633,"sourceUnit":222,"src":"244:58:9","symbolAliases":[{"foreign":{"id":1513,"name":"IERC4906","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"252:8:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"../../../interfaces/IERC165.sol","id":1516,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1633,"sourceUnit":198,"src":"303:56:9","symbolAliases":[{"foreign":{"id":1515,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"311:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1518,"name":"IERC4906","nameLocations":["469:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":221,"src":"469:8:9"},"id":1519,"nodeType":"InheritanceSpecifier","src":"469:8:9"},{"baseName":{"id":1520,"name":"ERC721","nameLocations":["479:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1371,"src":"479:6:9"},"id":1521,"nodeType":"InheritanceSpecifier","src":"479:6:9"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":1517,"nodeType":"StructuredDocumentation","src":"361:69:9","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":true,"id":1632,"linearizedBaseContracts":[1632,1371,315,1660,221,1488,1969,1981,1690],"name":"ERC721URIStorage","nameLocation":"449:16:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1524,"libraryName":{"id":1522,"name":"Strings","nameLocations":["498:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1945,"src":"498:7:9"},"nodeType":"UsingForDirective","src":"492:26:9","typeName":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":1530,"mutability":"constant","name":"ERC4906_INTERFACE_ID","nameLocation":"730:20:9","nodeType":"VariableDeclaration","scope":1632,"src":"706:65:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1525,"name":"bytes4","nodeType":"ElementaryTypeName","src":"706:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"hexValue":"30783439303634393036","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"760:10:9","typeDescriptions":{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"},"value":"0x49064906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"}],"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1526,"name":"bytes4","nodeType":"ElementaryTypeName","src":"753:6:9","typeDescriptions":{}}},"id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":false,"id":1534,"mutability":"mutable","name":"_tokenURIs","nameLocation":"860:10:9","nodeType":"VariableDeclaration","scope":1632,"src":"817:53:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1533,"keyName":"tokenId","keyNameLocation":"833:7:9","keyType":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"817:34:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1532,"name":"string","nodeType":"ElementaryTypeName","src":"844:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[463,1980],"body":{"id":1554,"nodeType":"Block","src":"1045:99:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1062:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1546,"name":"ERC4906_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"1077:20:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1062:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1550,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1125:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1548,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1101:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1632_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1107:17:9","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":463,"src":"1101:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1101:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1062:75:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1544,"id":1553,"nodeType":"Return","src":"1055:82:9"}]},"documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"877:55:9","text":" @dev See {IERC165-supportsInterface}"},"functionSelector":"01ffc9a7","id":1555,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"946:17:9","nodeType":"FunctionDefinition","overrides":{"id":1541,"nodeType":"OverrideSpecifier","overrides":[{"id":1539,"name":"ERC721","nameLocations":["1013:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1371,"src":"1013:6:9"},{"id":1540,"name":"IERC165","nameLocations":["1021:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"1021:7:9"}],"src":"1004:25:9"},"parameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"interfaceId","nameLocation":"971:11:9","nodeType":"VariableDeclaration","scope":1555,"src":"964:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1536,"name":"bytes4","nodeType":"ElementaryTypeName","src":"964:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"963:20:9"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1555,"src":"1039:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1542,"name":"bool","nodeType":"ElementaryTypeName","src":"1039:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1038:6:9"},"scope":1632,"src":"937:207:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[558],"body":{"id":1611,"nodeType":"Block","src":"1298:505:9","statements":[{"expression":{"arguments":[{"id":1565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1322:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1564,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"1308:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1567,"nodeType":"ExpressionStatement","src":"1308:22:9"},{"assignments":[1569],"declarations":[{"constant":false,"id":1569,"mutability":"mutable","name":"_tokenURI","nameLocation":"1355:9:9","nodeType":"VariableDeclaration","scope":1611,"src":"1341:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1568,"name":"string","nodeType":"ElementaryTypeName","src":"1341:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1573,"initialValue":{"baseExpression":{"id":1570,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"1367:10:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1572,"indexExpression":{"id":1571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1378:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1367:19:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1341:45:9"},{"assignments":[1575],"declarations":[{"constant":false,"id":1575,"mutability":"mutable","name":"base","nameLocation":"1410:4:9","nodeType":"VariableDeclaration","scope":1611,"src":"1396:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1574,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1578,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1576,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1417:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1396:31:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1581,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"1506:4:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1500:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1579,"name":"bytes","nodeType":"ElementaryTypeName","src":"1500:5:9","typeDescriptions":{}}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:6:9","memberName":"length","nodeType":"MemberAccess","src":"1500:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1500:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1589,"nodeType":"IfStatement","src":"1496:70:9","trueBody":{"id":1588,"nodeType":"Block","src":"1525:41:9","statements":[{"expression":{"id":1586,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"1546:9:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1563,"id":1587,"nodeType":"Return","src":"1539:16:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1592,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"1671:9:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1590,"name":"bytes","nodeType":"ElementaryTypeName","src":"1665:5:9","typeDescriptions":{}}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1682:6:9","memberName":"length","nodeType":"MemberAccess","src":"1665:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1665:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1605,"nodeType":"IfStatement","src":"1661:95:9","trueBody":{"id":1604,"nodeType":"Block","src":"1694:62:9","statements":[{"expression":{"arguments":[{"id":1600,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"1729:4:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1601,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"1735:9:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1715:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1597,"name":"string","nodeType":"ElementaryTypeName","src":"1715:6:9","typeDescriptions":{}}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1722:6:9","memberName":"concat","nodeType":"MemberAccess","src":"1715:13:9","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1715:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1563,"id":1603,"nodeType":"Return","src":"1708:37:9"}]}},{"expression":{"arguments":[{"id":1608,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1788:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1606,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1773:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1632_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1779:8:9","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":558,"src":"1773:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1773:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1563,"id":1610,"nodeType":"Return","src":"1766:30:9"}]},"documentation":{"id":1556,"nodeType":"StructuredDocumentation","src":"1150:55:9","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1612,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1219:8:9","nodeType":"FunctionDefinition","overrides":{"id":1560,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:9"},"parameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"tokenId","nameLocation":"1236:7:9","nodeType":"VariableDeclaration","scope":1612,"src":"1228:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1557,"name":"uint256","nodeType":"ElementaryTypeName","src":"1228:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1227:17:9"},"returnParameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"1283:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1561,"name":"string","nodeType":"ElementaryTypeName","src":"1283:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1282:15:9"},"scope":1632,"src":"1210:593:9","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1630,"nodeType":"Block","src":"2003:86:9","statements":[{"expression":{"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1620,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"2013:10:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1622,"indexExpression":{"id":1621,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2024:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2013:19:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1623,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"2035:9:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2013:31:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1625,"nodeType":"ExpressionStatement","src":"2013:31:9"},{"eventCall":{"arguments":[{"id":1627,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2074:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1626,"name":"MetadataUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"2059:14:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1629,"nodeType":"EmitStatement","src":"2054:28:9"}]},"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"1809:108:9","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Emits {MetadataUpdate}."},"id":1631,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1931:12:9","nodeType":"FunctionDefinition","parameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"tokenId","nameLocation":"1952:7:9","nodeType":"VariableDeclaration","scope":1631,"src":"1944:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"_tokenURI","nameLocation":"1975:9:9","nodeType":"VariableDeclaration","scope":1631,"src":"1961:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1616,"name":"string","nodeType":"ElementaryTypeName","src":"1961:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1943:42:9"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[],"src":"2003:0:9"},"scope":1632,"src":"1922:167:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1633,"src":"431:1660:9","usedErrors":[273,278,287,292,297,304,309,314],"usedEvents":[213,220,1387,1396,1405]}],"src":"128:1964:9"},"id":9},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1488],"IERC721Metadata":[1660]},"id":1661,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1634,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1636,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1661,"sourceUnit":1489,"src":"153:39:10","symbolAliases":[{"foreign":{"id":1635,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"161:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1638,"name":"IERC721","nameLocations":["357:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"357:7:10"},"id":1639,"nodeType":"InheritanceSpecifier","src":"357:7:10"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1637,"nodeType":"StructuredDocumentation","src":"194:133:10","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1660,"linearizedBaseContracts":[1660,1488,1981],"name":"IERC721Metadata","nameLocation":"338:15:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1640,"nodeType":"StructuredDocumentation","src":"371:58:10","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1645,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:10","nodeType":"FunctionDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[],"src":"447:2:10"},"returnParameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1645,"src":"473:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1642,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:10"},"scope":1660,"src":"434:54:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"494:60:10","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1651,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:10","nodeType":"FunctionDefinition","parameters":{"id":1647,"nodeType":"ParameterList","parameters":[],"src":"574:2:10"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1651,"src":"600:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1648,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:10"},"scope":1660,"src":"559:56:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"621:90:10","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1659,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:10","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:10","nodeType":"VariableDeclaration","scope":1659,"src":"734:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:10"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"774:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1656,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:10"},"scope":1660,"src":"716:73:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1661,"src":"328:463:10","usedErrors":[],"usedEvents":[1387,1396,1405]}],"src":"127:665:10"},"id":10},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1690]},"id":1691,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1662,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"127:496:11","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1690,"linearizedBaseContracts":[1690],"name":"Context","nameLocation":"642:7:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1671,"nodeType":"Block","src":"718:34:11","statements":[{"expression":{"expression":{"id":1668,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"735:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:11","memberName":"sender","nodeType":"MemberAccess","src":"735:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1667,"id":1670,"nodeType":"Return","src":"728:17:11"}]},"id":1672,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:11","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[],"src":"675:2:11"},"returnParameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1672,"src":"709:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:11"},"scope":1690,"src":"656:96:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1680,"nodeType":"Block","src":"825:32:11","statements":[{"expression":{"expression":{"id":1677,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"842:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:11","memberName":"data","nodeType":"MemberAccess","src":"842:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1676,"id":1679,"nodeType":"Return","src":"835:15:11"}]},"id":1681,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:11","nodeType":"FunctionDefinition","parameters":{"id":1673,"nodeType":"ParameterList","parameters":[],"src":"775:2:11"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"809:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1674,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:11"},"scope":1690,"src":"758:99:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1688,"nodeType":"Block","src":"935:25:11","statements":[{"expression":{"hexValue":"30","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1685,"id":1687,"nodeType":"Return","src":"945:8:11"}]},"id":1689,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:11","nodeType":"FunctionDefinition","parameters":{"id":1682,"nodeType":"ParameterList","parameters":[],"src":"892:2:11"},"returnParameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1689,"src":"926:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:11"},"scope":1690,"src":"863:97:11","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1691,"src":"624:338:11","usedErrors":[],"usedEvents":[]}],"src":"101:862:11"},"id":11},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3035],"SignedMath":[3140],"Strings":[1945]},"id":1946,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1692,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1946,"sourceUnit":3036,"src":"127:37:12","symbolAliases":[{"foreign":{"id":1693,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"135:4:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1696,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1946,"sourceUnit":3141,"src":"165:49:12","symbolAliases":[{"foreign":{"id":1695,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"173:10:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1697,"nodeType":"StructuredDocumentation","src":"216:34:12","text":" @dev String operations."},"fullyImplemented":true,"id":1945,"linearizedBaseContracts":[1945],"name":"Strings","nameLocation":"259:7:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1700,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:12","nodeType":"VariableDeclaration","scope":1945,"src":"273:56:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1698,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1703,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:12","nodeType":"VariableDeclaration","scope":1945,"src":"335:42:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1701,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:12","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"384:81:12","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1710,"name":"StringsInsufficientHexLength","nameLocation":"476:28:12","nodeType":"ErrorDefinition","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"value","nameLocation":"513:5:12","nodeType":"VariableDeclaration","scope":1710,"src":"505:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1705,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"length","nameLocation":"528:6:12","nodeType":"VariableDeclaration","scope":1710,"src":"520:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1707,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:12"},"src":"470:66:12"},{"body":{"id":1757,"nodeType":"Block","src":"708:627:12","statements":[{"id":1756,"nodeType":"UncheckedBlock","src":"718:611:12","statements":[{"assignments":[1719],"declarations":[{"constant":false,"id":1719,"mutability":"mutable","name":"length","nameLocation":"750:6:12","nodeType":"VariableDeclaration","scope":1756,"src":"742:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1726,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"770:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1720,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"759:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3035_$","typeString":"type(library Math)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:12","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2855,"src":"759:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:12"},{"assignments":[1728],"declarations":[{"constant":false,"id":1728,"mutability":"mutable","name":"buffer","nameLocation":"808:6:12","nodeType":"VariableDeclaration","scope":1756,"src":"794:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1727,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1733,"initialValue":{"arguments":[{"id":1731,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"828:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1729,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:12"},{"assignments":[1735],"declarations":[{"constant":false,"id":1735,"mutability":"mutable","name":"ptr","nameLocation":"857:3:12","nodeType":"VariableDeclaration","scope":1756,"src":"849:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1736,"nodeType":"VariableDeclarationStatement","src":"849:11:12"},{"AST":{"nativeSrc":"930:67:12","nodeType":"YulBlock","src":"930:67:12","statements":[{"nativeSrc":"948:35:12","nodeType":"YulAssignment","src":"948:35:12","value":{"arguments":[{"name":"buffer","nativeSrc":"959:6:12","nodeType":"YulIdentifier","src":"959:6:12"},{"arguments":[{"kind":"number","nativeSrc":"971:2:12","nodeType":"YulLiteral","src":"971:2:12","type":"","value":"32"},{"name":"length","nativeSrc":"975:6:12","nodeType":"YulIdentifier","src":"975:6:12"}],"functionName":{"name":"add","nativeSrc":"967:3:12","nodeType":"YulIdentifier","src":"967:3:12"},"nativeSrc":"967:15:12","nodeType":"YulFunctionCall","src":"967:15:12"}],"functionName":{"name":"add","nativeSrc":"955:3:12","nodeType":"YulIdentifier","src":"955:3:12"},"nativeSrc":"955:28:12","nodeType":"YulFunctionCall","src":"955:28:12"},"variableNames":[{"name":"ptr","nativeSrc":"948:3:12","nodeType":"YulIdentifier","src":"948:3:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1728,"isOffset":false,"isSlot":false,"src":"959:6:12","valueSize":1},{"declaration":1719,"isOffset":false,"isSlot":false,"src":"975:6:12","valueSize":1},{"declaration":1735,"isOffset":false,"isSlot":false,"src":"948:3:12","valueSize":1}],"id":1737,"nodeType":"InlineAssembly","src":"921:76:12"},{"body":{"id":1752,"nodeType":"Block","src":"1023:269:12","statements":[{"expression":{"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:12","subExpression":{"id":1739,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"1041:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1741,"nodeType":"ExpressionStatement","src":"1041:5:12"},{"AST":{"nativeSrc":"1124:86:12","nodeType":"YulBlock","src":"1124:86:12","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1154:3:12","nodeType":"YulIdentifier","src":"1154:3:12"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:12","nodeType":"YulIdentifier","src":"1168:5:12"},{"kind":"number","nativeSrc":"1175:2:12","nodeType":"YulLiteral","src":"1175:2:12","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1164:3:12","nodeType":"YulIdentifier","src":"1164:3:12"},"nativeSrc":"1164:14:12","nodeType":"YulFunctionCall","src":"1164:14:12"},{"name":"HEX_DIGITS","nativeSrc":"1180:10:12","nodeType":"YulIdentifier","src":"1180:10:12"}],"functionName":{"name":"byte","nativeSrc":"1159:4:12","nodeType":"YulIdentifier","src":"1159:4:12"},"nativeSrc":"1159:32:12","nodeType":"YulFunctionCall","src":"1159:32:12"}],"functionName":{"name":"mstore8","nativeSrc":"1146:7:12","nodeType":"YulIdentifier","src":"1146:7:12"},"nativeSrc":"1146:46:12","nodeType":"YulFunctionCall","src":"1146:46:12"},"nativeSrc":"1146:46:12","nodeType":"YulExpressionStatement","src":"1146:46:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1700,"isOffset":false,"isSlot":false,"src":"1180:10:12","valueSize":1},{"declaration":1735,"isOffset":false,"isSlot":false,"src":"1154:3:12","valueSize":1},{"declaration":1713,"isOffset":false,"isSlot":false,"src":"1168:5:12","valueSize":1}],"id":1742,"nodeType":"InlineAssembly","src":"1115:95:12"},{"expression":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"1227:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1746,"nodeType":"ExpressionStatement","src":"1227:11:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"1260:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1751,"nodeType":"IfStatement","src":"1256:21:12","trueBody":{"id":1750,"nodeType":"Break","src":"1272:5:12"}}]},"condition":{"hexValue":"74727565","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1753,"nodeType":"WhileStatement","src":"1010:282:12"},{"expression":{"id":1754,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"1312:6:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1717,"id":1755,"nodeType":"Return","src":"1305:13:12"}]}]},"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"542:90:12","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1758,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:12","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"value","nameLocation":"663:5:12","nodeType":"VariableDeclaration","scope":1758,"src":"655:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:12"},"returnParameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1758,"src":"693:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1715,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:12"},"scope":1945,"src":"637:698:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1783,"nodeType":"Block","src":"1511:92:12","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"1542:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:12","trueExpression":{"hexValue":"2d","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"1588:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1776,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"1573:10:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3140_$","typeString":"type(library SignedMath)"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:12","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3139,"src":"1573:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1775,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"1564:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1766,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:12","typeDescriptions":{}}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:12","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:12","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1765,"id":1782,"nodeType":"Return","src":"1521:75:12"}]},"documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"1341:89:12","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1784,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:12","nodeType":"FunctionDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"value","nameLocation":"1466:5:12","nodeType":"VariableDeclaration","scope":1784,"src":"1459:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1760,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:12"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1784,"src":"1496:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1763,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:12"},"scope":1945,"src":"1435:168:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1803,"nodeType":"Block","src":"1782:100:12","statements":[{"id":1802,"nodeType":"UncheckedBlock","src":"1792:84:12","statements":[{"expression":{"arguments":[{"id":1793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"1835:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"1854:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1794,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"1842:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3035_$","typeString":"type(library Math)"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:12","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2977,"src":"1842:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1792,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1804,1887,1907],"referencedDeclaration":1887,"src":"1823:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1791,"id":1801,"nodeType":"Return","src":"1816:49:12"}]}]},"documentation":{"id":1785,"nodeType":"StructuredDocumentation","src":"1609:94:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1804,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:12","nodeType":"FunctionDefinition","parameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"value","nameLocation":"1737:5:12","nodeType":"VariableDeclaration","scope":1804,"src":"1729:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:12"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1804,"src":"1767:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1789,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:12"},"scope":1945,"src":"1708:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1886,"nodeType":"Block","src":"2095:435:12","statements":[{"assignments":[1815],"declarations":[{"constant":false,"id":1815,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:12","nodeType":"VariableDeclaration","scope":1886,"src":"2105:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1814,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1817,"initialValue":{"id":1816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"2126:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:12"},{"assignments":[1819],"declarations":[{"constant":false,"id":1819,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:12","nodeType":"VariableDeclaration","scope":1886,"src":"2141:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1818,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1828,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1823,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"2177:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1820,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:12"},{"expression":{"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1829,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"2198:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1831,"indexExpression":{"hexValue":"30","id":1830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1834,"nodeType":"ExpressionStatement","src":"2198:15:12"},{"expression":{"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1835,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"2223:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1837,"indexExpression":{"hexValue":"31","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1840,"nodeType":"ExpressionStatement","src":"2223:15:12"},{"body":{"id":1869,"nodeType":"Block","src":"2293:95:12","statements":[{"expression":{"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1855,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"2307:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1857,"indexExpression":{"id":1856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2314:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1858,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"2319:10:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1862,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1859,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"2330:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:12","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1864,"nodeType":"ExpressionStatement","src":"2307:40:12"},{"expression":{"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1865,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"2361:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1868,"nodeType":"ExpressionStatement","src":"2361:16:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1849,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2281:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1870,"initializationExpression":{"assignments":[1842],"declarations":[{"constant":false,"id":1842,"mutability":"mutable","name":"i","nameLocation":"2261:1:12","nodeType":"VariableDeclaration","scope":1870,"src":"2253:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1848,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1844,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"2269:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:12"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:12","subExpression":{"id":1852,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2290:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1854,"nodeType":"ExpressionStatement","src":"2288:3:12"},"nodeType":"ForStatement","src":"2248:140:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1871,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"2401:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1880,"nodeType":"IfStatement","src":"2397:96:12","trueBody":{"id":1879,"nodeType":"Block","src":"2418:75:12","statements":[{"errorCall":{"arguments":[{"id":1875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"2468:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1876,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"2475:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1874,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"2439:28:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1878,"nodeType":"RevertStatement","src":"2432:50:12"}]}},{"expression":{"arguments":[{"id":1883,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"2516:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1881,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:12","typeDescriptions":{}}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1813,"id":1885,"nodeType":"Return","src":"2502:21:12"}]},"documentation":{"id":1805,"nodeType":"StructuredDocumentation","src":"1888:112:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1887,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:12","nodeType":"FunctionDefinition","parameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"value","nameLocation":"2034:5:12","nodeType":"VariableDeclaration","scope":1887,"src":"2026:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1809,"mutability":"mutable","name":"length","nameLocation":"2049:6:12","nodeType":"VariableDeclaration","scope":1887,"src":"2041:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:12"},"returnParameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1887,"src":"2080:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1811,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:12"},"scope":1945,"src":"2005:525:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1906,"nodeType":"Block","src":"2762:75:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1900,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"2807:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1898,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:12","typeDescriptions":{}}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:12","typeDescriptions":{}}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1903,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"2815:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1895,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1804,1887,1907],"referencedDeclaration":1887,"src":"2779:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1894,"id":1905,"nodeType":"Return","src":"2772:58:12"}]},"documentation":{"id":1888,"nodeType":"StructuredDocumentation","src":"2536:148:12","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:12","nodeType":"FunctionDefinition","parameters":{"id":1891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"addr","nameLocation":"2718:4:12","nodeType":"VariableDeclaration","scope":1907,"src":"2710:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1889,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:12"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1907,"src":"2747:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1892,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:12"},"scope":1945,"src":"2689:148:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1943,"nodeType":"Block","src":"2992:104:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3015:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1917,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:12","typeDescriptions":{}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:12","memberName":"length","nodeType":"MemberAccess","src":"3009:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1924,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"3034:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1922,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:12","typeDescriptions":{}}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:12","memberName":"length","nodeType":"MemberAccess","src":"3028:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3063:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1929,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:12","typeDescriptions":{}}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1928,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3047:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1937,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"3086:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1935,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:12","typeDescriptions":{}}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1934,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3070:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1916,"id":1942,"nodeType":"Return","src":"3002:87:12"}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"2843:66:12","text":" @dev Returns true if the two strings are equal."},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:12","nodeType":"FunctionDefinition","parameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"a","nameLocation":"2943:1:12","nodeType":"VariableDeclaration","scope":1944,"src":"2929:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1909,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"b","nameLocation":"2960:1:12","nodeType":"VariableDeclaration","scope":1944,"src":"2946:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1911,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:12"},"returnParameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1944,"src":"2986:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1914,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:12"},"scope":1945,"src":"2914:182:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1946,"src":"251:2847:12","usedErrors":[1710],"usedEvents":[]}],"src":"101:2998:12"},"id":12},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1969],"IERC165":[1981]},"id":1970,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1947,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1949,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1970,"sourceUnit":1982,"src":"140:38:13","symbolAliases":[{"foreign":{"id":1948,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"148:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1951,"name":"IERC165","nameLocations":["687:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1981,"src":"687:7:13"},"id":1952,"nodeType":"InheritanceSpecifier","src":"687:7:13"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"180:478:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1969,"linearizedBaseContracts":[1969,1981],"name":"ERC165","nameLocation":"677:6:13","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1980],"body":{"id":1967,"nodeType":"Block","src":"844:64:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1960,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"861:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1962,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"881:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1981_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1981_$","typeString":"type(contract IERC165)"}],"id":1961,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"876:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1981","typeString":"type(contract IERC165)"}},"id":1964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1959,"id":1966,"nodeType":"Return","src":"854:47:13"}]},"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"701:56:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:13","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:13","nodeType":"VariableDeclaration","scope":1968,"src":"789:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1954,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:13"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"838:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1957,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:13"},"scope":1969,"src":"762:146:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1970,"src":"659:251:13","usedErrors":[],"usedEvents":[]}],"src":"114:797:13"},"id":13},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1981]},"id":1982,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1971,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"141:279:14","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1981,"linearizedBaseContracts":[1981],"name":"IERC165","nameLocation":"431:7:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1973,"nodeType":"StructuredDocumentation","src":"445:340:14","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1980,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:14","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:14","nodeType":"VariableDeclaration","scope":1980,"src":"817:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1974,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:14"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1980,"src":"860:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1977,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:14"},"scope":1981,"src":"790:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1982,"src":"421:447:14","usedErrors":[],"usedEvents":[]}],"src":"115:754:14"},"id":14},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3035]},"id":3036,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1983,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"129:73:15","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3035,"linearizedBaseContracts":[3035],"name":"Math","nameLocation":"211:4:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1985,"nodeType":"StructuredDocumentation","src":"222:50:15","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1987,"name":"MathOverflowedMulDiv","nameLocation":"283:20:15","nodeType":"ErrorDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[],"src":"303:2:15"},"src":"277:29:15"},{"canonicalName":"Math.Rounding","id":1992,"members":[{"id":1988,"name":"Floor","nameLocation":"336:5:15","nodeType":"EnumValue","src":"336:5:15"},{"id":1989,"name":"Ceil","nameLocation":"379:4:15","nodeType":"EnumValue","src":"379:4:15"},{"id":1990,"name":"Trunc","nameLocation":"421:5:15","nodeType":"EnumValue","src":"421:5:15"},{"id":1991,"name":"Expand","nameLocation":"451:6:15","nodeType":"EnumValue","src":"451:6:15"}],"name":"Rounding","nameLocation":"317:8:15","nodeType":"EnumDefinition","src":"312:169:15"},{"body":{"id":2023,"nodeType":"Block","src":"661:140:15","statements":[{"id":2022,"nodeType":"UncheckedBlock","src":"671:124:15","statements":[{"assignments":[2005],"declarations":[{"constant":false,"id":2005,"mutability":"mutable","name":"c","nameLocation":"703:1:15","nodeType":"VariableDeclaration","scope":2022,"src":"695:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2009,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2006,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"707:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2007,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"711:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2010,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"730:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2011,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"734:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2017,"nodeType":"IfStatement","src":"726:28:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2015,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2003,"id":2016,"nodeType":"Return","src":"737:17:15"}},{"expression":{"components":[{"hexValue":"74727565","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2019,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"782:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2003,"id":2021,"nodeType":"Return","src":"768:16:15"}]}]},"documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"487:93:15","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2024,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:15","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"a","nameLocation":"609:1:15","nodeType":"VariableDeclaration","scope":2024,"src":"601:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"b","nameLocation":"620:1:15","nodeType":"VariableDeclaration","scope":2024,"src":"612:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:15"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"646:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1999,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2024,"src":"652:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:15"},"scope":3035,"src":"585:216:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2051,"nodeType":"Block","src":"984:113:15","statements":[{"id":2050,"nodeType":"UncheckedBlock","src":"994:97:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2036,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"1022:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2037,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"1026:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2043,"nodeType":"IfStatement","src":"1018:28:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2041,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2035,"id":2042,"nodeType":"Return","src":"1029:17:15"}},{"expression":{"components":[{"hexValue":"74727565","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2045,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"1074:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"1078:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2048,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2035,"id":2049,"nodeType":"Return","src":"1060:20:15"}]}]},"documentation":{"id":2025,"nodeType":"StructuredDocumentation","src":"807:96:15","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2052,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:15","nodeType":"FunctionDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2027,"mutability":"mutable","name":"a","nameLocation":"932:1:15","nodeType":"VariableDeclaration","scope":2052,"src":"924:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"b","nameLocation":"943:1:15","nodeType":"VariableDeclaration","scope":2052,"src":"935:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:15"},"returnParameters":{"id":2035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2052,"src":"969:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2031,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2052,"src":"975:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:15"},"scope":3035,"src":"908:189:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2093,"nodeType":"Block","src":"1283:417:15","statements":[{"id":2092,"nodeType":"UncheckedBlock","src":"1293:401:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1551:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2071,"nodeType":"IfStatement","src":"1547:28:15","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2063,"id":2070,"nodeType":"Return","src":"1559:16:15"}},{"assignments":[2073],"declarations":[{"constant":false,"id":2073,"mutability":"mutable","name":"c","nameLocation":"1597:1:15","nodeType":"VariableDeclaration","scope":2092,"src":"1589:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2077,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2074,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1601:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2075,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1605:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2078,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"1624:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2079,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1628:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2081,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1633:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2087,"nodeType":"IfStatement","src":"1620:33:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2085,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2063,"id":2086,"nodeType":"Return","src":"1636:17:15"}},{"expression":{"components":[{"hexValue":"74727565","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2089,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"1681:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2063,"id":2091,"nodeType":"Return","src":"1667:16:15"}]}]},"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"1103:99:15","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2094,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:15","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"a","nameLocation":"1231:1:15","nodeType":"VariableDeclaration","scope":2094,"src":"1223:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"b","nameLocation":"1242:1:15","nodeType":"VariableDeclaration","scope":2094,"src":"1234:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2056,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:15"},"returnParameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2094,"src":"1268:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2059,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2094,"src":"1274:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:15"},"scope":3035,"src":"1207:493:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2121,"nodeType":"Block","src":"1887:114:15","statements":[{"id":2120,"nodeType":"UncheckedBlock","src":"1897:98:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"1925:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2113,"nodeType":"IfStatement","src":"1921:29:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2105,"id":2112,"nodeType":"Return","src":"1933:17:15"}},{"expression":{"components":[{"hexValue":"74727565","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2115,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"1978:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2116,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"1982:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2105,"id":2119,"nodeType":"Return","src":"1964:20:15"}]}]},"documentation":{"id":2095,"nodeType":"StructuredDocumentation","src":"1706:100:15","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2122,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:15","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"mutability":"mutable","name":"a","nameLocation":"1835:1:15","nodeType":"VariableDeclaration","scope":2122,"src":"1827:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2096,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2099,"mutability":"mutable","name":"b","nameLocation":"1846:1:15","nodeType":"VariableDeclaration","scope":2122,"src":"1838:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2098,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:15"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2122,"src":"1872:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2101,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2122,"src":"1878:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:15"},"scope":3035,"src":"1811:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2149,"nodeType":"Block","src":"2198:114:15","statements":[{"id":2148,"nodeType":"UncheckedBlock","src":"2208:98:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2134,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"2236:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2141,"nodeType":"IfStatement","src":"2232:29:15","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2133,"id":2140,"nodeType":"Return","src":"2244:17:15"}},{"expression":{"components":[{"hexValue":"74727565","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2143,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"2289:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2144,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"2293:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2133,"id":2147,"nodeType":"Return","src":"2275:20:15"}]}]},"documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"2007:110:15","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2150,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:15","nodeType":"FunctionDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"a","nameLocation":"2146:1:15","nodeType":"VariableDeclaration","scope":2150,"src":"2138:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"b","nameLocation":"2157:1:15","nodeType":"VariableDeclaration","scope":2150,"src":"2149:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:15"},"returnParameters":{"id":2133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"2183:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2129,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"2189:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:15"},"scope":3035,"src":"2122:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2167,"nodeType":"Block","src":"2449:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2466:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2161,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"2470:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2164,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"2478:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:15","trueExpression":{"id":2163,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2474:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2159,"id":2166,"nodeType":"Return","src":"2459:20:15"}]},"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"2318:59:15","text":" @dev Returns the largest of two numbers."},"id":2168,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:15","nodeType":"FunctionDefinition","parameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"a","nameLocation":"2403:1:15","nodeType":"VariableDeclaration","scope":2168,"src":"2395:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2152,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"b","nameLocation":"2414:1:15","nodeType":"VariableDeclaration","scope":2168,"src":"2406:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2154,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:15"},"returnParameters":{"id":2159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2168,"src":"2440:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:15"},"scope":3035,"src":"2382:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2185,"nodeType":"Block","src":"2624:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"2641:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"2645:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2182,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"2653:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:15","trueExpression":{"id":2181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"2649:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2177,"id":2184,"nodeType":"Return","src":"2634:20:15"}]},"documentation":{"id":2169,"nodeType":"StructuredDocumentation","src":"2492:60:15","text":" @dev Returns the smallest of two numbers."},"id":2186,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:15","nodeType":"FunctionDefinition","parameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"a","nameLocation":"2578:1:15","nodeType":"VariableDeclaration","scope":2186,"src":"2570:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2173,"mutability":"mutable","name":"b","nameLocation":"2589:1:15","nodeType":"VariableDeclaration","scope":2186,"src":"2581:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:15"},"returnParameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2186,"src":"2615:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2175,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:15"},"scope":3035,"src":"2557:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2208,"nodeType":"Block","src":"2845:82:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2196,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"2900:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2197,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"2904:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"2910:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2201,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"2914:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2195,"id":2207,"nodeType":"Return","src":"2892:28:15"}]},"documentation":{"id":2187,"nodeType":"StructuredDocumentation","src":"2667:102:15","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2209,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:15","nodeType":"FunctionDefinition","parameters":{"id":2192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"a","nameLocation":"2799:1:15","nodeType":"VariableDeclaration","scope":2209,"src":"2791:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"b","nameLocation":"2810:1:15","nodeType":"VariableDeclaration","scope":2209,"src":"2802:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:15"},"returnParameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2209,"src":"2836:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:15"},"scope":3035,"src":"2774:153:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2242,"nodeType":"Block","src":"3219:260:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2219,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"3233:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2227,"nodeType":"IfStatement","src":"3229:127:15","trueBody":{"id":2226,"nodeType":"Block","src":"3241:115:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2222,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"3340:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2223,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"3344:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2218,"id":2225,"nodeType":"Return","src":"3333:12:15"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"3444:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"3458:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2236,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"3467:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:15","trueExpression":{"hexValue":"30","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2218,"id":2241,"nodeType":"Return","src":"3437:35:15"}]},"documentation":{"id":2210,"nodeType":"StructuredDocumentation","src":"2933:210:15","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2243,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:15","nodeType":"FunctionDefinition","parameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"a","nameLocation":"3173:1:15","nodeType":"VariableDeclaration","scope":2243,"src":"3165:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2214,"mutability":"mutable","name":"b","nameLocation":"3184:1:15","nodeType":"VariableDeclaration","scope":2243,"src":"3176:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:15"},"returnParameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2243,"src":"3210:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2216,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:15"},"scope":3035,"src":"3148:331:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2368,"nodeType":"Block","src":"3901:4018:15","statements":[{"id":2367,"nodeType":"UncheckedBlock","src":"3911:4002:15","statements":[{"assignments":[2256],"declarations":[{"constant":false,"id":2256,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:15","nodeType":"VariableDeclaration","scope":2367,"src":"4232:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2260,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4248:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2258,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"4252:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:15"},{"assignments":[2262],"declarations":[{"constant":false,"id":2262,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:15","nodeType":"VariableDeclaration","scope":2367,"src":"4312:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2261,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2263,"nodeType":"VariableDeclarationStatement","src":"4312:13:15"},{"AST":{"nativeSrc":"4392:122:15","nodeType":"YulBlock","src":"4392:122:15","statements":[{"nativeSrc":"4410:30:15","nodeType":"YulVariableDeclaration","src":"4410:30:15","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:15","nodeType":"YulIdentifier","src":"4427:1:15"},{"name":"y","nativeSrc":"4430:1:15","nodeType":"YulIdentifier","src":"4430:1:15"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:15","nodeType":"YulLiteral","src":"4437:1:15","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:15","nodeType":"YulIdentifier","src":"4433:3:15"},"nativeSrc":"4433:6:15","nodeType":"YulFunctionCall","src":"4433:6:15"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:15","nodeType":"YulIdentifier","src":"4420:6:15"},"nativeSrc":"4420:20:15","nodeType":"YulFunctionCall","src":"4420:20:15"},"variables":[{"name":"mm","nativeSrc":"4414:2:15","nodeType":"YulTypedName","src":"4414:2:15","type":""}]},{"nativeSrc":"4457:43:15","nodeType":"YulAssignment","src":"4457:43:15","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:15","nodeType":"YulIdentifier","src":"4474:2:15"},{"name":"prod0","nativeSrc":"4478:5:15","nodeType":"YulIdentifier","src":"4478:5:15"}],"functionName":{"name":"sub","nativeSrc":"4470:3:15","nodeType":"YulIdentifier","src":"4470:3:15"},"nativeSrc":"4470:14:15","nodeType":"YulFunctionCall","src":"4470:14:15"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:15","nodeType":"YulIdentifier","src":"4489:2:15"},{"name":"prod0","nativeSrc":"4493:5:15","nodeType":"YulIdentifier","src":"4493:5:15"}],"functionName":{"name":"lt","nativeSrc":"4486:2:15","nodeType":"YulIdentifier","src":"4486:2:15"},"nativeSrc":"4486:13:15","nodeType":"YulFunctionCall","src":"4486:13:15"}],"functionName":{"name":"sub","nativeSrc":"4466:3:15","nodeType":"YulIdentifier","src":"4466:3:15"},"nativeSrc":"4466:34:15","nodeType":"YulFunctionCall","src":"4466:34:15"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:15","nodeType":"YulIdentifier","src":"4457:5:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2256,"isOffset":false,"isSlot":false,"src":"4478:5:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"4493:5:15","valueSize":1},{"declaration":2262,"isOffset":false,"isSlot":false,"src":"4457:5:15","valueSize":1},{"declaration":2246,"isOffset":false,"isSlot":false,"src":"4427:1:15","valueSize":1},{"declaration":2248,"isOffset":false,"isSlot":false,"src":"4430:1:15","valueSize":1}],"id":2264,"nodeType":"InlineAssembly","src":"4383:131:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"4595:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2273,"nodeType":"IfStatement","src":"4591:368:15","trueBody":{"id":2272,"nodeType":"Block","src":"4607:352:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"4925:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2269,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"4933:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2254,"id":2271,"nodeType":"Return","src":"4918:26:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5065:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2275,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"5080:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"nodeType":"IfStatement","src":"5061:88:15","trueBody":{"id":2280,"nodeType":"Block","src":"5087:62:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2277,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"5112:20:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2279,"nodeType":"RevertStatement","src":"5105:29:15"}]}},{"assignments":[2283],"declarations":[{"constant":false,"id":2283,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:15","nodeType":"VariableDeclaration","scope":2367,"src":"5404:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2284,"nodeType":"VariableDeclarationStatement","src":"5404:17:15"},{"AST":{"nativeSrc":"5444:291:15","nodeType":"YulBlock","src":"5444:291:15","statements":[{"nativeSrc":"5513:38:15","nodeType":"YulAssignment","src":"5513:38:15","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:15","nodeType":"YulIdentifier","src":"5533:1:15"},{"name":"y","nativeSrc":"5536:1:15","nodeType":"YulIdentifier","src":"5536:1:15"},{"name":"denominator","nativeSrc":"5539:11:15","nodeType":"YulIdentifier","src":"5539:11:15"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:15","nodeType":"YulIdentifier","src":"5526:6:15"},"nativeSrc":"5526:25:15","nodeType":"YulFunctionCall","src":"5526:25:15"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:15","nodeType":"YulIdentifier","src":"5513:9:15"}]},{"nativeSrc":"5633:41:15","nodeType":"YulAssignment","src":"5633:41:15","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:15","nodeType":"YulIdentifier","src":"5646:5:15"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:15","nodeType":"YulIdentifier","src":"5656:9:15"},{"name":"prod0","nativeSrc":"5667:5:15","nodeType":"YulIdentifier","src":"5667:5:15"}],"functionName":{"name":"gt","nativeSrc":"5653:2:15","nodeType":"YulIdentifier","src":"5653:2:15"},"nativeSrc":"5653:20:15","nodeType":"YulFunctionCall","src":"5653:20:15"}],"functionName":{"name":"sub","nativeSrc":"5642:3:15","nodeType":"YulIdentifier","src":"5642:3:15"},"nativeSrc":"5642:32:15","nodeType":"YulFunctionCall","src":"5642:32:15"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:15","nodeType":"YulIdentifier","src":"5633:5:15"}]},{"nativeSrc":"5691:30:15","nodeType":"YulAssignment","src":"5691:30:15","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:15","nodeType":"YulIdentifier","src":"5704:5:15"},{"name":"remainder","nativeSrc":"5711:9:15","nodeType":"YulIdentifier","src":"5711:9:15"}],"functionName":{"name":"sub","nativeSrc":"5700:3:15","nodeType":"YulIdentifier","src":"5700:3:15"},"nativeSrc":"5700:21:15","nodeType":"YulFunctionCall","src":"5700:21:15"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:15","nodeType":"YulIdentifier","src":"5691:5:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2250,"isOffset":false,"isSlot":false,"src":"5539:11:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"5667:5:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"5691:5:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"5704:5:15","valueSize":1},{"declaration":2262,"isOffset":false,"isSlot":false,"src":"5633:5:15","valueSize":1},{"declaration":2262,"isOffset":false,"isSlot":false,"src":"5646:5:15","valueSize":1},{"declaration":2283,"isOffset":false,"isSlot":false,"src":"5513:9:15","valueSize":1},{"declaration":2283,"isOffset":false,"isSlot":false,"src":"5656:9:15","valueSize":1},{"declaration":2283,"isOffset":false,"isSlot":false,"src":"5711:9:15","valueSize":1},{"declaration":2246,"isOffset":false,"isSlot":false,"src":"5533:1:15","valueSize":1},{"declaration":2248,"isOffset":false,"isSlot":false,"src":"5536:1:15","valueSize":1}],"id":2285,"nodeType":"InlineAssembly","src":"5435:300:15"},{"assignments":[2287],"declarations":[{"constant":false,"id":2287,"mutability":"mutable","name":"twos","nameLocation":"5947:4:15","nodeType":"VariableDeclaration","scope":2367,"src":"5939:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2294,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2288,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5954:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2290,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5973:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:15"},{"AST":{"nativeSrc":"6008:362:15","nodeType":"YulBlock","src":"6008:362:15","statements":[{"nativeSrc":"6073:37:15","nodeType":"YulAssignment","src":"6073:37:15","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:15","nodeType":"YulIdentifier","src":"6092:11:15"},{"name":"twos","nativeSrc":"6105:4:15","nodeType":"YulIdentifier","src":"6105:4:15"}],"functionName":{"name":"div","nativeSrc":"6088:3:15","nodeType":"YulIdentifier","src":"6088:3:15"},"nativeSrc":"6088:22:15","nodeType":"YulFunctionCall","src":"6088:22:15"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:15","nodeType":"YulIdentifier","src":"6073:11:15"}]},{"nativeSrc":"6177:25:15","nodeType":"YulAssignment","src":"6177:25:15","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:15","nodeType":"YulIdentifier","src":"6190:5:15"},{"name":"twos","nativeSrc":"6197:4:15","nodeType":"YulIdentifier","src":"6197:4:15"}],"functionName":{"name":"div","nativeSrc":"6186:3:15","nodeType":"YulIdentifier","src":"6186:3:15"},"nativeSrc":"6186:16:15","nodeType":"YulFunctionCall","src":"6186:16:15"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:15","nodeType":"YulIdentifier","src":"6177:5:15"}]},{"nativeSrc":"6317:39:15","nodeType":"YulAssignment","src":"6317:39:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:15","nodeType":"YulLiteral","src":"6337:1:15","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:15","nodeType":"YulIdentifier","src":"6340:4:15"}],"functionName":{"name":"sub","nativeSrc":"6333:3:15","nodeType":"YulIdentifier","src":"6333:3:15"},"nativeSrc":"6333:12:15","nodeType":"YulFunctionCall","src":"6333:12:15"},{"name":"twos","nativeSrc":"6347:4:15","nodeType":"YulIdentifier","src":"6347:4:15"}],"functionName":{"name":"div","nativeSrc":"6329:3:15","nodeType":"YulIdentifier","src":"6329:3:15"},"nativeSrc":"6329:23:15","nodeType":"YulFunctionCall","src":"6329:23:15"},{"kind":"number","nativeSrc":"6354:1:15","nodeType":"YulLiteral","src":"6354:1:15","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:15","nodeType":"YulIdentifier","src":"6325:3:15"},"nativeSrc":"6325:31:15","nodeType":"YulFunctionCall","src":"6325:31:15"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:15","nodeType":"YulIdentifier","src":"6317:4:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2250,"isOffset":false,"isSlot":false,"src":"6073:11:15","valueSize":1},{"declaration":2250,"isOffset":false,"isSlot":false,"src":"6092:11:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"6177:5:15","valueSize":1},{"declaration":2256,"isOffset":false,"isSlot":false,"src":"6190:5:15","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"6105:4:15","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"6197:4:15","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"6317:4:15","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"6340:4:15","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"6347:4:15","valueSize":1}],"id":2295,"nodeType":"InlineAssembly","src":"5999:371:15"},{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2296,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"6436:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2297,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"6445:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2298,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6453:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"6436:21:15"},{"assignments":[2303],"declarations":[{"constant":false,"id":2303,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:15","nodeType":"VariableDeclaration","scope":2367,"src":"6775:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2302,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2310,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2305,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"6798:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:15"},{"expression":{"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2311,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7031:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7046:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2314,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7060:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2318,"nodeType":"ExpressionStatement","src":"7031:36:15"},{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2319,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7100:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2321,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7115:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2322,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7129:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"7100:36:15"},{"expression":{"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2327,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7170:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7185:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2330,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7199:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2334,"nodeType":"ExpressionStatement","src":"7170:36:15"},{"expression":{"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2335,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7240:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2337,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7255:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2338,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7269:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2342,"nodeType":"ExpressionStatement","src":"7240:36:15"},{"expression":{"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7310:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2345,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7325:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2346,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7339:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2350,"nodeType":"ExpressionStatement","src":"7310:36:15"},{"expression":{"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2351,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7381:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7396:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2354,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7410:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2358,"nodeType":"ExpressionStatement","src":"7381:36:15"},{"expression":{"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7851:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"7860:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2361,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"7868:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ExpressionStatement","src":"7851:24:15"},{"expression":{"id":2365,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7896:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2254,"id":2366,"nodeType":"Return","src":"7889:13:15"}]}]},"documentation":{"id":2244,"nodeType":"StructuredDocumentation","src":"3485:313:15","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2369,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:15","nodeType":"FunctionDefinition","parameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"x","nameLocation":"3827:1:15","nodeType":"VariableDeclaration","scope":2369,"src":"3819:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"y","nameLocation":"3838:1:15","nodeType":"VariableDeclaration","scope":2369,"src":"3830:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2250,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:15","nodeType":"VariableDeclaration","scope":2369,"src":"3841:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:15"},"returnParameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"result","nameLocation":"3893:6:15","nodeType":"VariableDeclaration","scope":2369,"src":"3885:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:15"},"scope":3035,"src":"3803:4116:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2411,"nodeType":"Block","src":"8161:192:15","statements":[{"assignments":[2385],"declarations":[{"constant":false,"id":2385,"mutability":"mutable","name":"result","nameLocation":"8179:6:15","nodeType":"VariableDeclaration","scope":2411,"src":"8171:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2391,"initialValue":{"arguments":[{"id":2387,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"8195:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2388,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"8198:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2389,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8201:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2386,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2369,2412],"referencedDeclaration":2369,"src":"8188:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2393,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"8244:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":2392,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"8227:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1992_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2396,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"8264:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2397,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"8267:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2398,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8270:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2395,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"8257:6:15","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2408,"nodeType":"IfStatement","src":"8223:101:15","trueBody":{"id":2407,"nodeType":"Block","src":"8288:36:15","statements":[{"expression":{"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2403,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"8302:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2406,"nodeType":"ExpressionStatement","src":"8302:11:15"}]}},{"expression":{"id":2409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"8340:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2383,"id":2410,"nodeType":"Return","src":"8333:13:15"}]},"documentation":{"id":2370,"nodeType":"StructuredDocumentation","src":"7925:121:15","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2412,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:15","nodeType":"FunctionDefinition","parameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"x","nameLocation":"8075:1:15","nodeType":"VariableDeclaration","scope":2412,"src":"8067:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2371,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"y","nameLocation":"8086:1:15","nodeType":"VariableDeclaration","scope":2412,"src":"8078:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2373,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:15","nodeType":"VariableDeclaration","scope":2412,"src":"8089:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2375,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2379,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:15","nodeType":"VariableDeclaration","scope":2412,"src":"8110:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":2378,"nodeType":"UserDefinedTypeName","pathNode":{"id":2377,"name":"Rounding","nameLocations":["8110:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"8110:8:15"},"referencedDeclaration":1992,"src":"8110:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:15"},"returnParameters":{"id":2383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"8152:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:15"},"scope":3035,"src":"8051:302:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2523,"nodeType":"Block","src":"8644:1585:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2420,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8658:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2426,"nodeType":"IfStatement","src":"8654:45:15","trueBody":{"id":2425,"nodeType":"Block","src":"8666:33:15","statements":[{"expression":{"hexValue":"30","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2419,"id":2424,"nodeType":"Return","src":"8680:8:15"}]}},{"assignments":[2428],"declarations":[{"constant":false,"id":2428,"mutability":"mutable","name":"result","nameLocation":"9386:6:15","nodeType":"VariableDeclaration","scope":2523,"src":"9378:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2437,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2431,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9406:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2430,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2691,2726],"referencedDeclaration":2691,"src":"9401:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2435,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:15"},{"id":2522,"nodeType":"UncheckedBlock","src":"9815:408:15","statements":[{"expression":{"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9839:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9849:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9858:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9862:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2448,"nodeType":"ExpressionStatement","src":"9839:35:15"},{"expression":{"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9888:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9898:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9907:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9911:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2455,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2459,"nodeType":"ExpressionStatement","src":"9888:35:15"},{"expression":{"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2460,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9937:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9947:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2462,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9956:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2463,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9960:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2466,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2470,"nodeType":"ExpressionStatement","src":"9937:35:15"},{"expression":{"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2471,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9986:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"9996:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2473,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"10005:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2474,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10009:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2481,"nodeType":"ExpressionStatement","src":"9986:35:15"},{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10035:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10045:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"10054:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2485,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10058:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"10035:35:15"},{"expression":{"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2493,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10084:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10094:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"10103:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2496,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10107:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2499,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2503,"nodeType":"ExpressionStatement","src":"10084:35:15"},{"expression":{"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2504,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10133:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2505,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10143:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"10152:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2507,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10156:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2514,"nodeType":"ExpressionStatement","src":"10133:35:15"},{"expression":{"arguments":[{"id":2516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10193:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"10201:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2518,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"10205:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2515,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"10189:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2419,"id":2521,"nodeType":"Return","src":"10182:30:15"}]}]},"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"8359:223:15","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2524,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:15","nodeType":"FunctionDefinition","parameters":{"id":2416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"a","nameLocation":"8609:1:15","nodeType":"VariableDeclaration","scope":2524,"src":"8601:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2414,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:15"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2524,"src":"8635:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:15"},"scope":3035,"src":"8587:1642:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2558,"nodeType":"Block","src":"10405:164:15","statements":[{"id":2557,"nodeType":"UncheckedBlock","src":"10415:148:15","statements":[{"assignments":[2536],"declarations":[{"constant":false,"id":2536,"mutability":"mutable","name":"result","nameLocation":"10447:6:15","nodeType":"VariableDeclaration","scope":2557,"src":"10439:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2540,"initialValue":{"arguments":[{"id":2538,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"10461:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2537,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2524,2559],"referencedDeclaration":2524,"src":"10456:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"10484:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2543,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"10511:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":2542,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"10494:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1992_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"10524:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"10533:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2548,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"10542:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:15","trueExpression":{"hexValue":"31","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2534,"id":2556,"nodeType":"Return","src":"10477:75:15"}]}]},"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"10235:89:15","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2559,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:15","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"a","nameLocation":"10351:1:15","nodeType":"VariableDeclaration","scope":2559,"src":"10343:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2530,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:15","nodeType":"VariableDeclaration","scope":2559,"src":"10354:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":2529,"nodeType":"UserDefinedTypeName","pathNode":{"id":2528,"name":"Rounding","nameLocations":["10354:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"10354:8:15"},"referencedDeclaration":1992,"src":"10354:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:15"},"returnParameters":{"id":2534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2559,"src":"10396:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:15"},"scope":3035,"src":"10329:240:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2690,"nodeType":"Block","src":"10760:922:15","statements":[{"assignments":[2568],"declarations":[{"constant":false,"id":2568,"mutability":"mutable","name":"result","nameLocation":"10778:6:15","nodeType":"VariableDeclaration","scope":2690,"src":"10770:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2570,"initialValue":{"hexValue":"30","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:15"},{"id":2687,"nodeType":"UncheckedBlock","src":"10798:855:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10826:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2585,"nodeType":"IfStatement","src":"10822:99:15","trueBody":{"id":2584,"nodeType":"Block","src":"10844:77:15","statements":[{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2576,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10862:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"10862:13:15"},{"expression":{"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"10893:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2583,"nodeType":"ExpressionStatement","src":"10893:13:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10938:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2600,"nodeType":"IfStatement","src":"10934:96:15","trueBody":{"id":2599,"nodeType":"Block","src":"10955:75:15","statements":[{"expression":{"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2591,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"10973:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2594,"nodeType":"ExpressionStatement","src":"10973:12:15"},{"expression":{"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11003:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2598,"nodeType":"ExpressionStatement","src":"11003:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11047:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2615,"nodeType":"IfStatement","src":"11043:96:15","trueBody":{"id":2614,"nodeType":"Block","src":"11064:75:15","statements":[{"expression":{"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11082:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2609,"nodeType":"ExpressionStatement","src":"11082:12:15"},{"expression":{"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11112:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2613,"nodeType":"ExpressionStatement","src":"11112:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11156:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2630,"nodeType":"IfStatement","src":"11152:96:15","trueBody":{"id":2629,"nodeType":"Block","src":"11173:75:15","statements":[{"expression":{"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11191:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2624,"nodeType":"ExpressionStatement","src":"11191:12:15"},{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2625,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11221:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2628,"nodeType":"ExpressionStatement","src":"11221:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11265:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2645,"nodeType":"IfStatement","src":"11261:93:15","trueBody":{"id":2644,"nodeType":"Block","src":"11281:73:15","statements":[{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11299:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"11299:11:15"},{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2640,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11328:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"11328:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11371:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2660,"nodeType":"IfStatement","src":"11367:93:15","trueBody":{"id":2659,"nodeType":"Block","src":"11387:73:15","statements":[{"expression":{"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11405:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2654,"nodeType":"ExpressionStatement","src":"11405:11:15"},{"expression":{"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2655,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11434:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2658,"nodeType":"ExpressionStatement","src":"11434:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11477:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2675,"nodeType":"IfStatement","src":"11473:93:15","trueBody":{"id":2674,"nodeType":"Block","src":"11493:73:15","statements":[{"expression":{"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11511:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2669,"nodeType":"ExpressionStatement","src":"11511:11:15"},{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11540:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"11540:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"11583:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2686,"nodeType":"IfStatement","src":"11579:64:15","trueBody":{"id":2685,"nodeType":"Block","src":"11599:44:15","statements":[{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11617:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2684,"nodeType":"ExpressionStatement","src":"11617:11:15"}]}}]},{"expression":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"11669:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2566,"id":2689,"nodeType":"Return","src":"11662:13:15"}]},"documentation":{"id":2560,"nodeType":"StructuredDocumentation","src":"10575:119:15","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2691,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:15","nodeType":"FunctionDefinition","parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"value","nameLocation":"10721:5:15","nodeType":"VariableDeclaration","scope":2691,"src":"10713:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:15"},"returnParameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2691,"src":"10751:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:15"},"scope":3035,"src":"10699:983:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2725,"nodeType":"Block","src":"11915:168:15","statements":[{"id":2724,"nodeType":"UncheckedBlock","src":"11925:152:15","statements":[{"assignments":[2703],"declarations":[{"constant":false,"id":2703,"mutability":"mutable","name":"result","nameLocation":"11957:6:15","nodeType":"VariableDeclaration","scope":2724,"src":"11949:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2702,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2707,"initialValue":{"arguments":[{"id":2705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"11971:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2704,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2691,2726],"referencedDeclaration":2691,"src":"11966:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"11998:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2710,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"12025:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":2709,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"12008:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1992_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"12043:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2715,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"12052:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:15","trueExpression":{"hexValue":"31","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2701,"id":2723,"nodeType":"Return","src":"11991:75:15"}]}]},"documentation":{"id":2692,"nodeType":"StructuredDocumentation","src":"11688:142:15","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2726,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:15","nodeType":"FunctionDefinition","parameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"value","nameLocation":"11857:5:15","nodeType":"VariableDeclaration","scope":2726,"src":"11849:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2697,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:15","nodeType":"VariableDeclaration","scope":2726,"src":"11864:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":2696,"nodeType":"UserDefinedTypeName","pathNode":{"id":2695,"name":"Rounding","nameLocations":["11864:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"11864:8:15"},"referencedDeclaration":1992,"src":"11864:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:15"},"returnParameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2726,"src":"11906:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2699,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:15"},"scope":3035,"src":"11835:248:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2854,"nodeType":"Block","src":"12276:854:15","statements":[{"assignments":[2735],"declarations":[{"constant":false,"id":2735,"mutability":"mutable","name":"result","nameLocation":"12294:6:15","nodeType":"VariableDeclaration","scope":2854,"src":"12286:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2734,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2737,"initialValue":{"hexValue":"30","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:15"},{"id":2851,"nodeType":"UncheckedBlock","src":"12314:787:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12342:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2754,"nodeType":"IfStatement","src":"12338:103:15","trueBody":{"id":2753,"nodeType":"Block","src":"12361:80:15","statements":[{"expression":{"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12379:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2748,"nodeType":"ExpressionStatement","src":"12379:17:15"},{"expression":{"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2749,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12414:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2752,"nodeType":"ExpressionStatement","src":"12414:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12458:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2771,"nodeType":"IfStatement","src":"12454:103:15","trueBody":{"id":2770,"nodeType":"Block","src":"12477:80:15","statements":[{"expression":{"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12495:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2765,"nodeType":"ExpressionStatement","src":"12495:17:15"},{"expression":{"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12530:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2769,"nodeType":"ExpressionStatement","src":"12530:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12574:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2788,"nodeType":"IfStatement","src":"12570:103:15","trueBody":{"id":2787,"nodeType":"Block","src":"12593:80:15","statements":[{"expression":{"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12611:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2782,"nodeType":"ExpressionStatement","src":"12611:17:15"},{"expression":{"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12646:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2786,"nodeType":"ExpressionStatement","src":"12646:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12690:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2805,"nodeType":"IfStatement","src":"12686:100:15","trueBody":{"id":2804,"nodeType":"Block","src":"12708:78:15","statements":[{"expression":{"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2794,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12726:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2799,"nodeType":"ExpressionStatement","src":"12726:16:15"},{"expression":{"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12760:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2803,"nodeType":"ExpressionStatement","src":"12760:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12803:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2822,"nodeType":"IfStatement","src":"12799:100:15","trueBody":{"id":2821,"nodeType":"Block","src":"12821:78:15","statements":[{"expression":{"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12839:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2816,"nodeType":"ExpressionStatement","src":"12839:16:15"},{"expression":{"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2817,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12873:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2820,"nodeType":"ExpressionStatement","src":"12873:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12916:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2839,"nodeType":"IfStatement","src":"12912:100:15","trueBody":{"id":2838,"nodeType":"Block","src":"12934:78:15","statements":[{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"12952:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2833,"nodeType":"ExpressionStatement","src":"12952:16:15"},{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"12986:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"12986:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"13029:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2850,"nodeType":"IfStatement","src":"13025:66:15","trueBody":{"id":2849,"nodeType":"Block","src":"13047:44:15","statements":[{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13065:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ExpressionStatement","src":"13065:11:15"}]}}]},{"expression":{"id":2852,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"13117:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2733,"id":2853,"nodeType":"Return","src":"13110:13:15"}]},"documentation":{"id":2727,"nodeType":"StructuredDocumentation","src":"12089:120:15","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2855,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:15","nodeType":"FunctionDefinition","parameters":{"id":2730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2729,"mutability":"mutable","name":"value","nameLocation":"12237:5:15","nodeType":"VariableDeclaration","scope":2855,"src":"12229:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:15"},"returnParameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"12267:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:15"},"scope":3035,"src":"12214:916:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2889,"nodeType":"Block","src":"13365:170:15","statements":[{"id":2888,"nodeType":"UncheckedBlock","src":"13375:154:15","statements":[{"assignments":[2867],"declarations":[{"constant":false,"id":2867,"mutability":"mutable","name":"result","nameLocation":"13407:6:15","nodeType":"VariableDeclaration","scope":2888,"src":"13399:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2871,"initialValue":{"arguments":[{"id":2869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"13422:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2868,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2855,2890],"referencedDeclaration":2855,"src":"13416:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"13449:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2874,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"13476:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":2873,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"13459:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1992_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"13495:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"13504:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:15","trueExpression":{"hexValue":"31","id":2882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2865,"id":2887,"nodeType":"Return","src":"13442:76:15"}]}]},"documentation":{"id":2856,"nodeType":"StructuredDocumentation","src":"13136:143:15","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2890,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:15","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"value","nameLocation":"13307:5:15","nodeType":"VariableDeclaration","scope":2890,"src":"13299:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:15","nodeType":"VariableDeclaration","scope":2890,"src":"13314:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":2860,"nodeType":"UserDefinedTypeName","pathNode":{"id":2859,"name":"Rounding","nameLocations":["13314:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"13314:8:15"},"referencedDeclaration":1992,"src":"13314:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:15"},"returnParameters":{"id":2865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2890,"src":"13356:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2863,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:15"},"scope":3035,"src":"13284:251:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2976,"nodeType":"Block","src":"13855:600:15","statements":[{"assignments":[2899],"declarations":[{"constant":false,"id":2899,"mutability":"mutable","name":"result","nameLocation":"13873:6:15","nodeType":"VariableDeclaration","scope":2976,"src":"13865:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2901,"initialValue":{"hexValue":"30","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:15"},{"id":2973,"nodeType":"UncheckedBlock","src":"13893:533:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"13921:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2916,"nodeType":"IfStatement","src":"13917:98:15","trueBody":{"id":2915,"nodeType":"Block","src":"13939:76:15","statements":[{"expression":{"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"13957:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2910,"nodeType":"ExpressionStatement","src":"13957:13:15"},{"expression":{"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"13988:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2914,"nodeType":"ExpressionStatement","src":"13988:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14032:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2931,"nodeType":"IfStatement","src":"14028:95:15","trueBody":{"id":2930,"nodeType":"Block","src":"14049:74:15","statements":[{"expression":{"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14067:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2925,"nodeType":"ExpressionStatement","src":"14067:12:15"},{"expression":{"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"14097:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2929,"nodeType":"ExpressionStatement","src":"14097:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14140:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2946,"nodeType":"IfStatement","src":"14136:95:15","trueBody":{"id":2945,"nodeType":"Block","src":"14157:74:15","statements":[{"expression":{"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14175:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2940,"nodeType":"ExpressionStatement","src":"14175:12:15"},{"expression":{"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"14205:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2944,"nodeType":"ExpressionStatement","src":"14205:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14248:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2961,"nodeType":"IfStatement","src":"14244:95:15","trueBody":{"id":2960,"nodeType":"Block","src":"14265:74:15","statements":[{"expression":{"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14283:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2955,"nodeType":"ExpressionStatement","src":"14283:12:15"},{"expression":{"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2956,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"14313:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ExpressionStatement","src":"14313:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14356:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2972,"nodeType":"IfStatement","src":"14352:64:15","trueBody":{"id":2971,"nodeType":"Block","src":"14372:44:15","statements":[{"expression":{"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"14390:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2970,"nodeType":"ExpressionStatement","src":"14390:11:15"}]}}]},{"expression":{"id":2974,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"14442:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2897,"id":2975,"nodeType":"Return","src":"14435:13:15"}]},"documentation":{"id":2891,"nodeType":"StructuredDocumentation","src":"13541:246:15","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2977,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:15","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"value","nameLocation":"13816:5:15","nodeType":"VariableDeclaration","scope":2977,"src":"13808:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:15"},"returnParameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2977,"src":"13846:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:15"},"scope":3035,"src":"13792:663:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3014,"nodeType":"Block","src":"14692:177:15","statements":[{"id":3013,"nodeType":"UncheckedBlock","src":"14702:161:15","statements":[{"assignments":[2989],"declarations":[{"constant":false,"id":2989,"mutability":"mutable","name":"result","nameLocation":"14734:6:15","nodeType":"VariableDeclaration","scope":3013,"src":"14726:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2993,"initialValue":{"arguments":[{"id":2991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"14750:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2990,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2977,3015],"referencedDeclaration":2977,"src":"14743:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"14777:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2996,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"14804:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":2995,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"14787:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1992_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"14823:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3002,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"14838:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:15","trueExpression":{"hexValue":"31","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3010,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2987,"id":3012,"nodeType":"Return","src":"14770:82:15"}]}]},"documentation":{"id":2978,"nodeType":"StructuredDocumentation","src":"14461:144:15","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3015,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:15","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"value","nameLocation":"14634:5:15","nodeType":"VariableDeclaration","scope":3015,"src":"14626:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2983,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:15","nodeType":"VariableDeclaration","scope":3015,"src":"14641:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":2982,"nodeType":"UserDefinedTypeName","pathNode":{"id":2981,"name":"Rounding","nameLocations":["14641:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"14641:8:15"},"referencedDeclaration":1992,"src":"14641:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:15"},"returnParameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3015,"src":"14683:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:15"},"scope":3035,"src":"14610:259:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"15067:48:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3026,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"15090:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}],"id":3025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3024,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:15","typeDescriptions":{}}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3023,"id":3032,"nodeType":"Return","src":"15077:31:15"}]},"documentation":{"id":3016,"nodeType":"StructuredDocumentation","src":"14875:113:15","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:15","nodeType":"FunctionDefinition","parameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:15","nodeType":"VariableDeclaration","scope":3034,"src":"15019:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"},"typeName":{"id":3018,"nodeType":"UserDefinedTypeName","pathNode":{"id":3017,"name":"Rounding","nameLocations":["15019:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1992,"src":"15019:8:15"},"referencedDeclaration":1992,"src":"15019:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1992","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:15"},"returnParameters":{"id":3023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3034,"src":"15061:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3021,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:15"},"scope":3035,"src":"14993:122:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3036,"src":"203:14914:15","usedErrors":[1987],"usedEvents":[]}],"src":"103:15015:15"},"id":15},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3140]},"id":3141,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3037,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"135:80:16","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3140,"linearizedBaseContracts":[3140],"name":"SignedMath","nameLocation":"224:10:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":3055,"nodeType":"Block","src":"376:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3048,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"393:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3049,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"397:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3052,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"405:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:16","trueExpression":{"id":3051,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"401:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3047,"id":3054,"nodeType":"Return","src":"386:20:16"}]},"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"241:66:16","text":" @dev Returns the largest of two signed numbers."},"id":3056,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:16","nodeType":"FunctionDefinition","parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"a","nameLocation":"332:1:16","nodeType":"VariableDeclaration","scope":3056,"src":"325:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3040,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3043,"mutability":"mutable","name":"b","nameLocation":"342:1:16","nodeType":"VariableDeclaration","scope":3056,"src":"335:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3042,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:16"},"returnParameters":{"id":3047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3056,"src":"368:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3045,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:16"},"scope":3140,"src":"312:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3073,"nodeType":"Block","src":"555:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"572:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3067,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"576:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3070,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"584:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:16","trueExpression":{"id":3069,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"580:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3065,"id":3072,"nodeType":"Return","src":"565:20:16"}]},"documentation":{"id":3057,"nodeType":"StructuredDocumentation","src":"419:67:16","text":" @dev Returns the smallest of two signed numbers."},"id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:16","nodeType":"FunctionDefinition","parameters":{"id":3062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3059,"mutability":"mutable","name":"a","nameLocation":"511:1:16","nodeType":"VariableDeclaration","scope":3074,"src":"504:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3058,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3061,"mutability":"mutable","name":"b","nameLocation":"521:1:16","nodeType":"VariableDeclaration","scope":3074,"src":"514:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3060,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:16"},"returnParameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3074,"src":"547:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3063,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:16"},"scope":3140,"src":"491:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3117,"nodeType":"Block","src":"797:162:16","statements":[{"assignments":[3085],"declarations":[{"constant":false,"id":3085,"mutability":"mutable","name":"x","nameLocation":"866:1:16","nodeType":"VariableDeclaration","scope":3117,"src":"859:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3084,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3098,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3086,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"871:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3087,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"875:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3089,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3090,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"882:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3091,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"886:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3096,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:16"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3099,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"911:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3104,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"931:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3102,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:16","typeDescriptions":{}}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3100,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:16","typeDescriptions":{}}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3109,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"945:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3110,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"949:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3112,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3114,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3083,"id":3116,"nodeType":"Return","src":"904:48:16"}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"598:126:16","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3118,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:16","nodeType":"FunctionDefinition","parameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"a","nameLocation":"753:1:16","nodeType":"VariableDeclaration","scope":3118,"src":"746:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3076,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3079,"mutability":"mutable","name":"b","nameLocation":"763:1:16","nodeType":"VariableDeclaration","scope":3118,"src":"756:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3078,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:16"},"returnParameters":{"id":3083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3118,"src":"789:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3081,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:16"},"scope":3140,"src":"729:230:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3138,"nodeType":"Block","src":"1103:158:16","statements":[{"id":3137,"nodeType":"UncheckedBlock","src":"1113:142:16","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"1228:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:16","subExpression":{"id":3132,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"1242:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:16","trueExpression":{"id":3131,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"1237:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:16","typeDescriptions":{}}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3125,"id":3136,"nodeType":"Return","src":"1213:31:16"}]}]},"documentation":{"id":3119,"nodeType":"StructuredDocumentation","src":"965:78:16","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3139,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:16","nodeType":"FunctionDefinition","parameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"n","nameLocation":"1068:1:16","nodeType":"VariableDeclaration","scope":3139,"src":"1061:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3120,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:16"},"returnParameters":{"id":3125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3139,"src":"1094:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:16"},"scope":3140,"src":"1048:213:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3141,"src":"216:1047:16","usedErrors":[],"usedEvents":[]}],"src":"109:1155:16"},"id":16},"contracts/Content.sol":{"ast":{"absolutePath":"contracts/Content.sol","exportedSymbols":{"AggregatorV3Interface":[45],"Content":[3373],"IERC165":[1981],"IERC721":[1488],"PriceConvertor":[3664]},"id":3374,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3142,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"31:24:17"},{"absolutePath":"contracts/PriceConvertor.sol","file":"./PriceConvertor.sol","id":3144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3374,"sourceUnit":3665,"src":"57:52:17","symbolAliases":[{"foreign":{"id":3143,"name":"PriceConvertor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"65:14:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","file":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","id":3146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3374,"sourceUnit":46,"src":"110:112:17","symbolAliases":[{"foreign":{"id":3145,"name":"AggregatorV3Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"118:21:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":3147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3374,"sourceUnit":1489,"src":"223:58:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Content","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3373,"linearizedBaseContracts":[3373],"name":"Content","nameLocation":"292:7:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"d56d229d","id":3150,"mutability":"mutable","name":"nftContract","nameLocation":"444:11:17","nodeType":"VariableDeclaration","scope":3373,"src":"429:26:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"},"typeName":{"id":3149,"nodeType":"UserDefinedTypeName","pathNode":{"id":3148,"name":"IERC721","nameLocations":["429:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":1488,"src":"429:7:17"},"referencedDeclaration":1488,"src":"429:7:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"visibility":"public"},{"global":false,"id":3153,"libraryName":{"id":3151,"name":"PriceConvertor","nameLocations":["468:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":3664,"src":"468:14:17"},"nodeType":"UsingForDirective","src":"462:33:17","typeName":{"id":3152,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"errorSelector":"8209ab4f","id":3155,"name":"Content__PriceMustNotBeZero","nameLocation":"520:27:17","nodeType":"ErrorDefinition","parameters":{"id":3154,"nodeType":"ParameterList","parameters":[],"src":"547:2:17"},"src":"514:36:17"},{"errorSelector":"ab09bb14","id":3157,"name":"Content__ContentAlreadyPurchased","nameLocation":"561:32:17","nodeType":"ErrorDefinition","parameters":{"id":3156,"nodeType":"ParameterList","parameters":[],"src":"593:2:17"},"src":"555:41:17"},{"errorSelector":"312585c9","id":3159,"name":"Content__TransactionFailed","nameLocation":"607:26:17","nodeType":"ErrorDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[],"src":"633:2:17"},"src":"601:35:17"},{"errorSelector":"fb772295","id":3161,"name":"Content__ContentPurchaseError","nameLocation":"647:29:17","nodeType":"ErrorDefinition","parameters":{"id":3160,"nodeType":"ParameterList","parameters":[],"src":"676:2:17"},"src":"641:38:17"},{"errorSelector":"6c8b88df","id":3163,"name":"Content__ContentIdDoesNotExist","nameLocation":"690:30:17","nodeType":"ErrorDefinition","parameters":{"id":3162,"nodeType":"ParameterList","parameters":[],"src":"720:2:17"},"src":"684:39:17"},{"anonymous":false,"eventSelector":"51991dac21fa3f9c470153885bded81e15400ea0307d507104bd32152aea9658","id":3169,"name":"ContentPriceSet","nameLocation":"748:15:17","nodeType":"EventDefinition","parameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3165,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"780:5:17","nodeType":"VariableDeclaration","scope":3169,"src":"764:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3167,"indexed":true,"mutability":"mutable","name":"price","nameLocation":"802:5:17","nodeType":"VariableDeclaration","scope":3169,"src":"786:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"763:45:17"},"src":"742:67:17"},{"constant":false,"functionSelector":"810b8145","id":3175,"mutability":"mutable","name":"addressToContentToPrice","nameLocation":"870:23:17","nodeType":"VariableDeclaration","scope":3373,"src":"815:78:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":3174,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3170,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"815:47:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3173,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"834:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"functionSelector":"53a6b941","id":3179,"mutability":"mutable","name":"contentPurchased","nameLocation":"931:16:17","nodeType":"VariableDeclaration","scope":3373,"src":"899:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3178,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3176,"name":"address","nodeType":"ElementaryTypeName","src":"907:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"899:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3177,"name":"bool","nodeType":"ElementaryTypeName","src":"918:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"80c7d5e1","id":3183,"mutability":"mutable","name":"addressToContent","nameLocation":"988:16:17","nodeType":"VariableDeclaration","scope":3373,"src":"953:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3182,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3180,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"953:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"972:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"id":3186,"mutability":"mutable","name":"s_priceFeed","nameLocation":"1046:11:17","nodeType":"VariableDeclaration","scope":3373,"src":"1016:41:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"},"typeName":{"id":3185,"nodeType":"UserDefinedTypeName","pathNode":{"id":3184,"name":"AggregatorV3Interface","nameLocations":["1016:21:17"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1016:21:17"},"referencedDeclaration":45,"src":"1016:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"visibility":"private"},{"body":{"id":3205,"nodeType":"Block","src":"1121:114:17","statements":[{"expression":{"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3193,"name":"s_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"1131:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3195,"name":"priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"1167:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3194,"name":"AggregatorV3Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"1145:21:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AggregatorV3Interface_$45_$","typeString":"type(contract AggregatorV3Interface)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1145:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"src":"1131:46:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"id":3198,"nodeType":"ExpressionStatement","src":"1131:46:17"},{"expression":{"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3199,"name":"nftContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"1187:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3201,"name":"nftContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"1209:18:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3200,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"1201:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1201:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"src":"1187:41:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"id":3204,"nodeType":"ExpressionStatement","src":"1187:41:17"}]},"id":3206,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"priceFeed","nameLocation":"1084:9:17","nodeType":"VariableDeclaration","scope":3206,"src":"1076:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3187,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"nftContractAddress","nameLocation":"1102:18:17","nodeType":"VariableDeclaration","scope":3206,"src":"1094:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3189,"name":"address","nodeType":"ElementaryTypeName","src":"1094:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:46:17"},"returnParameters":{"id":3192,"nodeType":"ParameterList","parameters":[],"src":"1121:0:17"},"scope":3373,"src":"1064:171:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3246,"nodeType":"Block","src":"1306:286:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"1319:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1328:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1319:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3220,"nodeType":"IfStatement","src":"1316:75:17","trueBody":{"id":3219,"nodeType":"Block","src":"1330:61:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3216,"name":"Content__PriceMustNotBeZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"1351:27:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1351:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3218,"nodeType":"RevertStatement","src":"1344:36:17"}]}},{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3221,"name":"addressToContentToPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"1400:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3225,"indexExpression":{"expression":{"id":3222,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1424:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1428:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1424:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1400:35:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3226,"indexExpression":{"id":3224,"name":"content_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"1436:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1400:47:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3229,"name":"s_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"1474:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}],"expression":{"id":3227,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"1450:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1456:17:17","memberName":"getConversionRate","nodeType":"MemberAccess","referencedDeclaration":3651,"src":"1450:23:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_contract$_AggregatorV3Interface_$45_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,contract AggregatorV3Interface) view returns (uint256)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1450:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1400:86:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3232,"nodeType":"ExpressionStatement","src":"1400:86:17"},{"expression":{"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3233,"name":"addressToContent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"1496:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3236,"indexExpression":{"expression":{"id":3234,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1513:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1517:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1513:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1496:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3237,"name":"content_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"1527:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1496:41:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3239,"nodeType":"ExpressionStatement","src":"1496:41:17"},{"eventCall":{"arguments":[{"expression":{"id":3241,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1568:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1572:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1568:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3243,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"1579:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3240,"name":"ContentPriceSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"1552:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1552:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3245,"nodeType":"EmitStatement","src":"1547:38:17"}]},"functionSelector":"779f7707","id":3247,"implemented":true,"kind":"function","modifiers":[],"name":"setContentPrice","nameLocation":"1250:15:17","nodeType":"FunctionDefinition","parameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"content_id","nameLocation":"1274:10:17","nodeType":"VariableDeclaration","scope":3247,"src":"1266:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1266:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3210,"mutability":"mutable","name":"price","nameLocation":"1293:5:17","nodeType":"VariableDeclaration","scope":3247,"src":"1285:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1265:34:17"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[],"src":"1306:0:17"},"scope":3373,"src":"1241:351:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3319,"nodeType":"Block","src":"1666:722:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3256,"name":"content_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"1735:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3254,"name":"nftContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"1715:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1727:7:17","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"1715:19:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1715:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3258,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"1750:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1715:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3264,"nodeType":"IfStatement","src":"1712:107:17","trueBody":{"id":3263,"nodeType":"Block","src":"1756:63:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3260,"name":"Content__ContentIdDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"1776:30:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1776:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3262,"nodeType":"RevertStatement","src":"1769:39:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3265,"name":"contentPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"1883:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3268,"indexExpression":{"expression":{"id":3266,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1900:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1904:6:17","memberName":"sender","nodeType":"MemberAccess","src":"1900:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1883:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1915:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1883:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3275,"nodeType":"IfStatement","src":"1880:106:17","trueBody":{"id":3274,"nodeType":"Block","src":"1920:66:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3271,"name":"Content__ContentAlreadyPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"1941:32:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3273,"nodeType":"RevertStatement","src":"1934:41:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3279,"name":"s_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"2026:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}],"expression":{"expression":{"id":3276,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1998:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2002:5:17","memberName":"value","nodeType":"MemberAccess","src":"1998:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2008:17:17","memberName":"getConversionRate","nodeType":"MemberAccess","referencedDeclaration":3651,"src":"1998:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_contract$_AggregatorV3Interface_$45_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,contract AggregatorV3Interface) view returns (uint256)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1998:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"baseExpression":{"id":3281,"name":"addressToContentToPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"2042:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3283,"indexExpression":{"id":3282,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2066:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2042:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3285,"indexExpression":{"id":3284,"name":"content_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"2073:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2042:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1998:86:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3315,"name":"Content__ContentPurchaseError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"2350:29:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2350:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3317,"nodeType":"RevertStatement","src":"2343:38:17"},"id":3318,"nodeType":"IfStatement","src":"1995:386:17","trueBody":{"id":3314,"nodeType":"Block","src":"2085:244:17","statements":[{"expression":{"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3287,"name":"contentPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2099:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3290,"indexExpression":{"expression":{"id":3288,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2116:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2120:6:17","memberName":"sender","nodeType":"MemberAccess","src":"2116:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2099:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2130:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2099:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3293,"nodeType":"ExpressionStatement","src":"2099:35:17"},{"assignments":[3295,null],"declarations":[{"constant":false,"id":3295,"mutability":"mutable","name":"success","nameLocation":"2154:7:17","nodeType":"VariableDeclaration","scope":3314,"src":"2149:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3294,"name":"bool","nodeType":"ElementaryTypeName","src":"2149:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3306,"initialValue":{"arguments":[{"hexValue":"","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2227:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3296,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2166:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2172:4:17","memberName":"call","nodeType":"MemberAccess","src":"2166:10:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"arguments":[{"id":3301,"name":"s_priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"2213:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}],"expression":{"expression":{"id":3298,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2185:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2189:5:17","memberName":"value","nodeType":"MemberAccess","src":"2185:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2195:17:17","memberName":"getConversionRate","nodeType":"MemberAccess","referencedDeclaration":3651,"src":"2185:27:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_contract$_AggregatorV3Interface_$45_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,contract AggregatorV3Interface) view returns (uint256)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2185:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2166:60:17","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2166:64:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2148:82:17"},{"condition":{"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2246:8:17","subExpression":{"id":3307,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3295,"src":"2247:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3313,"nodeType":"IfStatement","src":"2243:75:17","trueBody":{"id":3312,"nodeType":"Block","src":"2255:63:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3309,"name":"Content__TransactionFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"2276:26:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2276:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3311,"nodeType":"RevertStatement","src":"2269:35:17"}]}}]}}]},"functionSelector":"1a8398d4","id":3320,"implemented":true,"kind":"function","modifiers":[],"name":"buyContent","nameLocation":"1607:10:17","nodeType":"FunctionDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"owner","nameLocation":"1626:5:17","nodeType":"VariableDeclaration","scope":3320,"src":"1618:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3248,"name":"address","nodeType":"ElementaryTypeName","src":"1618:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3251,"mutability":"mutable","name":"content_id","nameLocation":"1640:10:17","nodeType":"VariableDeclaration","scope":3320,"src":"1632:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1632:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1617:34:17"},"returnParameters":{"id":3253,"nodeType":"ParameterList","parameters":[],"src":"1666:0:17"},"scope":3373,"src":"1598:790:17","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3331,"nodeType":"Block","src":"2456:60:17","statements":[{"expression":{"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"nftContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"2467:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3327,"name":"_nftContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"2489:19:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3326,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"2481:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1488_$","typeString":"type(contract IERC721)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2481:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"src":"2467:42:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1488","typeString":"contract IERC721"}},"id":3330,"nodeType":"ExpressionStatement","src":"2467:42:17"}]},"functionSelector":"52f5ad77","id":3332,"implemented":true,"kind":"function","modifiers":[],"name":"setNftContract","nameLocation":"2403:14:17","nodeType":"FunctionDefinition","parameters":{"id":3323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3322,"mutability":"mutable","name":"_nftContractAddress","nameLocation":"2426:19:17","nodeType":"VariableDeclaration","scope":3332,"src":"2418:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3321,"name":"address","nodeType":"ElementaryTypeName","src":"2418:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2417:29:17"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[],"src":"2456:0:17"},"scope":3373,"src":"2394:122:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3347,"nodeType":"Block","src":"2633:66:17","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3341,"name":"addressToContentToPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"2650:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3343,"indexExpression":{"id":3342,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"2674:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2650:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3345,"indexExpression":{"id":3344,"name":"content_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"2681:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2650:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3340,"id":3346,"nodeType":"Return","src":"2643:49:17"}]},"functionSelector":"55eef303","id":3348,"implemented":true,"kind":"function","modifiers":[],"name":"getContentPrice","nameLocation":"2555:15:17","nodeType":"FunctionDefinition","parameters":{"id":3337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3334,"mutability":"mutable","name":"owner","nameLocation":"2579:5:17","nodeType":"VariableDeclaration","scope":3348,"src":"2571:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3333,"name":"address","nodeType":"ElementaryTypeName","src":"2571:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3336,"mutability":"mutable","name":"content_id","nameLocation":"2593:10:17","nodeType":"VariableDeclaration","scope":3348,"src":"2585:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2585:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2570:34:17"},"returnParameters":{"id":3340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3348,"src":"2625:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3338,"name":"uint256","nodeType":"ElementaryTypeName","src":"2625:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2624:9:17"},"scope":3373,"src":"2546:153:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3359,"nodeType":"Block","src":"2771:46:17","statements":[{"expression":{"baseExpression":{"id":3355,"name":"contentPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2788:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3357,"indexExpression":{"id":3356,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"2805:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2788:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3354,"id":3358,"nodeType":"Return","src":"2781:29:17"}]},"functionSelector":"df82498c","id":3360,"implemented":true,"kind":"function","modifiers":[],"name":"getContentAccess","nameLocation":"2714:16:17","nodeType":"FunctionDefinition","parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3350,"mutability":"mutable","name":"user","nameLocation":"2739:4:17","nodeType":"VariableDeclaration","scope":3360,"src":"2731:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3349,"name":"address","nodeType":"ElementaryTypeName","src":"2731:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2730:14:17"},"returnParameters":{"id":3354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3360,"src":"2766:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3352,"name":"bool","nodeType":"ElementaryTypeName","src":"2766:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2765:6:17"},"scope":3373,"src":"2705:112:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3371,"nodeType":"Block","src":"2888:46:17","statements":[{"expression":{"baseExpression":{"id":3367,"name":"addressToContent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"2905:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3369,"indexExpression":{"id":3368,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"2922:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2905:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3366,"id":3370,"nodeType":"Return","src":"2898:29:17"}]},"functionSelector":"d9af03ef","id":3372,"implemented":true,"kind":"function","modifiers":[],"name":"getContentId","nameLocation":"2832:12:17","nodeType":"FunctionDefinition","parameters":{"id":3363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3362,"mutability":"mutable","name":"user","nameLocation":"2853:4:17","nodeType":"VariableDeclaration","scope":3372,"src":"2845:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3361,"name":"address","nodeType":"ElementaryTypeName","src":"2845:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2844:14:17"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3372,"src":"2880:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"2880:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2879:9:17"},"scope":3373,"src":"2823:111:17","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3374,"src":"283:2653:17","usedErrors":[3155,3157,3159,3161,3163],"usedEvents":[3169]}],"src":"31:2905:17"},"id":17},"contracts/NFT.sol":{"ast":{"absolutePath":"contracts/NFT.sol","exportedSymbols":{"Content":[3373],"ERC721":[1371],"ERC721URIStorage":[1632],"Nft":[3597],"Ownable":[193]},"id":3598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3375,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"31:24:18"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":3378,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3598,"sourceUnit":1633,"src":"177:109:18","symbolAliases":[{"foreign":{"id":3376,"name":"ERC721URIStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"185:16:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3377,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"202:6:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3598,"sourceUnit":194,"src":"287:67:18","symbolAliases":[{"foreign":{"id":3379,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"295:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/Content.sol","file":"./Content.sol","id":3382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3598,"sourceUnit":3374,"src":"355:38:18","symbolAliases":[{"foreign":{"id":3381,"name":"Content","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"363:7:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3383,"name":"ERC721URIStorage","nameLocations":["411:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1632,"src":"411:16:18"},"id":3384,"nodeType":"InheritanceSpecifier","src":"411:16:18"},{"baseName":{"id":3385,"name":"Ownable","nameLocations":["428:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":193,"src":"428:7:18"},"id":3386,"nodeType":"InheritanceSpecifier","src":"428:7:18"}],"canonicalName":"Nft","contractDependencies":[3373],"contractKind":"contract","fullyImplemented":true,"id":3597,"linearizedBaseContracts":[3597,193,1632,1371,315,1660,221,1488,1969,1981,1690],"name":"Nft","nameLocation":"404:3:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2cb7d92f","id":3389,"mutability":"mutable","name":"contentContract","nameLocation":"461:15:18","nodeType":"VariableDeclaration","scope":3597,"src":"446:30:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"},"typeName":{"id":3388,"nodeType":"UserDefinedTypeName","pathNode":{"id":3387,"name":"Content","nameLocations":["446:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3373,"src":"446:7:18"},"referencedDeclaration":3373,"src":"446:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}},"visibility":"public"},{"canonicalName":"Nft.NftData","id":3400,"members":[{"constant":false,"id":3391,"mutability":"mutable","name":"tokenId","nameLocation":"546:7:18","nodeType":"VariableDeclaration","scope":3400,"src":"538:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3390,"name":"uint256","nodeType":"ElementaryTypeName","src":"538:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"name","nameLocation":"570:4:18","nodeType":"VariableDeclaration","scope":3400,"src":"563:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3392,"name":"string","nodeType":"ElementaryTypeName","src":"563:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3395,"mutability":"mutable","name":"description","nameLocation":"591:11:18","nodeType":"VariableDeclaration","scope":3400,"src":"584:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3394,"name":"string","nodeType":"ElementaryTypeName","src":"584:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3397,"mutability":"mutable","name":"image","nameLocation":"619:5:18","nodeType":"VariableDeclaration","scope":3400,"src":"612:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3396,"name":"string","nodeType":"ElementaryTypeName","src":"612:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3399,"mutability":"mutable","name":"creator","nameLocation":"642:7:18","nodeType":"VariableDeclaration","scope":3400,"src":"634:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3398,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"NftData","nameLocation":"520:7:18","nodeType":"StructDefinition","scope":3597,"src":"513:143:18","visibility":"public"},{"constant":false,"functionSelector":"8684e124","id":3404,"mutability":"mutable","name":"nftFeed","nameLocation":"679:7:18","nodeType":"VariableDeclaration","scope":3597,"src":"662:24:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_storage_$dyn_storage","typeString":"struct Nft.NftData[]"},"typeName":{"baseType":{"id":3402,"nodeType":"UserDefinedTypeName","pathNode":{"id":3401,"name":"NftData","nameLocations":["662:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3400,"src":"662:7:18"},"referencedDeclaration":3400,"src":"662:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_storage_ptr","typeString":"struct Nft.NftData"}},"id":3403,"nodeType":"ArrayTypeName","src":"662:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_storage_$dyn_storage_ptr","typeString":"struct Nft.NftData[]"}},"visibility":"public"},{"canonicalName":"Nft.NFT","id":3407,"members":[{"constant":false,"id":3406,"mutability":"mutable","name":"tokenId","nameLocation":"752:7:18","nodeType":"VariableDeclaration","scope":3407,"src":"744:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3405,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"NFT","nameLocation":"734:3:18","nodeType":"StructDefinition","scope":3597,"src":"727:38:18","visibility":"public"},{"constant":false,"id":3411,"mutability":"mutable","name":"_nftsMinted","nameLocation":"807:11:18","nodeType":"VariableDeclaration","scope":3597,"src":"771:47:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3410,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"779:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"771:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3409,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3415,"mutability":"mutable","name":"_nftsOwned","nameLocation":"860:10:18","nodeType":"VariableDeclaration","scope":3597,"src":"824:46:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3414,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3412,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"824:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3422,"mutability":"mutable","name":"tokenOfOwnerByIndexMapping","nameLocation":"930:26:18","nodeType":"VariableDeclaration","scope":3597,"src":"876:80:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct Nft.NFT))"},"typeName":{"id":3421,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3416,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"876:45:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct Nft.NFT))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3420,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3417,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"896:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$","typeString":"mapping(uint256 => struct Nft.NFT)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3419,"nodeType":"UserDefinedTypeName","pathNode":{"id":3418,"name":"NFT","nameLocations":["916:3:18"],"nodeType":"IdentifierPath","referencedDeclaration":3407,"src":"916:3:18"},"referencedDeclaration":3407,"src":"916:3:18","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$3407_storage_ptr","typeString":"struct Nft.NFT"}}}},"visibility":"private"},{"body":{"id":3451,"nodeType":"Block","src":"1127:75:18","statements":[{"expression":{"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3442,"name":"contentContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"1133:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3446,"name":"priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"1163:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3447,"name":"contentContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"1173:22:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1151:11:18","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_address_$_t_address_$returns$_t_contract$_Content_$3373_$","typeString":"function (address,address) returns (contract Content)"},"typeName":{"id":3444,"nodeType":"UserDefinedTypeName","pathNode":{"id":3443,"name":"Content","nameLocations":["1155:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3373,"src":"1155:7:18"},"referencedDeclaration":3373,"src":"1155:7:18","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}},"src":"1133:63:18","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}},"id":3450,"nodeType":"ExpressionStatement","src":"1133:63:18"}]},"id":3452,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3435,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"1093:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3436,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"1098:6:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3437,"kind":"baseConstructorSpecifier","modifierName":{"id":3434,"name":"ERC721","nameLocations":["1086:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1371,"src":"1086:6:18"},"nodeType":"ModifierInvocation","src":"1086:19:18"},{"arguments":[{"id":3439,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"1114:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3440,"kind":"baseConstructorSpecifier","modifierName":{"id":3438,"name":"Ownable","nameLocations":["1106:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":193,"src":"1106:7:18"},"nodeType":"ModifierInvocation","src":"1106:21:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3424,"mutability":"mutable","name":"name","nameLocation":"988:4:18","nodeType":"VariableDeclaration","scope":3452,"src":"974:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3423,"name":"string","nodeType":"ElementaryTypeName","src":"974:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3426,"mutability":"mutable","name":"symbol","nameLocation":"1008:6:18","nodeType":"VariableDeclaration","scope":3452,"src":"994:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3425,"name":"string","nodeType":"ElementaryTypeName","src":"994:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"initialOwner","nameLocation":"1023:12:18","nodeType":"VariableDeclaration","scope":3452,"src":"1015:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3427,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"contentContractAddress","nameLocation":"1044:22:18","nodeType":"VariableDeclaration","scope":3452,"src":"1036:30:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3429,"name":"address","nodeType":"ElementaryTypeName","src":"1036:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3432,"mutability":"mutable","name":"priceFeed","nameLocation":"1075:9:18","nodeType":"VariableDeclaration","scope":3452,"src":"1067:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3431,"name":"address","nodeType":"ElementaryTypeName","src":"1067:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"973:112:18"},"returnParameters":{"id":3441,"nodeType":"ParameterList","parameters":[],"src":"1127:0:18"},"scope":3597,"src":"962:240:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3527,"nodeType":"Block","src":"1331:485:18","statements":[{"expression":{"arguments":[{"id":3463,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1344:3:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3464,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"1348:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3462,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"1338:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1338:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3466,"nodeType":"ExpressionStatement","src":"1338:18:18"},{"expression":{"arguments":[{"id":3468,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"1376:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3469,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3459,"src":"1384:4:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3467,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"1363:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1363:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3471,"nodeType":"ExpressionStatement","src":"1363:26:18"},{"body":{"id":3495,"nodeType":"Block","src":"1449:116:18","statements":[{"expression":{"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3485,"name":"tokenOfOwnerByIndexMapping","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"1463:26:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct Nft.NFT storage ref))"}},"id":3488,"indexExpression":{"id":3486,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1490:3:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1463:31:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$","typeString":"mapping(uint256 => struct Nft.NFT storage ref)"}},"id":3489,"indexExpression":{"id":3487,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"1495:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1463:34:18","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$3407_storage","typeString":"struct Nft.NFT storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"1532:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3490,"name":"NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"1500:3:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_NFT_$3407_storage_ptr_$","typeString":"type(struct Nft.NFT storage pointer)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1522:7:18"],"names":["tokenId"],"nodeType":"FunctionCall","src":"1500:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$3407_memory_ptr","typeString":"struct Nft.NFT memory"}},"src":"1463:91:18","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$3407_storage","typeString":"struct Nft.NFT storage ref"}},"id":3494,"nodeType":"ExpressionStatement","src":"1463:91:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3476,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"1419:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"expression":{"id":3478,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1433:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1437:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1433:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3477,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1423:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1423:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1419:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3496,"initializationExpression":{"assignments":[3473],"declarations":[{"constant":false,"id":3473,"mutability":"mutable","name":"i","nameLocation":"1413:1:18","nodeType":"VariableDeclaration","scope":3496,"src":"1408:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint","nodeType":"ElementaryTypeName","src":"1408:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3475,"initialValue":{"hexValue":"30","id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1417:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1408:10:18"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1445:3:18","subExpression":{"id":3482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"1445:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3484,"nodeType":"ExpressionStatement","src":"1445:3:18"},"nodeType":"ForStatement","src":"1404:161:18"},{"expression":{"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3497,"name":"_nftsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"1601:11:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3499,"indexExpression":{"id":3498,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1613:3:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1601:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1621:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1601:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3502,"nodeType":"ExpressionStatement","src":"1601:21:18"},{"expression":{"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3503,"name":"_nftsOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"1660:10:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3505,"indexExpression":{"id":3504,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"1671:3:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1660:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1660:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3508,"nodeType":"ExpressionStatement","src":"1660:20:18"},{"assignments":[3511],"declarations":[{"constant":false,"id":3511,"mutability":"mutable","name":"newNft","nameLocation":"1707:6:18","nodeType":"VariableDeclaration","scope":3527,"src":"1692:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_memory_ptr","typeString":"struct Nft.NftData"},"typeName":{"id":3510,"nodeType":"UserDefinedTypeName","pathNode":{"id":3509,"name":"NftData","nameLocations":["1692:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3400,"src":"1692:7:18"},"referencedDeclaration":3400,"src":"1692:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_storage_ptr","typeString":"struct Nft.NftData"}},"visibility":"internal"}],"id":3520,"initialValue":{"arguments":[{"id":3513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"1724:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"4e616d65","id":3514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1733:6:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_55e49609591f684ecf6f2909c9e20c2439b990887b9c3fe108b154c9077d85cf","typeString":"literal_string \"Name\""},"value":"Name"},{"hexValue":"4465736372697074696f6e","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1741:13:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_95e794640ff3efd16bfe738f1a9bf2886d166af549121f57d6e14af6b513f45d","typeString":"literal_string \"Description\""},"value":"Description"},{"hexValue":"496d61676548617368","id":3516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1756:11:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f00f22a47a19313db783970cd4f37e9c3c6b0aa9fe3e6b6974a979a0c98ba05","typeString":"literal_string \"ImageHash\""},"value":"ImageHash"},{"expression":{"id":3517,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1769:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1773:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1769:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_55e49609591f684ecf6f2909c9e20c2439b990887b9c3fe108b154c9077d85cf","typeString":"literal_string \"Name\""},{"typeIdentifier":"t_stringliteral_95e794640ff3efd16bfe738f1a9bf2886d166af549121f57d6e14af6b513f45d","typeString":"literal_string \"Description\""},{"typeIdentifier":"t_stringliteral_5f00f22a47a19313db783970cd4f37e9c3c6b0aa9fe3e6b6974a979a0c98ba05","typeString":"literal_string \"ImageHash\""},{"typeIdentifier":"t_address","typeString":"address"}],"id":3512,"name":"NftData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1716:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_NftData_$3400_storage_ptr_$","typeString":"type(struct Nft.NftData storage pointer)"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1716:64:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_memory_ptr","typeString":"struct Nft.NftData memory"}},"nodeType":"VariableDeclarationStatement","src":"1692:88:18"},{"expression":{"arguments":[{"id":3524,"name":"newNft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"1803:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_memory_ptr","typeString":"struct Nft.NftData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_NftData_$3400_memory_ptr","typeString":"struct Nft.NftData memory"}],"expression":{"id":3521,"name":"nftFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"1790:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_storage_$dyn_storage","typeString":"struct Nft.NftData storage ref[] storage ref"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1798:4:18","memberName":"push","nodeType":"MemberAccess","src":"1790:12:18","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_NftData_$3400_storage_$dyn_storage_ptr_$_t_struct$_NftData_$3400_storage_$returns$__$attached_to$_t_array$_t_struct$_NftData_$3400_storage_$dyn_storage_ptr_$","typeString":"function (struct Nft.NftData storage ref[] storage pointer,struct Nft.NftData storage ref)"}},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1790:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3526,"nodeType":"ExpressionStatement","src":"1790:20:18"}]},"documentation":{"id":3453,"nodeType":"StructuredDocumentation","src":"1207:28:18","text":"   Functions"},"functionSelector":"d3fc9864","id":3528,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1268:4:18","nodeType":"FunctionDefinition","parameters":{"id":3460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"_to","nameLocation":"1281:3:18","nodeType":"VariableDeclaration","scope":3528,"src":"1273:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3454,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"tokenId","nameLocation":"1293:7:18","nodeType":"VariableDeclaration","scope":3528,"src":"1285:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3459,"mutability":"mutable","name":"_uri","nameLocation":"1317:4:18","nodeType":"VariableDeclaration","scope":3528,"src":"1301:20:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3458,"name":"string","nodeType":"ElementaryTypeName","src":"1301:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1272:50:18"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[],"src":"1331:0:18"},"scope":3597,"src":"1259:557:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3540,"nodeType":"Block","src":"1971:42:18","statements":[{"expression":{"baseExpression":{"id":3536,"name":"_nftsMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"1988:11:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3538,"indexExpression":{"id":3537,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3531,"src":"2000:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1988:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3535,"id":3539,"nodeType":"Return","src":"1981:25:18"}]},"documentation":{"id":3529,"nodeType":"StructuredDocumentation","src":"1824:23:18","text":"Getter Functions "},"functionSelector":"41de982e","id":3541,"implemented":true,"kind":"function","modifiers":[],"name":"nftsMinted","nameLocation":"1913:10:18","nodeType":"FunctionDefinition","parameters":{"id":3532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3531,"mutability":"mutable","name":"owner","nameLocation":"1932:5:18","nodeType":"VariableDeclaration","scope":3541,"src":"1924:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3530,"name":"address","nodeType":"ElementaryTypeName","src":"1924:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1923:15:18"},"returnParameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"1962:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3533,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1961:9:18"},"scope":3597,"src":"1904:109:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3552,"nodeType":"Block","src":"2135:41:18","statements":[{"expression":{"baseExpression":{"id":3548,"name":"_nftsOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"2152:10:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3550,"indexExpression":{"id":3549,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"2163:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2152:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3547,"id":3551,"nodeType":"Return","src":"2145:24:18"}]},"functionSelector":"8baafe13","id":3553,"implemented":true,"kind":"function","modifiers":[],"name":"nftsOwned","nameLocation":"2078:9:18","nodeType":"FunctionDefinition","parameters":{"id":3544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"owner","nameLocation":"2096:5:18","nodeType":"VariableDeclaration","scope":3553,"src":"2088:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3542,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2087:15:18"},"returnParameters":{"id":3547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3553,"src":"2126:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2125:9:18"},"scope":3597,"src":"2069:107:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3569,"nodeType":"Block","src":"2271:74:18","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"id":3562,"name":"tokenOfOwnerByIndexMapping","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"2288:26:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct Nft.NFT storage ref))"}},"id":3564,"indexExpression":{"id":3563,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"2315:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2288:34:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NFT_$3407_storage_$","typeString":"mapping(uint256 => struct Nft.NFT storage ref)"}},"id":3566,"indexExpression":{"id":3565,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"2323:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2288:42:18","typeDescriptions":{"typeIdentifier":"t_struct$_NFT_$3407_storage","typeString":"struct Nft.NFT storage ref"}},"id":3567,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2331:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"2288:50:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3561,"id":3568,"nodeType":"Return","src":"2281:57:18"}]},"functionSelector":"2f745c59","id":3570,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"2191:19:18","nodeType":"FunctionDefinition","parameters":{"id":3558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3555,"mutability":"mutable","name":"_owner","nameLocation":"2219:6:18","nodeType":"VariableDeclaration","scope":3570,"src":"2211:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3554,"name":"address","nodeType":"ElementaryTypeName","src":"2211:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3557,"mutability":"mutable","name":"_index","nameLocation":"2234:6:18","nodeType":"VariableDeclaration","scope":3570,"src":"2226:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3556,"name":"uint256","nodeType":"ElementaryTypeName","src":"2226:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2210:31:18"},"returnParameters":{"id":3561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3570,"src":"2263:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3559,"name":"uint256","nodeType":"ElementaryTypeName","src":"2263:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2262:9:18"},"scope":3597,"src":"2182:163:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3579,"nodeType":"Block","src":"2440:31:18","statements":[{"expression":{"id":3577,"name":"nftFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"2457:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_storage_$dyn_storage","typeString":"struct Nft.NftData storage ref[] storage ref"}},"functionReturnParameters":3576,"id":3578,"nodeType":"Return","src":"2450:14:18"}]},"functionSelector":"a9149641","id":3580,"implemented":true,"kind":"function","modifiers":[],"name":"getNftFeed","nameLocation":"2388:10:18","nodeType":"FunctionDefinition","parameters":{"id":3571,"nodeType":"ParameterList","parameters":[],"src":"2398:2:18"},"returnParameters":{"id":3576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3580,"src":"2422:16:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","typeString":"struct Nft.NftData[]"},"typeName":{"baseType":{"id":3573,"nodeType":"UserDefinedTypeName","pathNode":{"id":3572,"name":"NftData","nameLocations":["2422:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":3400,"src":"2422:7:18"},"referencedDeclaration":3400,"src":"2422:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_NftData_$3400_storage_ptr","typeString":"struct Nft.NftData"}},"id":3574,"nodeType":"ArrayTypeName","src":"2422:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_NftData_$3400_storage_$dyn_storage_ptr","typeString":"struct Nft.NftData[]"}},"visibility":"internal"}],"src":"2421:18:18"},"scope":3597,"src":"2379:92:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3595,"nodeType":"Block","src":"2585:71:18","statements":[{"expression":{"arguments":[{"id":3591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"2634:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"2641:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3589,"name":"contentContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"2602:15:18","typeDescriptions":{"typeIdentifier":"t_contract$_Content_$3373","typeString":"contract Content"}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2618:15:18","memberName":"getContentPrice","nodeType":"MemberAccess","referencedDeclaration":3348,"src":"2602:31:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2602:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3588,"id":3594,"nodeType":"Return","src":"2595:54:18"}]},"functionSelector":"75f2fc2c","id":3596,"implemented":true,"kind":"function","modifiers":[],"name":"getNftPrice","nameLocation":"2509:11:18","nodeType":"FunctionDefinition","parameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3582,"mutability":"mutable","name":"tokenId","nameLocation":"2529:7:18","nodeType":"VariableDeclaration","scope":3596,"src":"2521:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3581,"name":"uint256","nodeType":"ElementaryTypeName","src":"2521:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3584,"mutability":"mutable","name":"owner","nameLocation":"2546:5:18","nodeType":"VariableDeclaration","scope":3596,"src":"2538:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3583,"name":"address","nodeType":"ElementaryTypeName","src":"2538:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2520:32:18"},"returnParameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3596,"src":"2576:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"2576:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2575:9:18"},"scope":3597,"src":"2500:156:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3598,"src":"395:2264:18","usedErrors":[59,64,273,278,287,292,297,304,309,314],"usedEvents":[70,213,220,1387,1396,1405]}],"src":"31:2628:18"},"id":18},"contracts/PriceConvertor.sol":{"ast":{"absolutePath":"contracts/PriceConvertor.sol","exportedSymbols":{"AggregatorV3Interface":[45],"PriceConvertor":[3664]},"id":3665,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3599,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:19"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","file":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","id":3601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3665,"sourceUnit":46,"src":"94:112:19","symbolAliases":[{"foreign":{"id":3600,"name":"AggregatorV3Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"102:21:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PriceConvertor","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3664,"linearizedBaseContracts":[3664],"name":"PriceConvertor","nameLocation":"216:14:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":3622,"nodeType":"Block","src":"350:197:19","statements":[{"assignments":[null,3610,null,null,null],"declarations":[null,{"constant":false,"id":3610,"mutability":"mutable","name":"price","nameLocation":"462:5:19","nodeType":"VariableDeclaration","scope":3622,"src":"455:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3609,"name":"int256","nodeType":"ElementaryTypeName","src":"455:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},null,null,null],"id":3614,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3611,"name":"priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"474:9:19","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"484:15:19","memberName":"latestRoundData","nodeType":"MemberAccess","referencedDeclaration":44,"src":"474:25:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$","typeString":"function () view external returns (uint80,int256,uint256,uint256,uint80)"}},"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$","typeString":"tuple(uint80,int256,uint256,uint256,uint80)"}},"nodeType":"VariableDeclarationStatement","src":"453:48:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3617,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"527:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"535:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"527:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"519:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"519:7:19","typeDescriptions":{}}},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"519:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3608,"id":3621,"nodeType":"Return","src":"512:28:19"}]},"id":3623,"implemented":true,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"277:8:19","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"priceFeed","nameLocation":"308:9:19","nodeType":"VariableDeclaration","scope":3623,"src":"286:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"},"typeName":{"id":3603,"nodeType":"UserDefinedTypeName","pathNode":{"id":3602,"name":"AggregatorV3Interface","nameLocations":["286:21:19"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"286:21:19"},"referencedDeclaration":45,"src":"286:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"visibility":"internal"}],"src":"285:33:19"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3623,"src":"342:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3606,"name":"uint256","nodeType":"ElementaryTypeName","src":"342:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"341:9:19"},"scope":3664,"src":"268:279:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3650,"nodeType":"Block","src":"694:150:19","statements":[{"assignments":[3634],"declarations":[{"constant":false,"id":3634,"mutability":"mutable","name":"ethPrice","nameLocation":"712:8:19","nodeType":"VariableDeclaration","scope":3650,"src":"704:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3633,"name":"uint256","nodeType":"ElementaryTypeName","src":"704:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3638,"initialValue":{"arguments":[{"id":3636,"name":"priceFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"732:9:19","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}],"id":3635,"name":"getPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"723:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_AggregatorV3Interface_$45_$returns$_t_uint256_$","typeString":"function (contract AggregatorV3Interface) view returns (uint256)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"723:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"704:38:19"},{"assignments":[3640],"declarations":[{"constant":false,"id":3640,"mutability":"mutable","name":"ethAmountInUsd","nameLocation":"760:14:19","nodeType":"VariableDeclaration","scope":3650,"src":"752:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3647,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3641,"name":"ethPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"778:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3642,"name":"ethAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"789:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"778:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3644,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"777:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":3645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"802:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"777:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"752:54:19"},{"expression":{"id":3648,"name":"ethAmountInUsd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"823:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3632,"id":3649,"nodeType":"Return","src":"816:21:19"}]},"id":3651,"implemented":true,"kind":"function","modifiers":[],"name":"getConversionRate","nameLocation":"594:17:19","nodeType":"FunctionDefinition","parameters":{"id":3629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"ethAmount","nameLocation":"620:9:19","nodeType":"VariableDeclaration","scope":3651,"src":"612:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3624,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"priceFeed","nameLocation":"652:9:19","nodeType":"VariableDeclaration","scope":3651,"src":"630:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"},"typeName":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"AggregatorV3Interface","nameLocations":["630:21:19"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"630:21:19"},"referencedDeclaration":45,"src":"630:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"visibility":"internal"}],"src":"611:51:19"},"returnParameters":{"id":3632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3651,"src":"686:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3630,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"685:9:19"},"scope":3664,"src":"585:259:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3662,"nodeType":"Block","src":"931:99:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"hexValue":"307836393441413137363933353732313544453446414330383162663166333039614443333235333036","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"970:42:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x694AA1769357215DE4FAC081bf1f309aDC325306"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3656,"name":"AggregatorV3Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"948:21:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AggregatorV3Interface_$45_$","typeString":"type(contract AggregatorV3Interface)"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_AggregatorV3Interface_$45","typeString":"contract AggregatorV3Interface"}},"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1014:7:19","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":16,"src":"948:73:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:75:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3655,"id":3661,"nodeType":"Return","src":"941:82:19"}]},"id":3663,"implemented":true,"kind":"function","modifiers":[],"name":"getVersion","nameLocation":"888:10:19","nodeType":"FunctionDefinition","parameters":{"id":3652,"nodeType":"ParameterList","parameters":[],"src":"898:2:19"},"returnParameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3663,"src":"923:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"922:9:19"},"scope":3664,"src":"879:151:19","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3665,"src":"208:824:19","usedErrors":[],"usedEvents":[]}],"src":"34:999:19"},"id":19}},"contracts":{"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"AggregatorV3Interface":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","description()":"7284e416","getRoundData(uint80)":"9a6fc8f5","latestRoundData()":"feaf968c","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":54,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"IERC4906":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"EIP-721 Metadata Update Extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"EIP-721 Metadata Update Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4906.sol\":\"IERC4906\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":395,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":397,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":401,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":405,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":409,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":415,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":395,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":397,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":401,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":405,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":409,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":415,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1534,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dac34d99405411f3ffd583bed46afd455b7b3cf80bc61cfff9b3586f5768c5a64736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TSTORE 0xAC CALLVALUE 0xD9 SWAP5 SDIV COINBASE 0x1F EXTCODEHASH REVERT PC EXTCODESIZE 0xED CHAINID 0xAF 0xD4 SSTORE 0xB7 0xB3 0xCF DUP1 0xBC PUSH2 0xCFFF SWAP12 CALLDATALOAD DUP7 CREATE2 PUSH23 0x8C5A64736F6C634300081B003300000000000000000000 ","sourceMap":"251:2847:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205dac34d99405411f3ffd583bed46afd455b7b3cf80bc61cfff9b3586f5768c5a64736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TSTORE 0xAC CALLVALUE 0xD9 SWAP5 SDIV COINBASE 0x1F EXTCODEHASH REVERT PC EXTCODESIZE 0xED CHAINID 0xAF 0xD4 SSTORE 0xB7 0xB3 0xCF DUP1 0xBC PUSH2 0xCFFF SWAP12 CALLDATALOAD DUP7 CREATE2 PUSH23 0x8C5A64736F6C634300081B003300000000000000000000 ","sourceMap":"251:2847:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037a6c9048bff8f60b8ee509df5ef73dfedce4344bda1af48650786dcc13c9e8064736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xA6 0xC9 DIV DUP12 SELFDESTRUCT DUP16 PUSH1 0xB8 0xEE POP SWAP14 CREATE2 0xEF PUSH20 0xDFEDCE4344BDA1AF48650786DCC13C9E8064736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"203:14914:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122037a6c9048bff8f60b8ee509df5ef73dfedce4344bda1af48650786dcc13c9e8064736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xA6 0xC9 DIV DUP12 SELFDESTRUCT DUP16 PUSH1 0xB8 0xEE POP SWAP14 CREATE2 0xEF PUSH20 0xDFEDCE4344BDA1AF48650786DCC13C9E8064736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"203:14914:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa8cc33a79f6da41d72043758d757142b609b3887f0d95c0367c4f0b9a58612864736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL DUP13 0xC3 GASPRICE PUSH26 0xF6DA41D72043758D757142B609B3887F0D95C0367C4F0B9A5861 0x28 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"216:1047:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa8cc33a79f6da41d72043758d757142b609b3887f0d95c0367c4f0b9a58612864736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL DUP13 0xC3 GASPRICE PUSH26 0xF6DA41D72043758D757142B609B3887F0D95C0367C4F0B9A5861 0x28 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"216:1047:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Content.sol":{"Content":{"abi":[{"inputs":[{"internalType":"address","name":"priceFeed","type":"address"},{"internalType":"address","name":"nftContractAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"Content__ContentAlreadyPurchased","type":"error"},{"inputs":[],"name":"Content__ContentIdDoesNotExist","type":"error"},{"inputs":[],"name":"Content__ContentPurchaseError","type":"error"},{"inputs":[],"name":"Content__PriceMustNotBeZero","type":"error"},{"inputs":[],"name":"Content__TransactionFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ContentPriceSet","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"addressToContent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"addressToContentToPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"content_id","type":"uint256"}],"name":"buyContent","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"contentPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getContentAccess","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getContentId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"content_id","type":"uint256"}],"name":"getContentPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nftContract","outputs":[{"internalType":"contract IERC721","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"content_id","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setContentPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nftContractAddress","type":"address"}],"name":"setNftContract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3206":{"entryPoint":null,"id":3206,"parameterSlots":2,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":264,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":285,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":223,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":191,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":186,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":241,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1355:20","nodeType":"YulBlock","src":"0:1355:20","statements":[{"body":{"nativeSrc":"47:35:20","nodeType":"YulBlock","src":"47:35:20","statements":[{"nativeSrc":"57:19:20","nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:20","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:20","nodeType":"YulIdentifier","src":"67:5:20"},"nativeSrc":"67:9:20","nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:20","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:20","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nativeSrc":"177:28:20","nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:20","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:20","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:20","nodeType":"YulIdentifier","src":"187:6:20"},"nativeSrc":"187:12:20","nodeType":"YulFunctionCall","src":"187:12:20"},"nativeSrc":"187:12:20","nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:20","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nativeSrc":"300:28:20","nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:20","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:20","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:20","nodeType":"YulIdentifier","src":"310:6:20"},"nativeSrc":"310:12:20","nodeType":"YulFunctionCall","src":"310:12:20"},"nativeSrc":"310:12:20","nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:20","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nativeSrc":"379:81:20","nodeType":"YulBlock","src":"379:81:20","statements":[{"nativeSrc":"389:65:20","nodeType":"YulAssignment","src":"389:65:20","value":{"arguments":[{"name":"value","nativeSrc":"404:5:20","nodeType":"YulIdentifier","src":"404:5:20"},{"kind":"number","nativeSrc":"411:42:20","nodeType":"YulLiteral","src":"411:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:20","nodeType":"YulIdentifier","src":"400:3:20"},"nativeSrc":"400:54:20","nodeType":"YulFunctionCall","src":"400:54:20"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:20","nodeType":"YulIdentifier","src":"389:7:20"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:20","nodeType":"YulTypedName","src":"361:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:20","nodeType":"YulTypedName","src":"371:7:20","type":""}],"src":"334:126:20"},{"body":{"nativeSrc":"511:51:20","nodeType":"YulBlock","src":"511:51:20","statements":[{"nativeSrc":"521:35:20","nodeType":"YulAssignment","src":"521:35:20","value":{"arguments":[{"name":"value","nativeSrc":"550:5:20","nodeType":"YulIdentifier","src":"550:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:20","nodeType":"YulIdentifier","src":"532:17:20"},"nativeSrc":"532:24:20","nodeType":"YulFunctionCall","src":"532:24:20"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:20","nodeType":"YulIdentifier","src":"521:7:20"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:20","nodeType":"YulTypedName","src":"493:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:20","nodeType":"YulTypedName","src":"503:7:20","type":""}],"src":"466:96:20"},{"body":{"nativeSrc":"611:79:20","nodeType":"YulBlock","src":"611:79:20","statements":[{"body":{"nativeSrc":"668:16:20","nodeType":"YulBlock","src":"668:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:20","nodeType":"YulLiteral","src":"677:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:20","nodeType":"YulLiteral","src":"680:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:20","nodeType":"YulIdentifier","src":"670:6:20"},"nativeSrc":"670:12:20","nodeType":"YulFunctionCall","src":"670:12:20"},"nativeSrc":"670:12:20","nodeType":"YulExpressionStatement","src":"670:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:20","nodeType":"YulIdentifier","src":"634:5:20"},{"arguments":[{"name":"value","nativeSrc":"659:5:20","nodeType":"YulIdentifier","src":"659:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:20","nodeType":"YulIdentifier","src":"641:17:20"},"nativeSrc":"641:24:20","nodeType":"YulFunctionCall","src":"641:24:20"}],"functionName":{"name":"eq","nativeSrc":"631:2:20","nodeType":"YulIdentifier","src":"631:2:20"},"nativeSrc":"631:35:20","nodeType":"YulFunctionCall","src":"631:35:20"}],"functionName":{"name":"iszero","nativeSrc":"624:6:20","nodeType":"YulIdentifier","src":"624:6:20"},"nativeSrc":"624:43:20","nodeType":"YulFunctionCall","src":"624:43:20"},"nativeSrc":"621:63:20","nodeType":"YulIf","src":"621:63:20"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:20","nodeType":"YulTypedName","src":"604:5:20","type":""}],"src":"568:122:20"},{"body":{"nativeSrc":"759:80:20","nodeType":"YulBlock","src":"759:80:20","statements":[{"nativeSrc":"769:22:20","nodeType":"YulAssignment","src":"769:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:20","nodeType":"YulIdentifier","src":"784:6:20"}],"functionName":{"name":"mload","nativeSrc":"778:5:20","nodeType":"YulIdentifier","src":"778:5:20"},"nativeSrc":"778:13:20","nodeType":"YulFunctionCall","src":"778:13:20"},"variableNames":[{"name":"value","nativeSrc":"769:5:20","nodeType":"YulIdentifier","src":"769:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:20","nodeType":"YulIdentifier","src":"827:5:20"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:20","nodeType":"YulIdentifier","src":"800:26:20"},"nativeSrc":"800:33:20","nodeType":"YulFunctionCall","src":"800:33:20"},"nativeSrc":"800:33:20","nodeType":"YulExpressionStatement","src":"800:33:20"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:20","nodeType":"YulTypedName","src":"737:6:20","type":""},{"name":"end","nativeSrc":"745:3:20","nodeType":"YulTypedName","src":"745:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:20","nodeType":"YulTypedName","src":"753:5:20","type":""}],"src":"696:143:20"},{"body":{"nativeSrc":"939:413:20","nodeType":"YulBlock","src":"939:413:20","statements":[{"body":{"nativeSrc":"985:83:20","nodeType":"YulBlock","src":"985:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"987:77:20","nodeType":"YulIdentifier","src":"987:77:20"},"nativeSrc":"987:79:20","nodeType":"YulFunctionCall","src":"987:79:20"},"nativeSrc":"987:79:20","nodeType":"YulExpressionStatement","src":"987:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"960:7:20","nodeType":"YulIdentifier","src":"960:7:20"},{"name":"headStart","nativeSrc":"969:9:20","nodeType":"YulIdentifier","src":"969:9:20"}],"functionName":{"name":"sub","nativeSrc":"956:3:20","nodeType":"YulIdentifier","src":"956:3:20"},"nativeSrc":"956:23:20","nodeType":"YulFunctionCall","src":"956:23:20"},{"kind":"number","nativeSrc":"981:2:20","nodeType":"YulLiteral","src":"981:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"952:3:20","nodeType":"YulIdentifier","src":"952:3:20"},"nativeSrc":"952:32:20","nodeType":"YulFunctionCall","src":"952:32:20"},"nativeSrc":"949:119:20","nodeType":"YulIf","src":"949:119:20"},{"nativeSrc":"1078:128:20","nodeType":"YulBlock","src":"1078:128:20","statements":[{"nativeSrc":"1093:15:20","nodeType":"YulVariableDeclaration","src":"1093:15:20","value":{"kind":"number","nativeSrc":"1107:1:20","nodeType":"YulLiteral","src":"1107:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1097:6:20","nodeType":"YulTypedName","src":"1097:6:20","type":""}]},{"nativeSrc":"1122:74:20","nodeType":"YulAssignment","src":"1122:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1168:9:20","nodeType":"YulIdentifier","src":"1168:9:20"},{"name":"offset","nativeSrc":"1179:6:20","nodeType":"YulIdentifier","src":"1179:6:20"}],"functionName":{"name":"add","nativeSrc":"1164:3:20","nodeType":"YulIdentifier","src":"1164:3:20"},"nativeSrc":"1164:22:20","nodeType":"YulFunctionCall","src":"1164:22:20"},{"name":"dataEnd","nativeSrc":"1188:7:20","nodeType":"YulIdentifier","src":"1188:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1132:31:20","nodeType":"YulIdentifier","src":"1132:31:20"},"nativeSrc":"1132:64:20","nodeType":"YulFunctionCall","src":"1132:64:20"},"variableNames":[{"name":"value0","nativeSrc":"1122:6:20","nodeType":"YulIdentifier","src":"1122:6:20"}]}]},{"nativeSrc":"1216:129:20","nodeType":"YulBlock","src":"1216:129:20","statements":[{"nativeSrc":"1231:16:20","nodeType":"YulVariableDeclaration","src":"1231:16:20","value":{"kind":"number","nativeSrc":"1245:2:20","nodeType":"YulLiteral","src":"1245:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"1235:6:20","nodeType":"YulTypedName","src":"1235:6:20","type":""}]},{"nativeSrc":"1261:74:20","nodeType":"YulAssignment","src":"1261:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1307:9:20","nodeType":"YulIdentifier","src":"1307:9:20"},{"name":"offset","nativeSrc":"1318:6:20","nodeType":"YulIdentifier","src":"1318:6:20"}],"functionName":{"name":"add","nativeSrc":"1303:3:20","nodeType":"YulIdentifier","src":"1303:3:20"},"nativeSrc":"1303:22:20","nodeType":"YulFunctionCall","src":"1303:22:20"},{"name":"dataEnd","nativeSrc":"1327:7:20","nodeType":"YulIdentifier","src":"1327:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1271:31:20","nodeType":"YulIdentifier","src":"1271:31:20"},"nativeSrc":"1271:64:20","nodeType":"YulFunctionCall","src":"1271:64:20"},"variableNames":[{"name":"value1","nativeSrc":"1261:6:20","nodeType":"YulIdentifier","src":"1261:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nativeSrc":"845:507:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"901:9:20","nodeType":"YulTypedName","src":"901:9:20","type":""},{"name":"dataEnd","nativeSrc":"912:7:20","nodeType":"YulTypedName","src":"912:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"924:6:20","nodeType":"YulTypedName","src":"924:6:20","type":""},{"name":"value1","nativeSrc":"932:6:20","nodeType":"YulTypedName","src":"932:6:20","type":""}],"src":"845:507:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516110933803806110938339818101604052810190610032919061011d565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b610f278061016c6000396000f3fe6080604052600436106100915760003560e01c806380c7d5e11161005957806380c7d5e11461017e578063810b8145146101bb578063d56d229d146101f8578063d9af03ef14610223578063df82498c1461026057610091565b80631a8398d41461009657806352f5ad77146100b257806353a6b941146100db57806355eef30314610118578063779f770714610155575b600080fd5b6100b060048036038101906100ab9190610a91565b61029d565b005b3480156100be57600080fd5b506100d960048036038101906100d49190610ad1565b61061b565b005b3480156100e757600080fd5b5061010260048036038101906100fd9190610ad1565b61065e565b60405161010f9190610b19565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610a91565b61067e565b60405161014c9190610b43565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610b5e565b6106d9565b005b34801561018a57600080fd5b506101a560048036038101906101a09190610ad1565b610828565b6040516101b29190610b43565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190610a91565b610840565b6040516101ef9190610b43565b60405180910390f35b34801561020457600080fd5b5061020d610865565b60405161021a9190610bfd565b60405180910390f35b34801561022f57600080fd5b5061024a60048036038101906102459190610ad1565b610889565b6040516102579190610b43565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190610ad1565b6108d2565b6040516102949190610b19565b60405180910390f35b8173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161030d9190610b43565b602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610c2d565b73ffffffffffffffffffffffffffffffffffffffff161461039b576040517f6c8b88df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610425576040517fab09bb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020546104ab600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b036105e5576001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008273ffffffffffffffffffffffffffffffffffffffff16610556600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b60405161056290610c8b565b60006040518083038185875af1925050503d806000811461059f576040519150601f19603f3d011682016040523d82523d6000602084013e6105a4565b606091505b50509050806105df576040517f312585c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610617565b6040517ffb77229500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008111610713576040517f8209ab4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610748600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261092890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167f51991dac21fa3f9c470153885bded81e15400ea0307d507104bd32152aea965860405160405180910390a35050565b60036020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008061093483610964565b90506000670de0b6b3a7640000858361094d9190610ccf565b6109579190610d40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190610dfe565b505050915050670de0b6b3a7640000816109f09190610e79565b915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a28826109fd565b9050919050565b610a3881610a1d565b8114610a4357600080fd5b50565b600081359050610a5581610a2f565b92915050565b6000819050919050565b610a6e81610a5b565b8114610a7957600080fd5b50565b600081359050610a8b81610a65565b92915050565b60008060408385031215610aa857610aa76109f8565b5b6000610ab685828601610a46565b9250506020610ac785828601610a7c565b9150509250929050565b600060208284031215610ae757610ae66109f8565b5b6000610af584828501610a46565b91505092915050565b60008115159050919050565b610b1381610afe565b82525050565b6000602082019050610b2e6000830184610b0a565b92915050565b610b3d81610a5b565b82525050565b6000602082019050610b586000830184610b34565b92915050565b60008060408385031215610b7557610b746109f8565b5b6000610b8385828601610a7c565b9250506020610b9485828601610a7c565b9150509250929050565b6000819050919050565b6000610bc3610bbe610bb9846109fd565b610b9e565b6109fd565b9050919050565b6000610bd582610ba8565b9050919050565b6000610be782610bca565b9050919050565b610bf781610bdc565b82525050565b6000602082019050610c126000830184610bee565b92915050565b600081519050610c2781610a2f565b92915050565b600060208284031215610c4357610c426109f8565b5b6000610c5184828501610c18565b91505092915050565b600081905092915050565b50565b6000610c75600083610c5a565b9150610c8082610c65565b600082019050919050565b6000610c9682610c68565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cda82610a5b565b9150610ce583610a5b565b9250828202610cf381610a5b565b91508282048414831517610d0a57610d09610ca0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d4b82610a5b565b9150610d5683610a5b565b925082610d6657610d65610d11565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9081610d71565b8114610d9b57600080fd5b50565b600081519050610dad81610d87565b92915050565b6000819050919050565b610dc681610db3565b8114610dd157600080fd5b50565b600081519050610de381610dbd565b92915050565b600081519050610df881610a65565b92915050565b600080600080600060a08688031215610e1a57610e196109f8565b5b6000610e2888828901610d9e565b9550506020610e3988828901610dd4565b9450506040610e4a88828901610de9565b9350506060610e5b88828901610de9565b9250506080610e6c88828901610d9e565b9150509295509295909350565b6000610e8482610db3565b9150610e8f83610db3565b9250828202610e9d81610db3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ed557610ed4610ca0565b5b8282058414831517610eea57610ee9610ca0565b5b509291505056fea2646970667358221220473cd60ec302577a690a6577cad0b2835162c2c0c737cbb3bf4ff47cce655fc864736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1093 CODESIZE SUB DUP1 PUSH2 0x1093 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x11D JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x15D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA DUP3 PUSH2 0xBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA DUP2 PUSH2 0xDF JUMP JUMPDEST DUP2 EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x117 DUP2 PUSH2 0xF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134 JUMPI PUSH2 0x133 PUSH2 0xBA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x142 DUP6 DUP3 DUP7 ADD PUSH2 0x108 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x153 DUP6 DUP3 DUP7 ADD PUSH2 0x108 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xF27 DUP1 PUSH2 0x16C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80C7D5E1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x80C7D5E1 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x810B8145 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xD56D229D EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xD9AF03EF EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0xDF82498C EQ PUSH2 0x260 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x1A8398D4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x52F5AD77 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x53A6B941 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x55EEF303 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x779F7707 EQ PUSH2 0x155 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x828 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x865 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x245 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30D SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x39B JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C8B88DF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SUB PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAB09BB1400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4AB PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SUB PUSH2 0x5E5 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x556 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x562 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x312585C900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFB77229500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x713 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8209AB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x748 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x51991DAC21FA3F9C470153885BDED81E15400EA0307D507104BD32152AEA9658 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x934 DUP4 PUSH2 0x964 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 DUP4 PUSH2 0x94D SWAP2 SWAP1 PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x957 SWAP2 SWAP1 PUSH2 0xD40 JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9D6 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0xE79 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA28 DUP3 PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA38 DUP2 PUSH2 0xA1D JUMP JUMPDEST DUP2 EQ PUSH2 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA55 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA6E DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP2 EQ PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA8B DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA8 JUMPI PUSH2 0xAA7 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAB6 DUP6 DUP3 DUP7 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAC7 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE7 JUMPI PUSH2 0xAE6 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAF5 DUP5 DUP3 DUP6 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB13 DUP2 PUSH2 0xAFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB0A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB3D DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB34 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB74 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB94 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC3 PUSH2 0xBBE PUSH2 0xBB9 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD5 DUP3 PUSH2 0xBA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBE7 DUP3 PUSH2 0xBCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBF7 DUP2 PUSH2 0xBDC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC12 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBEE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xC27 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC43 JUMPI PUSH2 0xC42 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC51 DUP5 DUP3 DUP6 ADD PUSH2 0xC18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC75 PUSH1 0x0 DUP4 PUSH2 0xC5A JUMP JUMPDEST SWAP2 POP PUSH2 0xC80 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC96 DUP3 PUSH2 0xC68 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDA DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xCE5 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xCF3 DUP2 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xD0A JUMPI PUSH2 0xD09 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD4B DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xD56 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xD66 JUMPI PUSH2 0xD65 PUSH2 0xD11 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0xD71 JUMP JUMPDEST DUP2 EQ PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDAD DUP2 PUSH2 0xD87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDC6 DUP2 PUSH2 0xDB3 JUMP JUMPDEST DUP2 EQ PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDE3 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDF8 DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE1A JUMPI PUSH2 0xE19 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xE39 DUP9 DUP3 DUP10 ADD PUSH2 0xDD4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xE4A DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xE5B DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xE6C DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE84 DUP3 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH2 0xE8F DUP4 PUSH2 0xDB3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xE9D DUP2 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP5 EQ PUSH1 0x0 DUP5 SLT AND ISZERO PUSH2 0xED5 JUMPI PUSH2 0xED4 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SDIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xEEA JUMPI PUSH2 0xEE9 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE EXTCODECOPY 0xD6 0xE 0xC3 MUL JUMPI PUSH27 0x690A6577CAD0B2835162C2C0C737CBB3BF4FF47CCE655FC864736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"283:2653:17:-:0;;;1064:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1167:9;1131:11;;:46;;;;;;;;;;;;;;;;;;1209:18;1187:11;;:41;;;;;;;;;;;;;;;;;;1064:171;;283:2653;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;283:2653:17:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@addressToContentToPrice_3175":{"entryPoint":2112,"id":3175,"parameterSlots":0,"returnSlots":0},"@addressToContent_3183":{"entryPoint":2088,"id":3183,"parameterSlots":0,"returnSlots":0},"@buyContent_3320":{"entryPoint":669,"id":3320,"parameterSlots":2,"returnSlots":0},"@contentPurchased_3179":{"entryPoint":1630,"id":3179,"parameterSlots":0,"returnSlots":0},"@getContentAccess_3360":{"entryPoint":2258,"id":3360,"parameterSlots":1,"returnSlots":1},"@getContentId_3372":{"entryPoint":2185,"id":3372,"parameterSlots":1,"returnSlots":1},"@getContentPrice_3348":{"entryPoint":1662,"id":3348,"parameterSlots":2,"returnSlots":1},"@getConversionRate_3651":{"entryPoint":2344,"id":3651,"parameterSlots":2,"returnSlots":1},"@getPrice_3623":{"entryPoint":2404,"id":3623,"parameterSlots":1,"returnSlots":1},"@nftContract_3150":{"entryPoint":2149,"id":3150,"parameterSlots":0,"returnSlots":0},"@setContentPrice_3247":{"entryPoint":1753,"id":3247,"parameterSlots":2,"returnSlots":0},"@setNftContract_3332":{"entryPoint":1563,"id":3332,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":2630,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":3096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_int256_fromMemory":{"entryPoint":3540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2684,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":3561,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint80_fromMemory":{"entryPoint":3486,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2769,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":3117,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2705,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":2910,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory":{"entryPoint":3582,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":2826,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IERC721_$1488_to_t_address_fromStack":{"entryPoint":3054,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3176,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2868,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3211,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":2841,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC721_$1488__to_t_address__fromStack_reversed":{"entryPoint":3069,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2883,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3162,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3392,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_int256":{"entryPoint":3705,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3279,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2589,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":2814,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_int256":{"entryPoint":3507,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2557,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2651,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint80":{"entryPoint":3441,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IERC721_$1488_to_t_address":{"entryPoint":3036,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":3018,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":2984,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":2974,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3232,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":3345,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2552,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":3173,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2607,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_int256":{"entryPoint":3517,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2661,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint80":{"entryPoint":3463,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9165:20","nodeType":"YulBlock","src":"0:9165:20","statements":[{"body":{"nativeSrc":"47:35:20","nodeType":"YulBlock","src":"47:35:20","statements":[{"nativeSrc":"57:19:20","nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:20","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:20","nodeType":"YulIdentifier","src":"67:5:20"},"nativeSrc":"67:9:20","nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:20","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:20","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nativeSrc":"177:28:20","nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:20","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:20","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:20","nodeType":"YulIdentifier","src":"187:6:20"},"nativeSrc":"187:12:20","nodeType":"YulFunctionCall","src":"187:12:20"},"nativeSrc":"187:12:20","nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:20","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nativeSrc":"300:28:20","nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:20","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:20","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:20","nodeType":"YulIdentifier","src":"310:6:20"},"nativeSrc":"310:12:20","nodeType":"YulFunctionCall","src":"310:12:20"},"nativeSrc":"310:12:20","nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:20","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nativeSrc":"379:81:20","nodeType":"YulBlock","src":"379:81:20","statements":[{"nativeSrc":"389:65:20","nodeType":"YulAssignment","src":"389:65:20","value":{"arguments":[{"name":"value","nativeSrc":"404:5:20","nodeType":"YulIdentifier","src":"404:5:20"},{"kind":"number","nativeSrc":"411:42:20","nodeType":"YulLiteral","src":"411:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:20","nodeType":"YulIdentifier","src":"400:3:20"},"nativeSrc":"400:54:20","nodeType":"YulFunctionCall","src":"400:54:20"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:20","nodeType":"YulIdentifier","src":"389:7:20"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:20","nodeType":"YulTypedName","src":"361:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:20","nodeType":"YulTypedName","src":"371:7:20","type":""}],"src":"334:126:20"},{"body":{"nativeSrc":"511:51:20","nodeType":"YulBlock","src":"511:51:20","statements":[{"nativeSrc":"521:35:20","nodeType":"YulAssignment","src":"521:35:20","value":{"arguments":[{"name":"value","nativeSrc":"550:5:20","nodeType":"YulIdentifier","src":"550:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:20","nodeType":"YulIdentifier","src":"532:17:20"},"nativeSrc":"532:24:20","nodeType":"YulFunctionCall","src":"532:24:20"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:20","nodeType":"YulIdentifier","src":"521:7:20"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:20","nodeType":"YulTypedName","src":"493:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:20","nodeType":"YulTypedName","src":"503:7:20","type":""}],"src":"466:96:20"},{"body":{"nativeSrc":"611:79:20","nodeType":"YulBlock","src":"611:79:20","statements":[{"body":{"nativeSrc":"668:16:20","nodeType":"YulBlock","src":"668:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:20","nodeType":"YulLiteral","src":"677:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:20","nodeType":"YulLiteral","src":"680:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:20","nodeType":"YulIdentifier","src":"670:6:20"},"nativeSrc":"670:12:20","nodeType":"YulFunctionCall","src":"670:12:20"},"nativeSrc":"670:12:20","nodeType":"YulExpressionStatement","src":"670:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:20","nodeType":"YulIdentifier","src":"634:5:20"},{"arguments":[{"name":"value","nativeSrc":"659:5:20","nodeType":"YulIdentifier","src":"659:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:20","nodeType":"YulIdentifier","src":"641:17:20"},"nativeSrc":"641:24:20","nodeType":"YulFunctionCall","src":"641:24:20"}],"functionName":{"name":"eq","nativeSrc":"631:2:20","nodeType":"YulIdentifier","src":"631:2:20"},"nativeSrc":"631:35:20","nodeType":"YulFunctionCall","src":"631:35:20"}],"functionName":{"name":"iszero","nativeSrc":"624:6:20","nodeType":"YulIdentifier","src":"624:6:20"},"nativeSrc":"624:43:20","nodeType":"YulFunctionCall","src":"624:43:20"},"nativeSrc":"621:63:20","nodeType":"YulIf","src":"621:63:20"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:20","nodeType":"YulTypedName","src":"604:5:20","type":""}],"src":"568:122:20"},{"body":{"nativeSrc":"748:87:20","nodeType":"YulBlock","src":"748:87:20","statements":[{"nativeSrc":"758:29:20","nodeType":"YulAssignment","src":"758:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"780:6:20","nodeType":"YulIdentifier","src":"780:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"767:12:20","nodeType":"YulIdentifier","src":"767:12:20"},"nativeSrc":"767:20:20","nodeType":"YulFunctionCall","src":"767:20:20"},"variableNames":[{"name":"value","nativeSrc":"758:5:20","nodeType":"YulIdentifier","src":"758:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"823:5:20","nodeType":"YulIdentifier","src":"823:5:20"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"796:26:20","nodeType":"YulIdentifier","src":"796:26:20"},"nativeSrc":"796:33:20","nodeType":"YulFunctionCall","src":"796:33:20"},"nativeSrc":"796:33:20","nodeType":"YulExpressionStatement","src":"796:33:20"}]},"name":"abi_decode_t_address","nativeSrc":"696:139:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"726:6:20","nodeType":"YulTypedName","src":"726:6:20","type":""},{"name":"end","nativeSrc":"734:3:20","nodeType":"YulTypedName","src":"734:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"742:5:20","nodeType":"YulTypedName","src":"742:5:20","type":""}],"src":"696:139:20"},{"body":{"nativeSrc":"886:32:20","nodeType":"YulBlock","src":"886:32:20","statements":[{"nativeSrc":"896:16:20","nodeType":"YulAssignment","src":"896:16:20","value":{"name":"value","nativeSrc":"907:5:20","nodeType":"YulIdentifier","src":"907:5:20"},"variableNames":[{"name":"cleaned","nativeSrc":"896:7:20","nodeType":"YulIdentifier","src":"896:7:20"}]}]},"name":"cleanup_t_uint256","nativeSrc":"841:77:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"868:5:20","nodeType":"YulTypedName","src":"868:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"878:7:20","nodeType":"YulTypedName","src":"878:7:20","type":""}],"src":"841:77:20"},{"body":{"nativeSrc":"967:79:20","nodeType":"YulBlock","src":"967:79:20","statements":[{"body":{"nativeSrc":"1024:16:20","nodeType":"YulBlock","src":"1024:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1033:1:20","nodeType":"YulLiteral","src":"1033:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1036:1:20","nodeType":"YulLiteral","src":"1036:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1026:6:20","nodeType":"YulIdentifier","src":"1026:6:20"},"nativeSrc":"1026:12:20","nodeType":"YulFunctionCall","src":"1026:12:20"},"nativeSrc":"1026:12:20","nodeType":"YulExpressionStatement","src":"1026:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"990:5:20","nodeType":"YulIdentifier","src":"990:5:20"},{"arguments":[{"name":"value","nativeSrc":"1015:5:20","nodeType":"YulIdentifier","src":"1015:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"997:17:20","nodeType":"YulIdentifier","src":"997:17:20"},"nativeSrc":"997:24:20","nodeType":"YulFunctionCall","src":"997:24:20"}],"functionName":{"name":"eq","nativeSrc":"987:2:20","nodeType":"YulIdentifier","src":"987:2:20"},"nativeSrc":"987:35:20","nodeType":"YulFunctionCall","src":"987:35:20"}],"functionName":{"name":"iszero","nativeSrc":"980:6:20","nodeType":"YulIdentifier","src":"980:6:20"},"nativeSrc":"980:43:20","nodeType":"YulFunctionCall","src":"980:43:20"},"nativeSrc":"977:63:20","nodeType":"YulIf","src":"977:63:20"}]},"name":"validator_revert_t_uint256","nativeSrc":"924:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"960:5:20","nodeType":"YulTypedName","src":"960:5:20","type":""}],"src":"924:122:20"},{"body":{"nativeSrc":"1104:87:20","nodeType":"YulBlock","src":"1104:87:20","statements":[{"nativeSrc":"1114:29:20","nodeType":"YulAssignment","src":"1114:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"1136:6:20","nodeType":"YulIdentifier","src":"1136:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"1123:12:20","nodeType":"YulIdentifier","src":"1123:12:20"},"nativeSrc":"1123:20:20","nodeType":"YulFunctionCall","src":"1123:20:20"},"variableNames":[{"name":"value","nativeSrc":"1114:5:20","nodeType":"YulIdentifier","src":"1114:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1179:5:20","nodeType":"YulIdentifier","src":"1179:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"1152:26:20","nodeType":"YulIdentifier","src":"1152:26:20"},"nativeSrc":"1152:33:20","nodeType":"YulFunctionCall","src":"1152:33:20"},"nativeSrc":"1152:33:20","nodeType":"YulExpressionStatement","src":"1152:33:20"}]},"name":"abi_decode_t_uint256","nativeSrc":"1052:139:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1082:6:20","nodeType":"YulTypedName","src":"1082:6:20","type":""},{"name":"end","nativeSrc":"1090:3:20","nodeType":"YulTypedName","src":"1090:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1098:5:20","nodeType":"YulTypedName","src":"1098:5:20","type":""}],"src":"1052:139:20"},{"body":{"nativeSrc":"1280:391:20","nodeType":"YulBlock","src":"1280:391:20","statements":[{"body":{"nativeSrc":"1326:83:20","nodeType":"YulBlock","src":"1326:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1328:77:20","nodeType":"YulIdentifier","src":"1328:77:20"},"nativeSrc":"1328:79:20","nodeType":"YulFunctionCall","src":"1328:79:20"},"nativeSrc":"1328:79:20","nodeType":"YulExpressionStatement","src":"1328:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1301:7:20","nodeType":"YulIdentifier","src":"1301:7:20"},{"name":"headStart","nativeSrc":"1310:9:20","nodeType":"YulIdentifier","src":"1310:9:20"}],"functionName":{"name":"sub","nativeSrc":"1297:3:20","nodeType":"YulIdentifier","src":"1297:3:20"},"nativeSrc":"1297:23:20","nodeType":"YulFunctionCall","src":"1297:23:20"},{"kind":"number","nativeSrc":"1322:2:20","nodeType":"YulLiteral","src":"1322:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1293:3:20","nodeType":"YulIdentifier","src":"1293:3:20"},"nativeSrc":"1293:32:20","nodeType":"YulFunctionCall","src":"1293:32:20"},"nativeSrc":"1290:119:20","nodeType":"YulIf","src":"1290:119:20"},{"nativeSrc":"1419:117:20","nodeType":"YulBlock","src":"1419:117:20","statements":[{"nativeSrc":"1434:15:20","nodeType":"YulVariableDeclaration","src":"1434:15:20","value":{"kind":"number","nativeSrc":"1448:1:20","nodeType":"YulLiteral","src":"1448:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1438:6:20","nodeType":"YulTypedName","src":"1438:6:20","type":""}]},{"nativeSrc":"1463:63:20","nodeType":"YulAssignment","src":"1463:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1498:9:20","nodeType":"YulIdentifier","src":"1498:9:20"},{"name":"offset","nativeSrc":"1509:6:20","nodeType":"YulIdentifier","src":"1509:6:20"}],"functionName":{"name":"add","nativeSrc":"1494:3:20","nodeType":"YulIdentifier","src":"1494:3:20"},"nativeSrc":"1494:22:20","nodeType":"YulFunctionCall","src":"1494:22:20"},{"name":"dataEnd","nativeSrc":"1518:7:20","nodeType":"YulIdentifier","src":"1518:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1473:20:20","nodeType":"YulIdentifier","src":"1473:20:20"},"nativeSrc":"1473:53:20","nodeType":"YulFunctionCall","src":"1473:53:20"},"variableNames":[{"name":"value0","nativeSrc":"1463:6:20","nodeType":"YulIdentifier","src":"1463:6:20"}]}]},{"nativeSrc":"1546:118:20","nodeType":"YulBlock","src":"1546:118:20","statements":[{"nativeSrc":"1561:16:20","nodeType":"YulVariableDeclaration","src":"1561:16:20","value":{"kind":"number","nativeSrc":"1575:2:20","nodeType":"YulLiteral","src":"1575:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"1565:6:20","nodeType":"YulTypedName","src":"1565:6:20","type":""}]},{"nativeSrc":"1591:63:20","nodeType":"YulAssignment","src":"1591:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1626:9:20","nodeType":"YulIdentifier","src":"1626:9:20"},{"name":"offset","nativeSrc":"1637:6:20","nodeType":"YulIdentifier","src":"1637:6:20"}],"functionName":{"name":"add","nativeSrc":"1622:3:20","nodeType":"YulIdentifier","src":"1622:3:20"},"nativeSrc":"1622:22:20","nodeType":"YulFunctionCall","src":"1622:22:20"},{"name":"dataEnd","nativeSrc":"1646:7:20","nodeType":"YulIdentifier","src":"1646:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"1601:20:20","nodeType":"YulIdentifier","src":"1601:20:20"},"nativeSrc":"1601:53:20","nodeType":"YulFunctionCall","src":"1601:53:20"},"variableNames":[{"name":"value1","nativeSrc":"1591:6:20","nodeType":"YulIdentifier","src":"1591:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"1197:474:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1242:9:20","nodeType":"YulTypedName","src":"1242:9:20","type":""},{"name":"dataEnd","nativeSrc":"1253:7:20","nodeType":"YulTypedName","src":"1253:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1265:6:20","nodeType":"YulTypedName","src":"1265:6:20","type":""},{"name":"value1","nativeSrc":"1273:6:20","nodeType":"YulTypedName","src":"1273:6:20","type":""}],"src":"1197:474:20"},{"body":{"nativeSrc":"1743:263:20","nodeType":"YulBlock","src":"1743:263:20","statements":[{"body":{"nativeSrc":"1789:83:20","nodeType":"YulBlock","src":"1789:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1791:77:20","nodeType":"YulIdentifier","src":"1791:77:20"},"nativeSrc":"1791:79:20","nodeType":"YulFunctionCall","src":"1791:79:20"},"nativeSrc":"1791:79:20","nodeType":"YulExpressionStatement","src":"1791:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1764:7:20","nodeType":"YulIdentifier","src":"1764:7:20"},{"name":"headStart","nativeSrc":"1773:9:20","nodeType":"YulIdentifier","src":"1773:9:20"}],"functionName":{"name":"sub","nativeSrc":"1760:3:20","nodeType":"YulIdentifier","src":"1760:3:20"},"nativeSrc":"1760:23:20","nodeType":"YulFunctionCall","src":"1760:23:20"},{"kind":"number","nativeSrc":"1785:2:20","nodeType":"YulLiteral","src":"1785:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1756:3:20","nodeType":"YulIdentifier","src":"1756:3:20"},"nativeSrc":"1756:32:20","nodeType":"YulFunctionCall","src":"1756:32:20"},"nativeSrc":"1753:119:20","nodeType":"YulIf","src":"1753:119:20"},{"nativeSrc":"1882:117:20","nodeType":"YulBlock","src":"1882:117:20","statements":[{"nativeSrc":"1897:15:20","nodeType":"YulVariableDeclaration","src":"1897:15:20","value":{"kind":"number","nativeSrc":"1911:1:20","nodeType":"YulLiteral","src":"1911:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1901:6:20","nodeType":"YulTypedName","src":"1901:6:20","type":""}]},{"nativeSrc":"1926:63:20","nodeType":"YulAssignment","src":"1926:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1961:9:20","nodeType":"YulIdentifier","src":"1961:9:20"},{"name":"offset","nativeSrc":"1972:6:20","nodeType":"YulIdentifier","src":"1972:6:20"}],"functionName":{"name":"add","nativeSrc":"1957:3:20","nodeType":"YulIdentifier","src":"1957:3:20"},"nativeSrc":"1957:22:20","nodeType":"YulFunctionCall","src":"1957:22:20"},{"name":"dataEnd","nativeSrc":"1981:7:20","nodeType":"YulIdentifier","src":"1981:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1936:20:20","nodeType":"YulIdentifier","src":"1936:20:20"},"nativeSrc":"1936:53:20","nodeType":"YulFunctionCall","src":"1936:53:20"},"variableNames":[{"name":"value0","nativeSrc":"1926:6:20","nodeType":"YulIdentifier","src":"1926:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1677:329:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1713:9:20","nodeType":"YulTypedName","src":"1713:9:20","type":""},{"name":"dataEnd","nativeSrc":"1724:7:20","nodeType":"YulTypedName","src":"1724:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1736:6:20","nodeType":"YulTypedName","src":"1736:6:20","type":""}],"src":"1677:329:20"},{"body":{"nativeSrc":"2054:48:20","nodeType":"YulBlock","src":"2054:48:20","statements":[{"nativeSrc":"2064:32:20","nodeType":"YulAssignment","src":"2064:32:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2089:5:20","nodeType":"YulIdentifier","src":"2089:5:20"}],"functionName":{"name":"iszero","nativeSrc":"2082:6:20","nodeType":"YulIdentifier","src":"2082:6:20"},"nativeSrc":"2082:13:20","nodeType":"YulFunctionCall","src":"2082:13:20"}],"functionName":{"name":"iszero","nativeSrc":"2075:6:20","nodeType":"YulIdentifier","src":"2075:6:20"},"nativeSrc":"2075:21:20","nodeType":"YulFunctionCall","src":"2075:21:20"},"variableNames":[{"name":"cleaned","nativeSrc":"2064:7:20","nodeType":"YulIdentifier","src":"2064:7:20"}]}]},"name":"cleanup_t_bool","nativeSrc":"2012:90:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2036:5:20","nodeType":"YulTypedName","src":"2036:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2046:7:20","nodeType":"YulTypedName","src":"2046:7:20","type":""}],"src":"2012:90:20"},{"body":{"nativeSrc":"2167:50:20","nodeType":"YulBlock","src":"2167:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"2184:3:20","nodeType":"YulIdentifier","src":"2184:3:20"},{"arguments":[{"name":"value","nativeSrc":"2204:5:20","nodeType":"YulIdentifier","src":"2204:5:20"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"2189:14:20","nodeType":"YulIdentifier","src":"2189:14:20"},"nativeSrc":"2189:21:20","nodeType":"YulFunctionCall","src":"2189:21:20"}],"functionName":{"name":"mstore","nativeSrc":"2177:6:20","nodeType":"YulIdentifier","src":"2177:6:20"},"nativeSrc":"2177:34:20","nodeType":"YulFunctionCall","src":"2177:34:20"},"nativeSrc":"2177:34:20","nodeType":"YulExpressionStatement","src":"2177:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"2108:109:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2155:5:20","nodeType":"YulTypedName","src":"2155:5:20","type":""},{"name":"pos","nativeSrc":"2162:3:20","nodeType":"YulTypedName","src":"2162:3:20","type":""}],"src":"2108:109:20"},{"body":{"nativeSrc":"2315:118:20","nodeType":"YulBlock","src":"2315:118:20","statements":[{"nativeSrc":"2325:26:20","nodeType":"YulAssignment","src":"2325:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2337:9:20","nodeType":"YulIdentifier","src":"2337:9:20"},{"kind":"number","nativeSrc":"2348:2:20","nodeType":"YulLiteral","src":"2348:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2333:3:20","nodeType":"YulIdentifier","src":"2333:3:20"},"nativeSrc":"2333:18:20","nodeType":"YulFunctionCall","src":"2333:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2325:4:20","nodeType":"YulIdentifier","src":"2325:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"2399:6:20","nodeType":"YulIdentifier","src":"2399:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"2412:9:20","nodeType":"YulIdentifier","src":"2412:9:20"},{"kind":"number","nativeSrc":"2423:1:20","nodeType":"YulLiteral","src":"2423:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2408:3:20","nodeType":"YulIdentifier","src":"2408:3:20"},"nativeSrc":"2408:17:20","nodeType":"YulFunctionCall","src":"2408:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"2361:37:20","nodeType":"YulIdentifier","src":"2361:37:20"},"nativeSrc":"2361:65:20","nodeType":"YulFunctionCall","src":"2361:65:20"},"nativeSrc":"2361:65:20","nodeType":"YulExpressionStatement","src":"2361:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"2223:210:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2287:9:20","nodeType":"YulTypedName","src":"2287:9:20","type":""},{"name":"value0","nativeSrc":"2299:6:20","nodeType":"YulTypedName","src":"2299:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2310:4:20","nodeType":"YulTypedName","src":"2310:4:20","type":""}],"src":"2223:210:20"},{"body":{"nativeSrc":"2504:53:20","nodeType":"YulBlock","src":"2504:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"2521:3:20","nodeType":"YulIdentifier","src":"2521:3:20"},{"arguments":[{"name":"value","nativeSrc":"2544:5:20","nodeType":"YulIdentifier","src":"2544:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"2526:17:20","nodeType":"YulIdentifier","src":"2526:17:20"},"nativeSrc":"2526:24:20","nodeType":"YulFunctionCall","src":"2526:24:20"}],"functionName":{"name":"mstore","nativeSrc":"2514:6:20","nodeType":"YulIdentifier","src":"2514:6:20"},"nativeSrc":"2514:37:20","nodeType":"YulFunctionCall","src":"2514:37:20"},"nativeSrc":"2514:37:20","nodeType":"YulExpressionStatement","src":"2514:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"2439:118:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2492:5:20","nodeType":"YulTypedName","src":"2492:5:20","type":""},{"name":"pos","nativeSrc":"2499:3:20","nodeType":"YulTypedName","src":"2499:3:20","type":""}],"src":"2439:118:20"},{"body":{"nativeSrc":"2661:124:20","nodeType":"YulBlock","src":"2661:124:20","statements":[{"nativeSrc":"2671:26:20","nodeType":"YulAssignment","src":"2671:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:20","nodeType":"YulIdentifier","src":"2683:9:20"},{"kind":"number","nativeSrc":"2694:2:20","nodeType":"YulLiteral","src":"2694:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:20","nodeType":"YulIdentifier","src":"2679:3:20"},"nativeSrc":"2679:18:20","nodeType":"YulFunctionCall","src":"2679:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:20","nodeType":"YulIdentifier","src":"2671:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"2751:6:20","nodeType":"YulIdentifier","src":"2751:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"2764:9:20","nodeType":"YulIdentifier","src":"2764:9:20"},{"kind":"number","nativeSrc":"2775:1:20","nodeType":"YulLiteral","src":"2775:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2760:3:20","nodeType":"YulIdentifier","src":"2760:3:20"},"nativeSrc":"2760:17:20","nodeType":"YulFunctionCall","src":"2760:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"2707:43:20","nodeType":"YulIdentifier","src":"2707:43:20"},"nativeSrc":"2707:71:20","nodeType":"YulFunctionCall","src":"2707:71:20"},"nativeSrc":"2707:71:20","nodeType":"YulExpressionStatement","src":"2707:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2563:222:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:20","nodeType":"YulTypedName","src":"2633:9:20","type":""},{"name":"value0","nativeSrc":"2645:6:20","nodeType":"YulTypedName","src":"2645:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:20","nodeType":"YulTypedName","src":"2656:4:20","type":""}],"src":"2563:222:20"},{"body":{"nativeSrc":"2874:391:20","nodeType":"YulBlock","src":"2874:391:20","statements":[{"body":{"nativeSrc":"2920:83:20","nodeType":"YulBlock","src":"2920:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"2922:77:20","nodeType":"YulIdentifier","src":"2922:77:20"},"nativeSrc":"2922:79:20","nodeType":"YulFunctionCall","src":"2922:79:20"},"nativeSrc":"2922:79:20","nodeType":"YulExpressionStatement","src":"2922:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2895:7:20","nodeType":"YulIdentifier","src":"2895:7:20"},{"name":"headStart","nativeSrc":"2904:9:20","nodeType":"YulIdentifier","src":"2904:9:20"}],"functionName":{"name":"sub","nativeSrc":"2891:3:20","nodeType":"YulIdentifier","src":"2891:3:20"},"nativeSrc":"2891:23:20","nodeType":"YulFunctionCall","src":"2891:23:20"},{"kind":"number","nativeSrc":"2916:2:20","nodeType":"YulLiteral","src":"2916:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2887:3:20","nodeType":"YulIdentifier","src":"2887:3:20"},"nativeSrc":"2887:32:20","nodeType":"YulFunctionCall","src":"2887:32:20"},"nativeSrc":"2884:119:20","nodeType":"YulIf","src":"2884:119:20"},{"nativeSrc":"3013:117:20","nodeType":"YulBlock","src":"3013:117:20","statements":[{"nativeSrc":"3028:15:20","nodeType":"YulVariableDeclaration","src":"3028:15:20","value":{"kind":"number","nativeSrc":"3042:1:20","nodeType":"YulLiteral","src":"3042:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3032:6:20","nodeType":"YulTypedName","src":"3032:6:20","type":""}]},{"nativeSrc":"3057:63:20","nodeType":"YulAssignment","src":"3057:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3092:9:20","nodeType":"YulIdentifier","src":"3092:9:20"},{"name":"offset","nativeSrc":"3103:6:20","nodeType":"YulIdentifier","src":"3103:6:20"}],"functionName":{"name":"add","nativeSrc":"3088:3:20","nodeType":"YulIdentifier","src":"3088:3:20"},"nativeSrc":"3088:22:20","nodeType":"YulFunctionCall","src":"3088:22:20"},{"name":"dataEnd","nativeSrc":"3112:7:20","nodeType":"YulIdentifier","src":"3112:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3067:20:20","nodeType":"YulIdentifier","src":"3067:20:20"},"nativeSrc":"3067:53:20","nodeType":"YulFunctionCall","src":"3067:53:20"},"variableNames":[{"name":"value0","nativeSrc":"3057:6:20","nodeType":"YulIdentifier","src":"3057:6:20"}]}]},{"nativeSrc":"3140:118:20","nodeType":"YulBlock","src":"3140:118:20","statements":[{"nativeSrc":"3155:16:20","nodeType":"YulVariableDeclaration","src":"3155:16:20","value":{"kind":"number","nativeSrc":"3169:2:20","nodeType":"YulLiteral","src":"3169:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"3159:6:20","nodeType":"YulTypedName","src":"3159:6:20","type":""}]},{"nativeSrc":"3185:63:20","nodeType":"YulAssignment","src":"3185:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3220:9:20","nodeType":"YulIdentifier","src":"3220:9:20"},{"name":"offset","nativeSrc":"3231:6:20","nodeType":"YulIdentifier","src":"3231:6:20"}],"functionName":{"name":"add","nativeSrc":"3216:3:20","nodeType":"YulIdentifier","src":"3216:3:20"},"nativeSrc":"3216:22:20","nodeType":"YulFunctionCall","src":"3216:22:20"},{"name":"dataEnd","nativeSrc":"3240:7:20","nodeType":"YulIdentifier","src":"3240:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3195:20:20","nodeType":"YulIdentifier","src":"3195:20:20"},"nativeSrc":"3195:53:20","nodeType":"YulFunctionCall","src":"3195:53:20"},"variableNames":[{"name":"value1","nativeSrc":"3185:6:20","nodeType":"YulIdentifier","src":"3185:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"2791:474:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2836:9:20","nodeType":"YulTypedName","src":"2836:9:20","type":""},{"name":"dataEnd","nativeSrc":"2847:7:20","nodeType":"YulTypedName","src":"2847:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2859:6:20","nodeType":"YulTypedName","src":"2859:6:20","type":""},{"name":"value1","nativeSrc":"2867:6:20","nodeType":"YulTypedName","src":"2867:6:20","type":""}],"src":"2791:474:20"},{"body":{"nativeSrc":"3303:28:20","nodeType":"YulBlock","src":"3303:28:20","statements":[{"nativeSrc":"3313:12:20","nodeType":"YulAssignment","src":"3313:12:20","value":{"name":"value","nativeSrc":"3320:5:20","nodeType":"YulIdentifier","src":"3320:5:20"},"variableNames":[{"name":"ret","nativeSrc":"3313:3:20","nodeType":"YulIdentifier","src":"3313:3:20"}]}]},"name":"identity","nativeSrc":"3271:60:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3289:5:20","nodeType":"YulTypedName","src":"3289:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"3299:3:20","nodeType":"YulTypedName","src":"3299:3:20","type":""}],"src":"3271:60:20"},{"body":{"nativeSrc":"3397:82:20","nodeType":"YulBlock","src":"3397:82:20","statements":[{"nativeSrc":"3407:66:20","nodeType":"YulAssignment","src":"3407:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3465:5:20","nodeType":"YulIdentifier","src":"3465:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3447:17:20","nodeType":"YulIdentifier","src":"3447:17:20"},"nativeSrc":"3447:24:20","nodeType":"YulFunctionCall","src":"3447:24:20"}],"functionName":{"name":"identity","nativeSrc":"3438:8:20","nodeType":"YulIdentifier","src":"3438:8:20"},"nativeSrc":"3438:34:20","nodeType":"YulFunctionCall","src":"3438:34:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3420:17:20","nodeType":"YulIdentifier","src":"3420:17:20"},"nativeSrc":"3420:53:20","nodeType":"YulFunctionCall","src":"3420:53:20"},"variableNames":[{"name":"converted","nativeSrc":"3407:9:20","nodeType":"YulIdentifier","src":"3407:9:20"}]}]},"name":"convert_t_uint160_to_t_uint160","nativeSrc":"3337:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3377:5:20","nodeType":"YulTypedName","src":"3377:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"3387:9:20","nodeType":"YulTypedName","src":"3387:9:20","type":""}],"src":"3337:142:20"},{"body":{"nativeSrc":"3545:66:20","nodeType":"YulBlock","src":"3545:66:20","statements":[{"nativeSrc":"3555:50:20","nodeType":"YulAssignment","src":"3555:50:20","value":{"arguments":[{"name":"value","nativeSrc":"3599:5:20","nodeType":"YulIdentifier","src":"3599:5:20"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nativeSrc":"3568:30:20","nodeType":"YulIdentifier","src":"3568:30:20"},"nativeSrc":"3568:37:20","nodeType":"YulFunctionCall","src":"3568:37:20"},"variableNames":[{"name":"converted","nativeSrc":"3555:9:20","nodeType":"YulIdentifier","src":"3555:9:20"}]}]},"name":"convert_t_uint160_to_t_address","nativeSrc":"3485:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3525:5:20","nodeType":"YulTypedName","src":"3525:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"3535:9:20","nodeType":"YulTypedName","src":"3535:9:20","type":""}],"src":"3485:126:20"},{"body":{"nativeSrc":"3693:66:20","nodeType":"YulBlock","src":"3693:66:20","statements":[{"nativeSrc":"3703:50:20","nodeType":"YulAssignment","src":"3703:50:20","value":{"arguments":[{"name":"value","nativeSrc":"3747:5:20","nodeType":"YulIdentifier","src":"3747:5:20"}],"functionName":{"name":"convert_t_uint160_to_t_address","nativeSrc":"3716:30:20","nodeType":"YulIdentifier","src":"3716:30:20"},"nativeSrc":"3716:37:20","nodeType":"YulFunctionCall","src":"3716:37:20"},"variableNames":[{"name":"converted","nativeSrc":"3703:9:20","nodeType":"YulIdentifier","src":"3703:9:20"}]}]},"name":"convert_t_contract$_IERC721_$1488_to_t_address","nativeSrc":"3617:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3673:5:20","nodeType":"YulTypedName","src":"3673:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"3683:9:20","nodeType":"YulTypedName","src":"3683:9:20","type":""}],"src":"3617:142:20"},{"body":{"nativeSrc":"3846:82:20","nodeType":"YulBlock","src":"3846:82:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3863:3:20","nodeType":"YulIdentifier","src":"3863:3:20"},{"arguments":[{"name":"value","nativeSrc":"3915:5:20","nodeType":"YulIdentifier","src":"3915:5:20"}],"functionName":{"name":"convert_t_contract$_IERC721_$1488_to_t_address","nativeSrc":"3868:46:20","nodeType":"YulIdentifier","src":"3868:46:20"},"nativeSrc":"3868:53:20","nodeType":"YulFunctionCall","src":"3868:53:20"}],"functionName":{"name":"mstore","nativeSrc":"3856:6:20","nodeType":"YulIdentifier","src":"3856:6:20"},"nativeSrc":"3856:66:20","nodeType":"YulFunctionCall","src":"3856:66:20"},"nativeSrc":"3856:66:20","nodeType":"YulExpressionStatement","src":"3856:66:20"}]},"name":"abi_encode_t_contract$_IERC721_$1488_to_t_address_fromStack","nativeSrc":"3765:163:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3834:5:20","nodeType":"YulTypedName","src":"3834:5:20","type":""},{"name":"pos","nativeSrc":"3841:3:20","nodeType":"YulTypedName","src":"3841:3:20","type":""}],"src":"3765:163:20"},{"body":{"nativeSrc":"4048:140:20","nodeType":"YulBlock","src":"4048:140:20","statements":[{"nativeSrc":"4058:26:20","nodeType":"YulAssignment","src":"4058:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4070:9:20","nodeType":"YulIdentifier","src":"4070:9:20"},{"kind":"number","nativeSrc":"4081:2:20","nodeType":"YulLiteral","src":"4081:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4066:3:20","nodeType":"YulIdentifier","src":"4066:3:20"},"nativeSrc":"4066:18:20","nodeType":"YulFunctionCall","src":"4066:18:20"},"variableNames":[{"name":"tail","nativeSrc":"4058:4:20","nodeType":"YulIdentifier","src":"4058:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4154:6:20","nodeType":"YulIdentifier","src":"4154:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"4167:9:20","nodeType":"YulIdentifier","src":"4167:9:20"},{"kind":"number","nativeSrc":"4178:1:20","nodeType":"YulLiteral","src":"4178:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4163:3:20","nodeType":"YulIdentifier","src":"4163:3:20"},"nativeSrc":"4163:17:20","nodeType":"YulFunctionCall","src":"4163:17:20"}],"functionName":{"name":"abi_encode_t_contract$_IERC721_$1488_to_t_address_fromStack","nativeSrc":"4094:59:20","nodeType":"YulIdentifier","src":"4094:59:20"},"nativeSrc":"4094:87:20","nodeType":"YulFunctionCall","src":"4094:87:20"},"nativeSrc":"4094:87:20","nodeType":"YulExpressionStatement","src":"4094:87:20"}]},"name":"abi_encode_tuple_t_contract$_IERC721_$1488__to_t_address__fromStack_reversed","nativeSrc":"3934:254:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4020:9:20","nodeType":"YulTypedName","src":"4020:9:20","type":""},{"name":"value0","nativeSrc":"4032:6:20","nodeType":"YulTypedName","src":"4032:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4043:4:20","nodeType":"YulTypedName","src":"4043:4:20","type":""}],"src":"3934:254:20"},{"body":{"nativeSrc":"4257:80:20","nodeType":"YulBlock","src":"4257:80:20","statements":[{"nativeSrc":"4267:22:20","nodeType":"YulAssignment","src":"4267:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"4282:6:20","nodeType":"YulIdentifier","src":"4282:6:20"}],"functionName":{"name":"mload","nativeSrc":"4276:5:20","nodeType":"YulIdentifier","src":"4276:5:20"},"nativeSrc":"4276:13:20","nodeType":"YulFunctionCall","src":"4276:13:20"},"variableNames":[{"name":"value","nativeSrc":"4267:5:20","nodeType":"YulIdentifier","src":"4267:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4325:5:20","nodeType":"YulIdentifier","src":"4325:5:20"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4298:26:20","nodeType":"YulIdentifier","src":"4298:26:20"},"nativeSrc":"4298:33:20","nodeType":"YulFunctionCall","src":"4298:33:20"},"nativeSrc":"4298:33:20","nodeType":"YulExpressionStatement","src":"4298:33:20"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"4194:143:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4235:6:20","nodeType":"YulTypedName","src":"4235:6:20","type":""},{"name":"end","nativeSrc":"4243:3:20","nodeType":"YulTypedName","src":"4243:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4251:5:20","nodeType":"YulTypedName","src":"4251:5:20","type":""}],"src":"4194:143:20"},{"body":{"nativeSrc":"4420:274:20","nodeType":"YulBlock","src":"4420:274:20","statements":[{"body":{"nativeSrc":"4466:83:20","nodeType":"YulBlock","src":"4466:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4468:77:20","nodeType":"YulIdentifier","src":"4468:77:20"},"nativeSrc":"4468:79:20","nodeType":"YulFunctionCall","src":"4468:79:20"},"nativeSrc":"4468:79:20","nodeType":"YulExpressionStatement","src":"4468:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4441:7:20","nodeType":"YulIdentifier","src":"4441:7:20"},{"name":"headStart","nativeSrc":"4450:9:20","nodeType":"YulIdentifier","src":"4450:9:20"}],"functionName":{"name":"sub","nativeSrc":"4437:3:20","nodeType":"YulIdentifier","src":"4437:3:20"},"nativeSrc":"4437:23:20","nodeType":"YulFunctionCall","src":"4437:23:20"},{"kind":"number","nativeSrc":"4462:2:20","nodeType":"YulLiteral","src":"4462:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4433:3:20","nodeType":"YulIdentifier","src":"4433:3:20"},"nativeSrc":"4433:32:20","nodeType":"YulFunctionCall","src":"4433:32:20"},"nativeSrc":"4430:119:20","nodeType":"YulIf","src":"4430:119:20"},{"nativeSrc":"4559:128:20","nodeType":"YulBlock","src":"4559:128:20","statements":[{"nativeSrc":"4574:15:20","nodeType":"YulVariableDeclaration","src":"4574:15:20","value":{"kind":"number","nativeSrc":"4588:1:20","nodeType":"YulLiteral","src":"4588:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4578:6:20","nodeType":"YulTypedName","src":"4578:6:20","type":""}]},{"nativeSrc":"4603:74:20","nodeType":"YulAssignment","src":"4603:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4649:9:20","nodeType":"YulIdentifier","src":"4649:9:20"},{"name":"offset","nativeSrc":"4660:6:20","nodeType":"YulIdentifier","src":"4660:6:20"}],"functionName":{"name":"add","nativeSrc":"4645:3:20","nodeType":"YulIdentifier","src":"4645:3:20"},"nativeSrc":"4645:22:20","nodeType":"YulFunctionCall","src":"4645:22:20"},{"name":"dataEnd","nativeSrc":"4669:7:20","nodeType":"YulIdentifier","src":"4669:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"4613:31:20","nodeType":"YulIdentifier","src":"4613:31:20"},"nativeSrc":"4613:64:20","nodeType":"YulFunctionCall","src":"4613:64:20"},"variableNames":[{"name":"value0","nativeSrc":"4603:6:20","nodeType":"YulIdentifier","src":"4603:6:20"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"4343:351:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4390:9:20","nodeType":"YulTypedName","src":"4390:9:20","type":""},{"name":"dataEnd","nativeSrc":"4401:7:20","nodeType":"YulTypedName","src":"4401:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4413:6:20","nodeType":"YulTypedName","src":"4413:6:20","type":""}],"src":"4343:351:20"},{"body":{"nativeSrc":"4813:34:20","nodeType":"YulBlock","src":"4813:34:20","statements":[{"nativeSrc":"4823:18:20","nodeType":"YulAssignment","src":"4823:18:20","value":{"name":"pos","nativeSrc":"4838:3:20","nodeType":"YulIdentifier","src":"4838:3:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"4823:11:20","nodeType":"YulIdentifier","src":"4823:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"4700:147:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4785:3:20","nodeType":"YulTypedName","src":"4785:3:20","type":""},{"name":"length","nativeSrc":"4790:6:20","nodeType":"YulTypedName","src":"4790:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"4801:11:20","nodeType":"YulTypedName","src":"4801:11:20","type":""}],"src":"4700:147:20"},{"body":{"nativeSrc":"4959:8:20","nodeType":"YulBlock","src":"4959:8:20","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"4853:114:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"4951:6:20","nodeType":"YulTypedName","src":"4951:6:20","type":""}],"src":"4853:114:20"},{"body":{"nativeSrc":"5136:235:20","nodeType":"YulBlock","src":"5136:235:20","statements":[{"nativeSrc":"5146:90:20","nodeType":"YulAssignment","src":"5146:90:20","value":{"arguments":[{"name":"pos","nativeSrc":"5229:3:20","nodeType":"YulIdentifier","src":"5229:3:20"},{"kind":"number","nativeSrc":"5234:1:20","nodeType":"YulLiteral","src":"5234:1:20","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"5153:75:20","nodeType":"YulIdentifier","src":"5153:75:20"},"nativeSrc":"5153:83:20","nodeType":"YulFunctionCall","src":"5153:83:20"},"variableNames":[{"name":"pos","nativeSrc":"5146:3:20","nodeType":"YulIdentifier","src":"5146:3:20"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"5334:3:20","nodeType":"YulIdentifier","src":"5334:3:20"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"5245:88:20","nodeType":"YulIdentifier","src":"5245:88:20"},"nativeSrc":"5245:93:20","nodeType":"YulFunctionCall","src":"5245:93:20"},"nativeSrc":"5245:93:20","nodeType":"YulExpressionStatement","src":"5245:93:20"},{"nativeSrc":"5347:18:20","nodeType":"YulAssignment","src":"5347:18:20","value":{"arguments":[{"name":"pos","nativeSrc":"5358:3:20","nodeType":"YulIdentifier","src":"5358:3:20"},{"kind":"number","nativeSrc":"5363:1:20","nodeType":"YulLiteral","src":"5363:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5354:3:20","nodeType":"YulIdentifier","src":"5354:3:20"},"nativeSrc":"5354:11:20","nodeType":"YulFunctionCall","src":"5354:11:20"},"variableNames":[{"name":"end","nativeSrc":"5347:3:20","nodeType":"YulIdentifier","src":"5347:3:20"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"4973:398:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5124:3:20","nodeType":"YulTypedName","src":"5124:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5132:3:20","nodeType":"YulTypedName","src":"5132:3:20","type":""}],"src":"4973:398:20"},{"body":{"nativeSrc":"5565:191:20","nodeType":"YulBlock","src":"5565:191:20","statements":[{"nativeSrc":"5576:154:20","nodeType":"YulAssignment","src":"5576:154:20","value":{"arguments":[{"name":"pos","nativeSrc":"5726:3:20","nodeType":"YulIdentifier","src":"5726:3:20"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"5583:141:20","nodeType":"YulIdentifier","src":"5583:141:20"},"nativeSrc":"5583:147:20","nodeType":"YulFunctionCall","src":"5583:147:20"},"variableNames":[{"name":"pos","nativeSrc":"5576:3:20","nodeType":"YulIdentifier","src":"5576:3:20"}]},{"nativeSrc":"5740:10:20","nodeType":"YulAssignment","src":"5740:10:20","value":{"name":"pos","nativeSrc":"5747:3:20","nodeType":"YulIdentifier","src":"5747:3:20"},"variableNames":[{"name":"end","nativeSrc":"5740:3:20","nodeType":"YulIdentifier","src":"5740:3:20"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"5377:379:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5552:3:20","nodeType":"YulTypedName","src":"5552:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5561:3:20","nodeType":"YulTypedName","src":"5561:3:20","type":""}],"src":"5377:379:20"},{"body":{"nativeSrc":"5790:152:20","nodeType":"YulBlock","src":"5790:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5807:1:20","nodeType":"YulLiteral","src":"5807:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5810:77:20","nodeType":"YulLiteral","src":"5810:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5800:6:20","nodeType":"YulIdentifier","src":"5800:6:20"},"nativeSrc":"5800:88:20","nodeType":"YulFunctionCall","src":"5800:88:20"},"nativeSrc":"5800:88:20","nodeType":"YulExpressionStatement","src":"5800:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5904:1:20","nodeType":"YulLiteral","src":"5904:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"5907:4:20","nodeType":"YulLiteral","src":"5907:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5897:6:20","nodeType":"YulIdentifier","src":"5897:6:20"},"nativeSrc":"5897:15:20","nodeType":"YulFunctionCall","src":"5897:15:20"},"nativeSrc":"5897:15:20","nodeType":"YulExpressionStatement","src":"5897:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5928:1:20","nodeType":"YulLiteral","src":"5928:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5931:4:20","nodeType":"YulLiteral","src":"5931:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5921:6:20","nodeType":"YulIdentifier","src":"5921:6:20"},"nativeSrc":"5921:15:20","nodeType":"YulFunctionCall","src":"5921:15:20"},"nativeSrc":"5921:15:20","nodeType":"YulExpressionStatement","src":"5921:15:20"}]},"name":"panic_error_0x11","nativeSrc":"5762:180:20","nodeType":"YulFunctionDefinition","src":"5762:180:20"},{"body":{"nativeSrc":"5996:362:20","nodeType":"YulBlock","src":"5996:362:20","statements":[{"nativeSrc":"6006:25:20","nodeType":"YulAssignment","src":"6006:25:20","value":{"arguments":[{"name":"x","nativeSrc":"6029:1:20","nodeType":"YulIdentifier","src":"6029:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6011:17:20","nodeType":"YulIdentifier","src":"6011:17:20"},"nativeSrc":"6011:20:20","nodeType":"YulFunctionCall","src":"6011:20:20"},"variableNames":[{"name":"x","nativeSrc":"6006:1:20","nodeType":"YulIdentifier","src":"6006:1:20"}]},{"nativeSrc":"6040:25:20","nodeType":"YulAssignment","src":"6040:25:20","value":{"arguments":[{"name":"y","nativeSrc":"6063:1:20","nodeType":"YulIdentifier","src":"6063:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6045:17:20","nodeType":"YulIdentifier","src":"6045:17:20"},"nativeSrc":"6045:20:20","nodeType":"YulFunctionCall","src":"6045:20:20"},"variableNames":[{"name":"y","nativeSrc":"6040:1:20","nodeType":"YulIdentifier","src":"6040:1:20"}]},{"nativeSrc":"6074:28:20","nodeType":"YulVariableDeclaration","src":"6074:28:20","value":{"arguments":[{"name":"x","nativeSrc":"6097:1:20","nodeType":"YulIdentifier","src":"6097:1:20"},{"name":"y","nativeSrc":"6100:1:20","nodeType":"YulIdentifier","src":"6100:1:20"}],"functionName":{"name":"mul","nativeSrc":"6093:3:20","nodeType":"YulIdentifier","src":"6093:3:20"},"nativeSrc":"6093:9:20","nodeType":"YulFunctionCall","src":"6093:9:20"},"variables":[{"name":"product_raw","nativeSrc":"6078:11:20","nodeType":"YulTypedName","src":"6078:11:20","type":""}]},{"nativeSrc":"6111:41:20","nodeType":"YulAssignment","src":"6111:41:20","value":{"arguments":[{"name":"product_raw","nativeSrc":"6140:11:20","nodeType":"YulIdentifier","src":"6140:11:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6122:17:20","nodeType":"YulIdentifier","src":"6122:17:20"},"nativeSrc":"6122:30:20","nodeType":"YulFunctionCall","src":"6122:30:20"},"variableNames":[{"name":"product","nativeSrc":"6111:7:20","nodeType":"YulIdentifier","src":"6111:7:20"}]},{"body":{"nativeSrc":"6329:22:20","nodeType":"YulBlock","src":"6329:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6331:16:20","nodeType":"YulIdentifier","src":"6331:16:20"},"nativeSrc":"6331:18:20","nodeType":"YulFunctionCall","src":"6331:18:20"},"nativeSrc":"6331:18:20","nodeType":"YulExpressionStatement","src":"6331:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"6262:1:20","nodeType":"YulIdentifier","src":"6262:1:20"}],"functionName":{"name":"iszero","nativeSrc":"6255:6:20","nodeType":"YulIdentifier","src":"6255:6:20"},"nativeSrc":"6255:9:20","nodeType":"YulFunctionCall","src":"6255:9:20"},{"arguments":[{"name":"y","nativeSrc":"6285:1:20","nodeType":"YulIdentifier","src":"6285:1:20"},{"arguments":[{"name":"product","nativeSrc":"6292:7:20","nodeType":"YulIdentifier","src":"6292:7:20"},{"name":"x","nativeSrc":"6301:1:20","nodeType":"YulIdentifier","src":"6301:1:20"}],"functionName":{"name":"div","nativeSrc":"6288:3:20","nodeType":"YulIdentifier","src":"6288:3:20"},"nativeSrc":"6288:15:20","nodeType":"YulFunctionCall","src":"6288:15:20"}],"functionName":{"name":"eq","nativeSrc":"6282:2:20","nodeType":"YulIdentifier","src":"6282:2:20"},"nativeSrc":"6282:22:20","nodeType":"YulFunctionCall","src":"6282:22:20"}],"functionName":{"name":"or","nativeSrc":"6235:2:20","nodeType":"YulIdentifier","src":"6235:2:20"},"nativeSrc":"6235:83:20","nodeType":"YulFunctionCall","src":"6235:83:20"}],"functionName":{"name":"iszero","nativeSrc":"6215:6:20","nodeType":"YulIdentifier","src":"6215:6:20"},"nativeSrc":"6215:113:20","nodeType":"YulFunctionCall","src":"6215:113:20"},"nativeSrc":"6212:139:20","nodeType":"YulIf","src":"6212:139:20"}]},"name":"checked_mul_t_uint256","nativeSrc":"5948:410:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5979:1:20","nodeType":"YulTypedName","src":"5979:1:20","type":""},{"name":"y","nativeSrc":"5982:1:20","nodeType":"YulTypedName","src":"5982:1:20","type":""}],"returnVariables":[{"name":"product","nativeSrc":"5988:7:20","nodeType":"YulTypedName","src":"5988:7:20","type":""}],"src":"5948:410:20"},{"body":{"nativeSrc":"6392:152:20","nodeType":"YulBlock","src":"6392:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6409:1:20","nodeType":"YulLiteral","src":"6409:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"6412:77:20","nodeType":"YulLiteral","src":"6412:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6402:6:20","nodeType":"YulIdentifier","src":"6402:6:20"},"nativeSrc":"6402:88:20","nodeType":"YulFunctionCall","src":"6402:88:20"},"nativeSrc":"6402:88:20","nodeType":"YulExpressionStatement","src":"6402:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6506:1:20","nodeType":"YulLiteral","src":"6506:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"6509:4:20","nodeType":"YulLiteral","src":"6509:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"6499:6:20","nodeType":"YulIdentifier","src":"6499:6:20"},"nativeSrc":"6499:15:20","nodeType":"YulFunctionCall","src":"6499:15:20"},"nativeSrc":"6499:15:20","nodeType":"YulExpressionStatement","src":"6499:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6530:1:20","nodeType":"YulLiteral","src":"6530:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"6533:4:20","nodeType":"YulLiteral","src":"6533:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6523:6:20","nodeType":"YulIdentifier","src":"6523:6:20"},"nativeSrc":"6523:15:20","nodeType":"YulFunctionCall","src":"6523:15:20"},"nativeSrc":"6523:15:20","nodeType":"YulExpressionStatement","src":"6523:15:20"}]},"name":"panic_error_0x12","nativeSrc":"6364:180:20","nodeType":"YulFunctionDefinition","src":"6364:180:20"},{"body":{"nativeSrc":"6592:143:20","nodeType":"YulBlock","src":"6592:143:20","statements":[{"nativeSrc":"6602:25:20","nodeType":"YulAssignment","src":"6602:25:20","value":{"arguments":[{"name":"x","nativeSrc":"6625:1:20","nodeType":"YulIdentifier","src":"6625:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6607:17:20","nodeType":"YulIdentifier","src":"6607:17:20"},"nativeSrc":"6607:20:20","nodeType":"YulFunctionCall","src":"6607:20:20"},"variableNames":[{"name":"x","nativeSrc":"6602:1:20","nodeType":"YulIdentifier","src":"6602:1:20"}]},{"nativeSrc":"6636:25:20","nodeType":"YulAssignment","src":"6636:25:20","value":{"arguments":[{"name":"y","nativeSrc":"6659:1:20","nodeType":"YulIdentifier","src":"6659:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6641:17:20","nodeType":"YulIdentifier","src":"6641:17:20"},"nativeSrc":"6641:20:20","nodeType":"YulFunctionCall","src":"6641:20:20"},"variableNames":[{"name":"y","nativeSrc":"6636:1:20","nodeType":"YulIdentifier","src":"6636:1:20"}]},{"body":{"nativeSrc":"6683:22:20","nodeType":"YulBlock","src":"6683:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"6685:16:20","nodeType":"YulIdentifier","src":"6685:16:20"},"nativeSrc":"6685:18:20","nodeType":"YulFunctionCall","src":"6685:18:20"},"nativeSrc":"6685:18:20","nodeType":"YulExpressionStatement","src":"6685:18:20"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"6680:1:20","nodeType":"YulIdentifier","src":"6680:1:20"}],"functionName":{"name":"iszero","nativeSrc":"6673:6:20","nodeType":"YulIdentifier","src":"6673:6:20"},"nativeSrc":"6673:9:20","nodeType":"YulFunctionCall","src":"6673:9:20"},"nativeSrc":"6670:35:20","nodeType":"YulIf","src":"6670:35:20"},{"nativeSrc":"6715:14:20","nodeType":"YulAssignment","src":"6715:14:20","value":{"arguments":[{"name":"x","nativeSrc":"6724:1:20","nodeType":"YulIdentifier","src":"6724:1:20"},{"name":"y","nativeSrc":"6727:1:20","nodeType":"YulIdentifier","src":"6727:1:20"}],"functionName":{"name":"div","nativeSrc":"6720:3:20","nodeType":"YulIdentifier","src":"6720:3:20"},"nativeSrc":"6720:9:20","nodeType":"YulFunctionCall","src":"6720:9:20"},"variableNames":[{"name":"r","nativeSrc":"6715:1:20","nodeType":"YulIdentifier","src":"6715:1:20"}]}]},"name":"checked_div_t_uint256","nativeSrc":"6550:185:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6581:1:20","nodeType":"YulTypedName","src":"6581:1:20","type":""},{"name":"y","nativeSrc":"6584:1:20","nodeType":"YulTypedName","src":"6584:1:20","type":""}],"returnVariables":[{"name":"r","nativeSrc":"6590:1:20","nodeType":"YulTypedName","src":"6590:1:20","type":""}],"src":"6550:185:20"},{"body":{"nativeSrc":"6785:61:20","nodeType":"YulBlock","src":"6785:61:20","statements":[{"nativeSrc":"6795:45:20","nodeType":"YulAssignment","src":"6795:45:20","value":{"arguments":[{"name":"value","nativeSrc":"6810:5:20","nodeType":"YulIdentifier","src":"6810:5:20"},{"kind":"number","nativeSrc":"6817:22:20","nodeType":"YulLiteral","src":"6817:22:20","type":"","value":"0xffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6806:3:20","nodeType":"YulIdentifier","src":"6806:3:20"},"nativeSrc":"6806:34:20","nodeType":"YulFunctionCall","src":"6806:34:20"},"variableNames":[{"name":"cleaned","nativeSrc":"6795:7:20","nodeType":"YulIdentifier","src":"6795:7:20"}]}]},"name":"cleanup_t_uint80","nativeSrc":"6741:105:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6767:5:20","nodeType":"YulTypedName","src":"6767:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"6777:7:20","nodeType":"YulTypedName","src":"6777:7:20","type":""}],"src":"6741:105:20"},{"body":{"nativeSrc":"6894:78:20","nodeType":"YulBlock","src":"6894:78:20","statements":[{"body":{"nativeSrc":"6950:16:20","nodeType":"YulBlock","src":"6950:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6959:1:20","nodeType":"YulLiteral","src":"6959:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"6962:1:20","nodeType":"YulLiteral","src":"6962:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6952:6:20","nodeType":"YulIdentifier","src":"6952:6:20"},"nativeSrc":"6952:12:20","nodeType":"YulFunctionCall","src":"6952:12:20"},"nativeSrc":"6952:12:20","nodeType":"YulExpressionStatement","src":"6952:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6917:5:20","nodeType":"YulIdentifier","src":"6917:5:20"},{"arguments":[{"name":"value","nativeSrc":"6941:5:20","nodeType":"YulIdentifier","src":"6941:5:20"}],"functionName":{"name":"cleanup_t_uint80","nativeSrc":"6924:16:20","nodeType":"YulIdentifier","src":"6924:16:20"},"nativeSrc":"6924:23:20","nodeType":"YulFunctionCall","src":"6924:23:20"}],"functionName":{"name":"eq","nativeSrc":"6914:2:20","nodeType":"YulIdentifier","src":"6914:2:20"},"nativeSrc":"6914:34:20","nodeType":"YulFunctionCall","src":"6914:34:20"}],"functionName":{"name":"iszero","nativeSrc":"6907:6:20","nodeType":"YulIdentifier","src":"6907:6:20"},"nativeSrc":"6907:42:20","nodeType":"YulFunctionCall","src":"6907:42:20"},"nativeSrc":"6904:62:20","nodeType":"YulIf","src":"6904:62:20"}]},"name":"validator_revert_t_uint80","nativeSrc":"6852:120:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6887:5:20","nodeType":"YulTypedName","src":"6887:5:20","type":""}],"src":"6852:120:20"},{"body":{"nativeSrc":"7040:79:20","nodeType":"YulBlock","src":"7040:79:20","statements":[{"nativeSrc":"7050:22:20","nodeType":"YulAssignment","src":"7050:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"7065:6:20","nodeType":"YulIdentifier","src":"7065:6:20"}],"functionName":{"name":"mload","nativeSrc":"7059:5:20","nodeType":"YulIdentifier","src":"7059:5:20"},"nativeSrc":"7059:13:20","nodeType":"YulFunctionCall","src":"7059:13:20"},"variableNames":[{"name":"value","nativeSrc":"7050:5:20","nodeType":"YulIdentifier","src":"7050:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7107:5:20","nodeType":"YulIdentifier","src":"7107:5:20"}],"functionName":{"name":"validator_revert_t_uint80","nativeSrc":"7081:25:20","nodeType":"YulIdentifier","src":"7081:25:20"},"nativeSrc":"7081:32:20","nodeType":"YulFunctionCall","src":"7081:32:20"},"nativeSrc":"7081:32:20","nodeType":"YulExpressionStatement","src":"7081:32:20"}]},"name":"abi_decode_t_uint80_fromMemory","nativeSrc":"6978:141:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7018:6:20","nodeType":"YulTypedName","src":"7018:6:20","type":""},{"name":"end","nativeSrc":"7026:3:20","nodeType":"YulTypedName","src":"7026:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"7034:5:20","nodeType":"YulTypedName","src":"7034:5:20","type":""}],"src":"6978:141:20"},{"body":{"nativeSrc":"7169:32:20","nodeType":"YulBlock","src":"7169:32:20","statements":[{"nativeSrc":"7179:16:20","nodeType":"YulAssignment","src":"7179:16:20","value":{"name":"value","nativeSrc":"7190:5:20","nodeType":"YulIdentifier","src":"7190:5:20"},"variableNames":[{"name":"cleaned","nativeSrc":"7179:7:20","nodeType":"YulIdentifier","src":"7179:7:20"}]}]},"name":"cleanup_t_int256","nativeSrc":"7125:76:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7151:5:20","nodeType":"YulTypedName","src":"7151:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"7161:7:20","nodeType":"YulTypedName","src":"7161:7:20","type":""}],"src":"7125:76:20"},{"body":{"nativeSrc":"7249:78:20","nodeType":"YulBlock","src":"7249:78:20","statements":[{"body":{"nativeSrc":"7305:16:20","nodeType":"YulBlock","src":"7305:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7314:1:20","nodeType":"YulLiteral","src":"7314:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"7317:1:20","nodeType":"YulLiteral","src":"7317:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7307:6:20","nodeType":"YulIdentifier","src":"7307:6:20"},"nativeSrc":"7307:12:20","nodeType":"YulFunctionCall","src":"7307:12:20"},"nativeSrc":"7307:12:20","nodeType":"YulExpressionStatement","src":"7307:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7272:5:20","nodeType":"YulIdentifier","src":"7272:5:20"},{"arguments":[{"name":"value","nativeSrc":"7296:5:20","nodeType":"YulIdentifier","src":"7296:5:20"}],"functionName":{"name":"cleanup_t_int256","nativeSrc":"7279:16:20","nodeType":"YulIdentifier","src":"7279:16:20"},"nativeSrc":"7279:23:20","nodeType":"YulFunctionCall","src":"7279:23:20"}],"functionName":{"name":"eq","nativeSrc":"7269:2:20","nodeType":"YulIdentifier","src":"7269:2:20"},"nativeSrc":"7269:34:20","nodeType":"YulFunctionCall","src":"7269:34:20"}],"functionName":{"name":"iszero","nativeSrc":"7262:6:20","nodeType":"YulIdentifier","src":"7262:6:20"},"nativeSrc":"7262:42:20","nodeType":"YulFunctionCall","src":"7262:42:20"},"nativeSrc":"7259:62:20","nodeType":"YulIf","src":"7259:62:20"}]},"name":"validator_revert_t_int256","nativeSrc":"7207:120:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7242:5:20","nodeType":"YulTypedName","src":"7242:5:20","type":""}],"src":"7207:120:20"},{"body":{"nativeSrc":"7395:79:20","nodeType":"YulBlock","src":"7395:79:20","statements":[{"nativeSrc":"7405:22:20","nodeType":"YulAssignment","src":"7405:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"7420:6:20","nodeType":"YulIdentifier","src":"7420:6:20"}],"functionName":{"name":"mload","nativeSrc":"7414:5:20","nodeType":"YulIdentifier","src":"7414:5:20"},"nativeSrc":"7414:13:20","nodeType":"YulFunctionCall","src":"7414:13:20"},"variableNames":[{"name":"value","nativeSrc":"7405:5:20","nodeType":"YulIdentifier","src":"7405:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7462:5:20","nodeType":"YulIdentifier","src":"7462:5:20"}],"functionName":{"name":"validator_revert_t_int256","nativeSrc":"7436:25:20","nodeType":"YulIdentifier","src":"7436:25:20"},"nativeSrc":"7436:32:20","nodeType":"YulFunctionCall","src":"7436:32:20"},"nativeSrc":"7436:32:20","nodeType":"YulExpressionStatement","src":"7436:32:20"}]},"name":"abi_decode_t_int256_fromMemory","nativeSrc":"7333:141:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7373:6:20","nodeType":"YulTypedName","src":"7373:6:20","type":""},{"name":"end","nativeSrc":"7381:3:20","nodeType":"YulTypedName","src":"7381:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"7389:5:20","nodeType":"YulTypedName","src":"7389:5:20","type":""}],"src":"7333:141:20"},{"body":{"nativeSrc":"7543:80:20","nodeType":"YulBlock","src":"7543:80:20","statements":[{"nativeSrc":"7553:22:20","nodeType":"YulAssignment","src":"7553:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"7568:6:20","nodeType":"YulIdentifier","src":"7568:6:20"}],"functionName":{"name":"mload","nativeSrc":"7562:5:20","nodeType":"YulIdentifier","src":"7562:5:20"},"nativeSrc":"7562:13:20","nodeType":"YulFunctionCall","src":"7562:13:20"},"variableNames":[{"name":"value","nativeSrc":"7553:5:20","nodeType":"YulIdentifier","src":"7553:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7611:5:20","nodeType":"YulIdentifier","src":"7611:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"7584:26:20","nodeType":"YulIdentifier","src":"7584:26:20"},"nativeSrc":"7584:33:20","nodeType":"YulFunctionCall","src":"7584:33:20"},"nativeSrc":"7584:33:20","nodeType":"YulExpressionStatement","src":"7584:33:20"}]},"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"7480:143:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7521:6:20","nodeType":"YulTypedName","src":"7521:6:20","type":""},{"name":"end","nativeSrc":"7529:3:20","nodeType":"YulTypedName","src":"7529:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"7537:5:20","nodeType":"YulTypedName","src":"7537:5:20","type":""}],"src":"7480:143:20"},{"body":{"nativeSrc":"7771:829:20","nodeType":"YulBlock","src":"7771:829:20","statements":[{"body":{"nativeSrc":"7818:83:20","nodeType":"YulBlock","src":"7818:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"7820:77:20","nodeType":"YulIdentifier","src":"7820:77:20"},"nativeSrc":"7820:79:20","nodeType":"YulFunctionCall","src":"7820:79:20"},"nativeSrc":"7820:79:20","nodeType":"YulExpressionStatement","src":"7820:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7792:7:20","nodeType":"YulIdentifier","src":"7792:7:20"},{"name":"headStart","nativeSrc":"7801:9:20","nodeType":"YulIdentifier","src":"7801:9:20"}],"functionName":{"name":"sub","nativeSrc":"7788:3:20","nodeType":"YulIdentifier","src":"7788:3:20"},"nativeSrc":"7788:23:20","nodeType":"YulFunctionCall","src":"7788:23:20"},{"kind":"number","nativeSrc":"7813:3:20","nodeType":"YulLiteral","src":"7813:3:20","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"7784:3:20","nodeType":"YulIdentifier","src":"7784:3:20"},"nativeSrc":"7784:33:20","nodeType":"YulFunctionCall","src":"7784:33:20"},"nativeSrc":"7781:120:20","nodeType":"YulIf","src":"7781:120:20"},{"nativeSrc":"7911:127:20","nodeType":"YulBlock","src":"7911:127:20","statements":[{"nativeSrc":"7926:15:20","nodeType":"YulVariableDeclaration","src":"7926:15:20","value":{"kind":"number","nativeSrc":"7940:1:20","nodeType":"YulLiteral","src":"7940:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"7930:6:20","nodeType":"YulTypedName","src":"7930:6:20","type":""}]},{"nativeSrc":"7955:73:20","nodeType":"YulAssignment","src":"7955:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8000:9:20","nodeType":"YulIdentifier","src":"8000:9:20"},{"name":"offset","nativeSrc":"8011:6:20","nodeType":"YulIdentifier","src":"8011:6:20"}],"functionName":{"name":"add","nativeSrc":"7996:3:20","nodeType":"YulIdentifier","src":"7996:3:20"},"nativeSrc":"7996:22:20","nodeType":"YulFunctionCall","src":"7996:22:20"},{"name":"dataEnd","nativeSrc":"8020:7:20","nodeType":"YulIdentifier","src":"8020:7:20"}],"functionName":{"name":"abi_decode_t_uint80_fromMemory","nativeSrc":"7965:30:20","nodeType":"YulIdentifier","src":"7965:30:20"},"nativeSrc":"7965:63:20","nodeType":"YulFunctionCall","src":"7965:63:20"},"variableNames":[{"name":"value0","nativeSrc":"7955:6:20","nodeType":"YulIdentifier","src":"7955:6:20"}]}]},{"nativeSrc":"8048:128:20","nodeType":"YulBlock","src":"8048:128:20","statements":[{"nativeSrc":"8063:16:20","nodeType":"YulVariableDeclaration","src":"8063:16:20","value":{"kind":"number","nativeSrc":"8077:2:20","nodeType":"YulLiteral","src":"8077:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"8067:6:20","nodeType":"YulTypedName","src":"8067:6:20","type":""}]},{"nativeSrc":"8093:73:20","nodeType":"YulAssignment","src":"8093:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8138:9:20","nodeType":"YulIdentifier","src":"8138:9:20"},{"name":"offset","nativeSrc":"8149:6:20","nodeType":"YulIdentifier","src":"8149:6:20"}],"functionName":{"name":"add","nativeSrc":"8134:3:20","nodeType":"YulIdentifier","src":"8134:3:20"},"nativeSrc":"8134:22:20","nodeType":"YulFunctionCall","src":"8134:22:20"},{"name":"dataEnd","nativeSrc":"8158:7:20","nodeType":"YulIdentifier","src":"8158:7:20"}],"functionName":{"name":"abi_decode_t_int256_fromMemory","nativeSrc":"8103:30:20","nodeType":"YulIdentifier","src":"8103:30:20"},"nativeSrc":"8103:63:20","nodeType":"YulFunctionCall","src":"8103:63:20"},"variableNames":[{"name":"value1","nativeSrc":"8093:6:20","nodeType":"YulIdentifier","src":"8093:6:20"}]}]},{"nativeSrc":"8186:129:20","nodeType":"YulBlock","src":"8186:129:20","statements":[{"nativeSrc":"8201:16:20","nodeType":"YulVariableDeclaration","src":"8201:16:20","value":{"kind":"number","nativeSrc":"8215:2:20","nodeType":"YulLiteral","src":"8215:2:20","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"8205:6:20","nodeType":"YulTypedName","src":"8205:6:20","type":""}]},{"nativeSrc":"8231:74:20","nodeType":"YulAssignment","src":"8231:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8277:9:20","nodeType":"YulIdentifier","src":"8277:9:20"},{"name":"offset","nativeSrc":"8288:6:20","nodeType":"YulIdentifier","src":"8288:6:20"}],"functionName":{"name":"add","nativeSrc":"8273:3:20","nodeType":"YulIdentifier","src":"8273:3:20"},"nativeSrc":"8273:22:20","nodeType":"YulFunctionCall","src":"8273:22:20"},{"name":"dataEnd","nativeSrc":"8297:7:20","nodeType":"YulIdentifier","src":"8297:7:20"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"8241:31:20","nodeType":"YulIdentifier","src":"8241:31:20"},"nativeSrc":"8241:64:20","nodeType":"YulFunctionCall","src":"8241:64:20"},"variableNames":[{"name":"value2","nativeSrc":"8231:6:20","nodeType":"YulIdentifier","src":"8231:6:20"}]}]},{"nativeSrc":"8325:129:20","nodeType":"YulBlock","src":"8325:129:20","statements":[{"nativeSrc":"8340:16:20","nodeType":"YulVariableDeclaration","src":"8340:16:20","value":{"kind":"number","nativeSrc":"8354:2:20","nodeType":"YulLiteral","src":"8354:2:20","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"8344:6:20","nodeType":"YulTypedName","src":"8344:6:20","type":""}]},{"nativeSrc":"8370:74:20","nodeType":"YulAssignment","src":"8370:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8416:9:20","nodeType":"YulIdentifier","src":"8416:9:20"},{"name":"offset","nativeSrc":"8427:6:20","nodeType":"YulIdentifier","src":"8427:6:20"}],"functionName":{"name":"add","nativeSrc":"8412:3:20","nodeType":"YulIdentifier","src":"8412:3:20"},"nativeSrc":"8412:22:20","nodeType":"YulFunctionCall","src":"8412:22:20"},{"name":"dataEnd","nativeSrc":"8436:7:20","nodeType":"YulIdentifier","src":"8436:7:20"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"8380:31:20","nodeType":"YulIdentifier","src":"8380:31:20"},"nativeSrc":"8380:64:20","nodeType":"YulFunctionCall","src":"8380:64:20"},"variableNames":[{"name":"value3","nativeSrc":"8370:6:20","nodeType":"YulIdentifier","src":"8370:6:20"}]}]},{"nativeSrc":"8464:129:20","nodeType":"YulBlock","src":"8464:129:20","statements":[{"nativeSrc":"8479:17:20","nodeType":"YulVariableDeclaration","src":"8479:17:20","value":{"kind":"number","nativeSrc":"8493:3:20","nodeType":"YulLiteral","src":"8493:3:20","type":"","value":"128"},"variables":[{"name":"offset","nativeSrc":"8483:6:20","nodeType":"YulTypedName","src":"8483:6:20","type":""}]},{"nativeSrc":"8510:73:20","nodeType":"YulAssignment","src":"8510:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8555:9:20","nodeType":"YulIdentifier","src":"8555:9:20"},{"name":"offset","nativeSrc":"8566:6:20","nodeType":"YulIdentifier","src":"8566:6:20"}],"functionName":{"name":"add","nativeSrc":"8551:3:20","nodeType":"YulIdentifier","src":"8551:3:20"},"nativeSrc":"8551:22:20","nodeType":"YulFunctionCall","src":"8551:22:20"},{"name":"dataEnd","nativeSrc":"8575:7:20","nodeType":"YulIdentifier","src":"8575:7:20"}],"functionName":{"name":"abi_decode_t_uint80_fromMemory","nativeSrc":"8520:30:20","nodeType":"YulIdentifier","src":"8520:30:20"},"nativeSrc":"8520:63:20","nodeType":"YulFunctionCall","src":"8520:63:20"},"variableNames":[{"name":"value4","nativeSrc":"8510:6:20","nodeType":"YulIdentifier","src":"8510:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory","nativeSrc":"7629:971:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7709:9:20","nodeType":"YulTypedName","src":"7709:9:20","type":""},{"name":"dataEnd","nativeSrc":"7720:7:20","nodeType":"YulTypedName","src":"7720:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7732:6:20","nodeType":"YulTypedName","src":"7732:6:20","type":""},{"name":"value1","nativeSrc":"7740:6:20","nodeType":"YulTypedName","src":"7740:6:20","type":""},{"name":"value2","nativeSrc":"7748:6:20","nodeType":"YulTypedName","src":"7748:6:20","type":""},{"name":"value3","nativeSrc":"7756:6:20","nodeType":"YulTypedName","src":"7756:6:20","type":""},{"name":"value4","nativeSrc":"7764:6:20","nodeType":"YulTypedName","src":"7764:6:20","type":""}],"src":"7629:971:20"},{"body":{"nativeSrc":"8653:509:20","nodeType":"YulBlock","src":"8653:509:20","statements":[{"nativeSrc":"8663:24:20","nodeType":"YulAssignment","src":"8663:24:20","value":{"arguments":[{"name":"x","nativeSrc":"8685:1:20","nodeType":"YulIdentifier","src":"8685:1:20"}],"functionName":{"name":"cleanup_t_int256","nativeSrc":"8668:16:20","nodeType":"YulIdentifier","src":"8668:16:20"},"nativeSrc":"8668:19:20","nodeType":"YulFunctionCall","src":"8668:19:20"},"variableNames":[{"name":"x","nativeSrc":"8663:1:20","nodeType":"YulIdentifier","src":"8663:1:20"}]},{"nativeSrc":"8696:24:20","nodeType":"YulAssignment","src":"8696:24:20","value":{"arguments":[{"name":"y","nativeSrc":"8718:1:20","nodeType":"YulIdentifier","src":"8718:1:20"}],"functionName":{"name":"cleanup_t_int256","nativeSrc":"8701:16:20","nodeType":"YulIdentifier","src":"8701:16:20"},"nativeSrc":"8701:19:20","nodeType":"YulFunctionCall","src":"8701:19:20"},"variableNames":[{"name":"y","nativeSrc":"8696:1:20","nodeType":"YulIdentifier","src":"8696:1:20"}]},{"nativeSrc":"8729:28:20","nodeType":"YulVariableDeclaration","src":"8729:28:20","value":{"arguments":[{"name":"x","nativeSrc":"8752:1:20","nodeType":"YulIdentifier","src":"8752:1:20"},{"name":"y","nativeSrc":"8755:1:20","nodeType":"YulIdentifier","src":"8755:1:20"}],"functionName":{"name":"mul","nativeSrc":"8748:3:20","nodeType":"YulIdentifier","src":"8748:3:20"},"nativeSrc":"8748:9:20","nodeType":"YulFunctionCall","src":"8748:9:20"},"variables":[{"name":"product_raw","nativeSrc":"8733:11:20","nodeType":"YulTypedName","src":"8733:11:20","type":""}]},{"nativeSrc":"8766:40:20","nodeType":"YulAssignment","src":"8766:40:20","value":{"arguments":[{"name":"product_raw","nativeSrc":"8794:11:20","nodeType":"YulIdentifier","src":"8794:11:20"}],"functionName":{"name":"cleanup_t_int256","nativeSrc":"8777:16:20","nodeType":"YulIdentifier","src":"8777:16:20"},"nativeSrc":"8777:29:20","nodeType":"YulFunctionCall","src":"8777:29:20"},"variableNames":[{"name":"product","nativeSrc":"8766:7:20","nodeType":"YulIdentifier","src":"8766:7:20"}]},{"body":{"nativeSrc":"8933:22:20","nodeType":"YulBlock","src":"8933:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8935:16:20","nodeType":"YulIdentifier","src":"8935:16:20"},"nativeSrc":"8935:18:20","nodeType":"YulFunctionCall","src":"8935:18:20"},"nativeSrc":"8935:18:20","nodeType":"YulExpressionStatement","src":"8935:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8851:1:20","nodeType":"YulIdentifier","src":"8851:1:20"},{"kind":"number","nativeSrc":"8854:1:20","nodeType":"YulLiteral","src":"8854:1:20","type":"","value":"0"}],"functionName":{"name":"slt","nativeSrc":"8847:3:20","nodeType":"YulIdentifier","src":"8847:3:20"},"nativeSrc":"8847:9:20","nodeType":"YulFunctionCall","src":"8847:9:20"},{"arguments":[{"name":"y","nativeSrc":"8861:1:20","nodeType":"YulIdentifier","src":"8861:1:20"},{"kind":"number","nativeSrc":"8864:66:20","nodeType":"YulLiteral","src":"8864:66:20","type":"","value":"0x8000000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"eq","nativeSrc":"8858:2:20","nodeType":"YulIdentifier","src":"8858:2:20"},"nativeSrc":"8858:73:20","nodeType":"YulFunctionCall","src":"8858:73:20"}],"functionName":{"name":"and","nativeSrc":"8843:3:20","nodeType":"YulIdentifier","src":"8843:3:20"},"nativeSrc":"8843:89:20","nodeType":"YulFunctionCall","src":"8843:89:20"},"nativeSrc":"8840:115:20","nodeType":"YulIf","src":"8840:115:20"},{"body":{"nativeSrc":"9133:22:20","nodeType":"YulBlock","src":"9133:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9135:16:20","nodeType":"YulIdentifier","src":"9135:16:20"},"nativeSrc":"9135:18:20","nodeType":"YulFunctionCall","src":"9135:18:20"},"nativeSrc":"9135:18:20","nodeType":"YulExpressionStatement","src":"9135:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"9065:1:20","nodeType":"YulIdentifier","src":"9065:1:20"}],"functionName":{"name":"iszero","nativeSrc":"9058:6:20","nodeType":"YulIdentifier","src":"9058:6:20"},"nativeSrc":"9058:9:20","nodeType":"YulFunctionCall","src":"9058:9:20"},{"arguments":[{"name":"y","nativeSrc":"9088:1:20","nodeType":"YulIdentifier","src":"9088:1:20"},{"arguments":[{"name":"product","nativeSrc":"9096:7:20","nodeType":"YulIdentifier","src":"9096:7:20"},{"name":"x","nativeSrc":"9105:1:20","nodeType":"YulIdentifier","src":"9105:1:20"}],"functionName":{"name":"sdiv","nativeSrc":"9091:4:20","nodeType":"YulIdentifier","src":"9091:4:20"},"nativeSrc":"9091:16:20","nodeType":"YulFunctionCall","src":"9091:16:20"}],"functionName":{"name":"eq","nativeSrc":"9085:2:20","nodeType":"YulIdentifier","src":"9085:2:20"},"nativeSrc":"9085:23:20","nodeType":"YulFunctionCall","src":"9085:23:20"}],"functionName":{"name":"or","nativeSrc":"9038:2:20","nodeType":"YulIdentifier","src":"9038:2:20"},"nativeSrc":"9038:84:20","nodeType":"YulFunctionCall","src":"9038:84:20"}],"functionName":{"name":"iszero","nativeSrc":"9018:6:20","nodeType":"YulIdentifier","src":"9018:6:20"},"nativeSrc":"9018:114:20","nodeType":"YulFunctionCall","src":"9018:114:20"},"nativeSrc":"9015:140:20","nodeType":"YulIf","src":"9015:140:20"}]},"name":"checked_mul_t_int256","nativeSrc":"8606:556:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8636:1:20","nodeType":"YulTypedName","src":"8636:1:20","type":""},{"name":"y","nativeSrc":"8639:1:20","nodeType":"YulTypedName","src":"8639:1:20","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8645:7:20","nodeType":"YulTypedName","src":"8645:7:20","type":""}],"src":"8606:556:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC721_$1488_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC721_$1488_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC721_$1488_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC721_$1488__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC721_$1488_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function cleanup_t_uint80(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint80(value) {\n        if iszero(eq(value, cleanup_t_uint80(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint80_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint80(value)\n    }\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_int256(value) {\n        if iszero(eq(value, cleanup_t_int256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_mul_t_int256(x, y) -> product {\n        x := cleanup_t_int256(x)\n        y := cleanup_t_int256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_int256(product_raw)\n\n        // special case\n        if and(slt(x, 0), eq(y, 0x8000000000000000000000000000000000000000000000000000000000000000)) { panic_error_0x11() }\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, sdiv(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100915760003560e01c806380c7d5e11161005957806380c7d5e11461017e578063810b8145146101bb578063d56d229d146101f8578063d9af03ef14610223578063df82498c1461026057610091565b80631a8398d41461009657806352f5ad77146100b257806353a6b941146100db57806355eef30314610118578063779f770714610155575b600080fd5b6100b060048036038101906100ab9190610a91565b61029d565b005b3480156100be57600080fd5b506100d960048036038101906100d49190610ad1565b61061b565b005b3480156100e757600080fd5b5061010260048036038101906100fd9190610ad1565b61065e565b60405161010f9190610b19565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610a91565b61067e565b60405161014c9190610b43565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610b5e565b6106d9565b005b34801561018a57600080fd5b506101a560048036038101906101a09190610ad1565b610828565b6040516101b29190610b43565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190610a91565b610840565b6040516101ef9190610b43565b60405180910390f35b34801561020457600080fd5b5061020d610865565b60405161021a9190610bfd565b60405180910390f35b34801561022f57600080fd5b5061024a60048036038101906102459190610ad1565b610889565b6040516102579190610b43565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190610ad1565b6108d2565b6040516102949190610b19565b60405180910390f35b8173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161030d9190610b43565b602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610c2d565b73ffffffffffffffffffffffffffffffffffffffff161461039b576040517f6c8b88df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610425576040517fab09bb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020546104ab600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b036105e5576001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008273ffffffffffffffffffffffffffffffffffffffff16610556600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b60405161056290610c8b565b60006040518083038185875af1925050503d806000811461059f576040519150601f19603f3d011682016040523d82523d6000602084013e6105a4565b606091505b50509050806105df576040517f312585c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610617565b6040517ffb77229500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008111610713576040517f8209ab4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610748600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261092890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167f51991dac21fa3f9c470153885bded81e15400ea0307d507104bd32152aea965860405160405180910390a35050565b60036020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008061093483610964565b90506000670de0b6b3a7640000858361094d9190610ccf565b6109579190610d40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190610dfe565b505050915050670de0b6b3a7640000816109f09190610e79565b915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a28826109fd565b9050919050565b610a3881610a1d565b8114610a4357600080fd5b50565b600081359050610a5581610a2f565b92915050565b6000819050919050565b610a6e81610a5b565b8114610a7957600080fd5b50565b600081359050610a8b81610a65565b92915050565b60008060408385031215610aa857610aa76109f8565b5b6000610ab685828601610a46565b9250506020610ac785828601610a7c565b9150509250929050565b600060208284031215610ae757610ae66109f8565b5b6000610af584828501610a46565b91505092915050565b60008115159050919050565b610b1381610afe565b82525050565b6000602082019050610b2e6000830184610b0a565b92915050565b610b3d81610a5b565b82525050565b6000602082019050610b586000830184610b34565b92915050565b60008060408385031215610b7557610b746109f8565b5b6000610b8385828601610a7c565b9250506020610b9485828601610a7c565b9150509250929050565b6000819050919050565b6000610bc3610bbe610bb9846109fd565b610b9e565b6109fd565b9050919050565b6000610bd582610ba8565b9050919050565b6000610be782610bca565b9050919050565b610bf781610bdc565b82525050565b6000602082019050610c126000830184610bee565b92915050565b600081519050610c2781610a2f565b92915050565b600060208284031215610c4357610c426109f8565b5b6000610c5184828501610c18565b91505092915050565b600081905092915050565b50565b6000610c75600083610c5a565b9150610c8082610c65565b600082019050919050565b6000610c9682610c68565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cda82610a5b565b9150610ce583610a5b565b9250828202610cf381610a5b565b91508282048414831517610d0a57610d09610ca0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d4b82610a5b565b9150610d5683610a5b565b925082610d6657610d65610d11565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9081610d71565b8114610d9b57600080fd5b50565b600081519050610dad81610d87565b92915050565b6000819050919050565b610dc681610db3565b8114610dd157600080fd5b50565b600081519050610de381610dbd565b92915050565b600081519050610df881610a65565b92915050565b600080600080600060a08688031215610e1a57610e196109f8565b5b6000610e2888828901610d9e565b9550506020610e3988828901610dd4565b9450506040610e4a88828901610de9565b9350506060610e5b88828901610de9565b9250506080610e6c88828901610d9e565b9150509295509295909350565b6000610e8482610db3565b9150610e8f83610db3565b9250828202610e9d81610db3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ed557610ed4610ca0565b5b8282058414831517610eea57610ee9610ca0565b5b509291505056fea2646970667358221220473cd60ec302577a690a6577cad0b2835162c2c0c737cbb3bf4ff47cce655fc864736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80C7D5E1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x80C7D5E1 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x810B8145 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xD56D229D EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xD9AF03EF EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0xDF82498C EQ PUSH2 0x260 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x1A8398D4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x52F5AD77 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x53A6B941 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x55EEF303 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x779F7707 EQ PUSH2 0x155 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x828 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x865 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x245 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30D SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x39B JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C8B88DF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SUB PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAB09BB1400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4AB PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SUB PUSH2 0x5E5 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x556 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x562 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x312585C900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFB77229500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x713 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8209AB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x748 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x51991DAC21FA3F9C470153885BDED81E15400EA0307D507104BD32152AEA9658 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x934 DUP4 PUSH2 0x964 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 DUP4 PUSH2 0x94D SWAP2 SWAP1 PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x957 SWAP2 SWAP1 PUSH2 0xD40 JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9D6 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0xE79 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA28 DUP3 PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA38 DUP2 PUSH2 0xA1D JUMP JUMPDEST DUP2 EQ PUSH2 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA55 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA6E DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP2 EQ PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA8B DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA8 JUMPI PUSH2 0xAA7 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAB6 DUP6 DUP3 DUP7 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAC7 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE7 JUMPI PUSH2 0xAE6 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAF5 DUP5 DUP3 DUP6 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB13 DUP2 PUSH2 0xAFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB0A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB3D DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB34 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB74 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB94 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC3 PUSH2 0xBBE PUSH2 0xBB9 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD5 DUP3 PUSH2 0xBA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBE7 DUP3 PUSH2 0xBCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBF7 DUP2 PUSH2 0xBDC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC12 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBEE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xC27 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC43 JUMPI PUSH2 0xC42 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC51 DUP5 DUP3 DUP6 ADD PUSH2 0xC18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC75 PUSH1 0x0 DUP4 PUSH2 0xC5A JUMP JUMPDEST SWAP2 POP PUSH2 0xC80 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC96 DUP3 PUSH2 0xC68 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDA DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xCE5 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xCF3 DUP2 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xD0A JUMPI PUSH2 0xD09 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD4B DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xD56 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xD66 JUMPI PUSH2 0xD65 PUSH2 0xD11 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0xD71 JUMP JUMPDEST DUP2 EQ PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDAD DUP2 PUSH2 0xD87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDC6 DUP2 PUSH2 0xDB3 JUMP JUMPDEST DUP2 EQ PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDE3 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDF8 DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE1A JUMPI PUSH2 0xE19 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xE39 DUP9 DUP3 DUP10 ADD PUSH2 0xDD4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xE4A DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xE5B DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xE6C DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE84 DUP3 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH2 0xE8F DUP4 PUSH2 0xDB3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xE9D DUP2 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP5 EQ PUSH1 0x0 DUP5 SLT AND ISZERO PUSH2 0xED5 JUMPI PUSH2 0xED4 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SDIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xEEA JUMPI PUSH2 0xEE9 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE EXTCODECOPY 0xD6 0xE 0xC3 MUL JUMPI PUSH27 0x690A6577CAD0B2835162C2C0C737CBB3BF4FF47CCE655FC864736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"283:2653:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1598:790;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2394:122;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;899:48;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2546:153;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1241:351;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;953:51;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;815:78;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;429:26;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2823:111;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2705:112;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1598:790;1750:5;1715:40;;:11;;;;;;;;;;:19;;;1735:10;1715:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:40;;;1712:107;;1776:32;;;;;;;;;;;;;;1712:107;1915:4;1883:36;;:16;:28;1900:10;1883:28;;;;;;;;;;;;;;;;;;;;;;;;;:36;;;1880:106;;1941:34;;;;;;;;;;;;;;1880:106;2042:23;:30;2066:5;2042:30;;;;;;;;;;;;;;;:42;2073:10;2042:42;;;;;;;;;;;;1998:40;2026:11;;;;;;;;;;;1998:9;:27;;:40;;;;:::i;:::-;:86;1995:386;;2130:4;2099:16;:28;2116:10;2099:28;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;2149:12;2166:5;:10;;2185:40;2213:11;;;;;;;;;;;2185:9;:27;;:40;;;;:::i;:::-;2166:64;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2148:82;;;2247:7;2243:75;;2276:28;;;;;;;;;;;;;;2243:75;2085:244;1995:386;;;2350:31;;;;;;;;;;;;;;1995:386;1598:790;;:::o;2394:122::-;2489:19;2467:11;;:42;;;;;;;;;;;;;;;;;;2394:122;:::o;899:48::-;;;;;;;;;;;;;;;;;;;;;;:::o;2546:153::-;2625:7;2650:23;:30;2674:5;2650:30;;;;;;;;;;;;;;;:42;2681:10;2650:42;;;;;;;;;;;;2643:49;;2546:153;;;;:::o;1241:351::-;1328:1;1319:5;:10;1316:75;;1351:29;;;;;;;;;;;;;;1316:75;1450:36;1474:11;;;;;;;;;;;1450:5;:23;;:36;;;;:::i;:::-;1400:23;:35;1424:10;1400:35;;;;;;;;;;;;;;;:47;1436:10;1400:47;;;;;;;;;;;:86;;;;1527:10;1496:16;:28;1513:10;1496:28;;;;;;;;;;;;;;;:41;;;;1579:5;1568:10;1552:33;;;;;;;;;;;;1241:351;;:::o;953:51::-;;;;;;;;;;;;;;;;;:::o;815:78::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;429:26::-;;;;;;;;;;;;:::o;2823:111::-;2880:7;2905:16;:22;2922:4;2905:22;;;;;;;;;;;;;;;;2898:29;;2823:111;;;:::o;2705:112::-;2766:4;2788:16;:22;2805:4;2788:22;;;;;;;;;;;;;;;;;;;;;;;;;2781:29;;2705:112;;;:::o;585:259:19:-;686:7;704:16;723:19;732:9;723:8;:19::i;:::-;704:38;;752:22;802:4;789:9;778:8;:20;;;;:::i;:::-;777:29;;;;:::i;:::-;752:54;;823:14;816:21;;;;585:259;;;;:::o;268:279::-;342:7;455:12;474:9;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;453:48;;;;;;535:4;527:5;:12;;;;:::i;:::-;512:28;;;268:279;;;:::o;88:117:20:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:329::-;1736:6;1785:2;1773:9;1764:7;1760:23;1756:32;1753:119;;;1791:79;;:::i;:::-;1753:119;1911:1;1936:53;1981:7;1972:6;1961:9;1957:22;1936:53;:::i;:::-;1926:63;;1882:117;1677:329;;;;:::o;2012:90::-;2046:7;2089:5;2082:13;2075:21;2064:32;;2012:90;;;:::o;2108:109::-;2189:21;2204:5;2189:21;:::i;:::-;2184:3;2177:34;2108:109;;:::o;2223:210::-;2310:4;2348:2;2337:9;2333:18;2325:26;;2361:65;2423:1;2412:9;2408:17;2399:6;2361:65;:::i;:::-;2223:210;;;;:::o;2439:118::-;2526:24;2544:5;2526:24;:::i;:::-;2521:3;2514:37;2439:118;;:::o;2563:222::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2707:71;2775:1;2764:9;2760:17;2751:6;2707:71;:::i;:::-;2563:222;;;;:::o;2791:474::-;2859:6;2867;2916:2;2904:9;2895:7;2891:23;2887:32;2884:119;;;2922:79;;:::i;:::-;2884:119;3042:1;3067:53;3112:7;3103:6;3092:9;3088:22;3067:53;:::i;:::-;3057:63;;3013:117;3169:2;3195:53;3240:7;3231:6;3220:9;3216:22;3195:53;:::i;:::-;3185:63;;3140:118;2791:474;;;;;:::o;3271:60::-;3299:3;3320:5;3313:12;;3271:60;;;:::o;3337:142::-;3387:9;3420:53;3438:34;3447:24;3465:5;3447:24;:::i;:::-;3438:34;:::i;:::-;3420:53;:::i;:::-;3407:66;;3337:142;;;:::o;3485:126::-;3535:9;3568:37;3599:5;3568:37;:::i;:::-;3555:50;;3485:126;;;:::o;3617:142::-;3683:9;3716:37;3747:5;3716:37;:::i;:::-;3703:50;;3617:142;;;:::o;3765:163::-;3868:53;3915:5;3868:53;:::i;:::-;3863:3;3856:66;3765:163;;:::o;3934:254::-;4043:4;4081:2;4070:9;4066:18;4058:26;;4094:87;4178:1;4167:9;4163:17;4154:6;4094:87;:::i;:::-;3934:254;;;;:::o;4194:143::-;4251:5;4282:6;4276:13;4267:22;;4298:33;4325:5;4298:33;:::i;:::-;4194:143;;;;:::o;4343:351::-;4413:6;4462:2;4450:9;4441:7;4437:23;4433:32;4430:119;;;4468:79;;:::i;:::-;4430:119;4588:1;4613:64;4669:7;4660:6;4649:9;4645:22;4613:64;:::i;:::-;4603:74;;4559:128;4343:351;;;;:::o;4700:147::-;4801:11;4838:3;4823:18;;4700:147;;;;:::o;4853:114::-;;:::o;4973:398::-;5132:3;5153:83;5234:1;5229:3;5153:83;:::i;:::-;5146:90;;5245:93;5334:3;5245:93;:::i;:::-;5363:1;5358:3;5354:11;5347:18;;4973:398;;;:::o;5377:379::-;5561:3;5583:147;5726:3;5583:147;:::i;:::-;5576:154;;5747:3;5740:10;;5377:379;;;:::o;5762:180::-;5810:77;5807:1;5800:88;5907:4;5904:1;5897:15;5931:4;5928:1;5921:15;5948:410;5988:7;6011:20;6029:1;6011:20;:::i;:::-;6006:25;;6045:20;6063:1;6045:20;:::i;:::-;6040:25;;6100:1;6097;6093:9;6122:30;6140:11;6122:30;:::i;:::-;6111:41;;6301:1;6292:7;6288:15;6285:1;6282:22;6262:1;6255:9;6235:83;6212:139;;6331:18;;:::i;:::-;6212:139;5996:362;5948:410;;;;:::o;6364:180::-;6412:77;6409:1;6402:88;6509:4;6506:1;6499:15;6533:4;6530:1;6523:15;6550:185;6590:1;6607:20;6625:1;6607:20;:::i;:::-;6602:25;;6641:20;6659:1;6641:20;:::i;:::-;6636:25;;6680:1;6670:35;;6685:18;;:::i;:::-;6670:35;6727:1;6724;6720:9;6715:14;;6550:185;;;;:::o;6741:105::-;6777:7;6817:22;6810:5;6806:34;6795:45;;6741:105;;;:::o;6852:120::-;6924:23;6941:5;6924:23;:::i;:::-;6917:5;6914:34;6904:62;;6962:1;6959;6952:12;6904:62;6852:120;:::o;6978:141::-;7034:5;7065:6;7059:13;7050:22;;7081:32;7107:5;7081:32;:::i;:::-;6978:141;;;;:::o;7125:76::-;7161:7;7190:5;7179:16;;7125:76;;;:::o;7207:120::-;7279:23;7296:5;7279:23;:::i;:::-;7272:5;7269:34;7259:62;;7317:1;7314;7307:12;7259:62;7207:120;:::o;7333:141::-;7389:5;7420:6;7414:13;7405:22;;7436:32;7462:5;7436:32;:::i;:::-;7333:141;;;;:::o;7480:143::-;7537:5;7568:6;7562:13;7553:22;;7584:33;7611:5;7584:33;:::i;:::-;7480:143;;;;:::o;7629:971::-;7732:6;7740;7748;7756;7764;7813:3;7801:9;7792:7;7788:23;7784:33;7781:120;;;7820:79;;:::i;:::-;7781:120;7940:1;7965:63;8020:7;8011:6;8000:9;7996:22;7965:63;:::i;:::-;7955:73;;7911:127;8077:2;8103:63;8158:7;8149:6;8138:9;8134:22;8103:63;:::i;:::-;8093:73;;8048:128;8215:2;8241:64;8297:7;8288:6;8277:9;8273:22;8241:64;:::i;:::-;8231:74;;8186:129;8354:2;8380:64;8436:7;8427:6;8416:9;8412:22;8380:64;:::i;:::-;8370:74;;8325:129;8493:3;8520:63;8575:7;8566:6;8555:9;8551:22;8520:63;:::i;:::-;8510:73;;8464:129;7629:971;;;;;;;;:::o;8606:556::-;8645:7;8668:19;8685:1;8668:19;:::i;:::-;8663:24;;8701:19;8718:1;8701:19;:::i;:::-;8696:24;;8755:1;8752;8748:9;8777:29;8794:11;8777:29;:::i;:::-;8766:40;;8864:66;8861:1;8858:73;8854:1;8851;8847:9;8843:89;8840:115;;;8935:18;;:::i;:::-;8840:115;9105:1;9096:7;9091:16;9088:1;9085:23;9065:1;9058:9;9038:84;9015:140;;9135:18;;:::i;:::-;9015:140;8653:509;8606:556;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"775800","executionCost":"infinite","totalCost":"infinite"},"external":{"addressToContent(address)":"2814","addressToContentToPrice(address,uint256)":"infinite","buyContent(address,uint256)":"infinite","contentPurchased(address)":"2890","getContentAccess(address)":"2971","getContentId(address)":"2907","getContentPrice(address,uint256)":"infinite","nftContract()":"infinite","setContentPrice(uint256,uint256)":"infinite","setNftContract(address)":"24745"}},"methodIdentifiers":{"addressToContent(address)":"80c7d5e1","addressToContentToPrice(address,uint256)":"810b8145","buyContent(address,uint256)":"1a8398d4","contentPurchased(address)":"53a6b941","getContentAccess(address)":"df82498c","getContentId(address)":"d9af03ef","getContentPrice(address,uint256)":"55eef303","nftContract()":"d56d229d","setContentPrice(uint256,uint256)":"779f7707","setNftContract(address)":"52f5ad77"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Content__ContentAlreadyPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Content__ContentIdDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Content__ContentPurchaseError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Content__PriceMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Content__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ContentPriceSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToContent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToContentToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"}],\"name\":\"buyContent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getContentAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getContentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"}],\"name\":\"getContentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setContentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"setNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Content.sol\":\"Content\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Content.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {PriceConvertor} from \\\"./PriceConvertor.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Content{\\n    //set the price of a content using content id\\n    //buy content\\n    //allow users to access content only when purchased\\n    IERC721 public nftContract;\\n\\n    using PriceConvertor for uint256;\\n\\n    //errors\\n    error Content__PriceMustNotBeZero();\\n    error Content__ContentAlreadyPurchased();\\n    error Content__TransactionFailed();\\n    error Content__ContentPurchaseError();\\n    error Content__ContentIdDoesNotExist();\\n\\n    //events\\n    event ContentPriceSet(address indexed owner,uint256 indexed price);\\n\\n    mapping(address => mapping(uint256 => uint256)) public addressToContentToPrice;\\n    mapping(address => bool) public contentPurchased;\\n    mapping(address => uint256) public addressToContent;\\n    \\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeed,address nftContractAddress){\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        nftContract = IERC721(nftContractAddress);\\n    }\\n\\n    function setContentPrice(uint256 content_id,uint256 price) public{\\n        if(price <= 0){\\n            revert Content__PriceMustNotBeZero();\\n        }\\n        addressToContentToPrice[msg.sender][content_id] = price.getConversionRate(s_priceFeed);\\n        addressToContent[msg.sender] = content_id;\\n        emit ContentPriceSet(msg.sender,price);\\n    }\\n\\n    function buyContent(address owner,uint256 content_id) public payable{\\n        //check if content id exist\\n        if(nftContract.ownerOf(content_id) != owner){\\n           revert Content__ContentIdDoesNotExist();\\n        }\\n        //check if the content is already purchased\\n        if(contentPurchased[msg.sender] == true){\\n            revert Content__ContentAlreadyPurchased();\\n        }\\n        if(msg.value.getConversionRate(s_priceFeed) == addressToContentToPrice[owner][content_id]){\\n            contentPurchased[msg.sender] = true;\\n            (bool success,) = owner.call{value : msg.value.getConversionRate(s_priceFeed)}(\\\"\\\");\\n           if(!success){\\n            revert Content__TransactionFailed();\\n           } \\n        }\\n        else revert Content__ContentPurchaseError();\\n    }\\n\\n    function setNftContract(address _nftContractAddress) external {\\n         nftContract = IERC721(_nftContractAddress);\\n    }\\n\\n\\n    //getter functions\\n    function getContentPrice(address owner,uint256 content_id) public view returns(uint256){\\n        return addressToContentToPrice[owner][content_id];\\n    }\\n\\n    function getContentAccess(address user) public view returns (bool){\\n        return contentPurchased[user];\\n    }\\n\\n    function getContentId(address user) public view returns (uint256){\\n        return addressToContent[user];\\n    }\\n}\",\"keccak256\":\"0xc5f1bc00a1db44ea59d1c9bb784d7886b68e0710b32de5578d137e9071ed3e5e\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n \\npragma solidity ^0.8.18;\\n\\n//import contract ABI from github\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor{\\n    //function to get pricefeed\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        //get latest price feed\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\n\\n        return uint256(price * 1e18);\\n    }\\n\\n    //convert eth amount to usd\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n    //function to getversion\\n    function getVersion() internal view returns(uint256){\\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\\n    }\\n} \",\"keccak256\":\"0xcc50d53f23b46ca2c1a593cca0c009d651b65e1906b85ab9db9aeb7d525c61d8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3150,"contract":"contracts/Content.sol:Content","label":"nftContract","offset":0,"slot":"0","type":"t_contract(IERC721)1488"},{"astId":3175,"contract":"contracts/Content.sol:Content","label":"addressToContentToPrice","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":3179,"contract":"contracts/Content.sol:Content","label":"contentPurchased","offset":0,"slot":"2","type":"t_mapping(t_address,t_bool)"},{"astId":3183,"contract":"contracts/Content.sol:Content","label":"addressToContent","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":3186,"contract":"contracts/Content.sol:Content","label":"s_priceFeed","offset":0,"slot":"4","type":"t_contract(AggregatorV3Interface)45"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(AggregatorV3Interface)45":{"encoding":"inplace","label":"contract AggregatorV3Interface","numberOfBytes":"20"},"t_contract(IERC721)1488":{"encoding":"inplace","label":"contract IERC721","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/NFT.sol":{"Nft":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address","name":"contentContractAddress","type":"address"},{"internalType":"address","name":"priceFeed","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contentContract","outputs":[{"internalType":"contract Content","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNftFeed","outputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"image","type":"string"},{"internalType":"address","name":"creator","type":"address"}],"internalType":"struct Nft.NftData[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"getNftPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nftFeed","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"image","type":"string"},{"internalType":"address","name":"creator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nftsMinted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nftsOwned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3452":{"entryPoint":null,"id":3452,"parameterSlots":5,"returnSlots":0},"@_432":{"entryPoint":null,"id":432,"parameterSlots":2,"returnSlots":0},"@_96":{"entryPoint":null,"id":96,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_192":{"entryPoint":345,"id":192,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":817,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1002,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":883,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_address_fromMemory":{"entryPoint":1023,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1957,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1972,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":1999,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":699,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":556,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":726,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1309,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1202,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1606,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":961,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":929,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1441,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1571,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1461,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1747,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":775,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1330,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1260,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1719,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":650,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":1451,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1689,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":1213,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":603,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1495,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":576,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":581,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":571,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":566,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":586,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1346,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1676,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1547,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1359,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1505,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":979,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1542,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:10247:20","nodeType":"YulBlock","src":"0:10247:20","statements":[{"body":{"nativeSrc":"47:35:20","nodeType":"YulBlock","src":"47:35:20","statements":[{"nativeSrc":"57:19:20","nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:20","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:20","nodeType":"YulIdentifier","src":"67:5:20"},"nativeSrc":"67:9:20","nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:20","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:20","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nativeSrc":"177:28:20","nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:20","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:20","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:20","nodeType":"YulIdentifier","src":"187:6:20"},"nativeSrc":"187:12:20","nodeType":"YulFunctionCall","src":"187:12:20"},"nativeSrc":"187:12:20","nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:20","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nativeSrc":"300:28:20","nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:20","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:20","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:20","nodeType":"YulIdentifier","src":"310:6:20"},"nativeSrc":"310:12:20","nodeType":"YulFunctionCall","src":"310:12:20"},"nativeSrc":"310:12:20","nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:20","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nativeSrc":"423:28:20","nodeType":"YulBlock","src":"423:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"440:1:20","nodeType":"YulLiteral","src":"440:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"443:1:20","nodeType":"YulLiteral","src":"443:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"433:6:20","nodeType":"YulIdentifier","src":"433:6:20"},"nativeSrc":"433:12:20","nodeType":"YulFunctionCall","src":"433:12:20"},"nativeSrc":"433:12:20","nodeType":"YulExpressionStatement","src":"433:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"334:117:20","nodeType":"YulFunctionDefinition","src":"334:117:20"},{"body":{"nativeSrc":"546:28:20","nodeType":"YulBlock","src":"546:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"563:1:20","nodeType":"YulLiteral","src":"563:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"566:1:20","nodeType":"YulLiteral","src":"566:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"556:6:20","nodeType":"YulIdentifier","src":"556:6:20"},"nativeSrc":"556:12:20","nodeType":"YulFunctionCall","src":"556:12:20"},"nativeSrc":"556:12:20","nodeType":"YulExpressionStatement","src":"556:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"457:117:20","nodeType":"YulFunctionDefinition","src":"457:117:20"},{"body":{"nativeSrc":"628:54:20","nodeType":"YulBlock","src":"628:54:20","statements":[{"nativeSrc":"638:38:20","nodeType":"YulAssignment","src":"638:38:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"656:5:20","nodeType":"YulIdentifier","src":"656:5:20"},{"kind":"number","nativeSrc":"663:2:20","nodeType":"YulLiteral","src":"663:2:20","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"652:3:20","nodeType":"YulIdentifier","src":"652:3:20"},"nativeSrc":"652:14:20","nodeType":"YulFunctionCall","src":"652:14:20"},{"arguments":[{"kind":"number","nativeSrc":"672:2:20","nodeType":"YulLiteral","src":"672:2:20","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"668:3:20","nodeType":"YulIdentifier","src":"668:3:20"},"nativeSrc":"668:7:20","nodeType":"YulFunctionCall","src":"668:7:20"}],"functionName":{"name":"and","nativeSrc":"648:3:20","nodeType":"YulIdentifier","src":"648:3:20"},"nativeSrc":"648:28:20","nodeType":"YulFunctionCall","src":"648:28:20"},"variableNames":[{"name":"result","nativeSrc":"638:6:20","nodeType":"YulIdentifier","src":"638:6:20"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"580:102:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"611:5:20","nodeType":"YulTypedName","src":"611:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"621:6:20","nodeType":"YulTypedName","src":"621:6:20","type":""}],"src":"580:102:20"},{"body":{"nativeSrc":"716:152:20","nodeType":"YulBlock","src":"716:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"733:1:20","nodeType":"YulLiteral","src":"733:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"736:77:20","nodeType":"YulLiteral","src":"736:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"726:6:20","nodeType":"YulIdentifier","src":"726:6:20"},"nativeSrc":"726:88:20","nodeType":"YulFunctionCall","src":"726:88:20"},"nativeSrc":"726:88:20","nodeType":"YulExpressionStatement","src":"726:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"830:1:20","nodeType":"YulLiteral","src":"830:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"833:4:20","nodeType":"YulLiteral","src":"833:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"823:6:20","nodeType":"YulIdentifier","src":"823:6:20"},"nativeSrc":"823:15:20","nodeType":"YulFunctionCall","src":"823:15:20"},"nativeSrc":"823:15:20","nodeType":"YulExpressionStatement","src":"823:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"854:1:20","nodeType":"YulLiteral","src":"854:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"857:4:20","nodeType":"YulLiteral","src":"857:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"847:6:20","nodeType":"YulIdentifier","src":"847:6:20"},"nativeSrc":"847:15:20","nodeType":"YulFunctionCall","src":"847:15:20"},"nativeSrc":"847:15:20","nodeType":"YulExpressionStatement","src":"847:15:20"}]},"name":"panic_error_0x41","nativeSrc":"688:180:20","nodeType":"YulFunctionDefinition","src":"688:180:20"},{"body":{"nativeSrc":"917:238:20","nodeType":"YulBlock","src":"917:238:20","statements":[{"nativeSrc":"927:58:20","nodeType":"YulVariableDeclaration","src":"927:58:20","value":{"arguments":[{"name":"memPtr","nativeSrc":"949:6:20","nodeType":"YulIdentifier","src":"949:6:20"},{"arguments":[{"name":"size","nativeSrc":"979:4:20","nodeType":"YulIdentifier","src":"979:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"957:21:20","nodeType":"YulIdentifier","src":"957:21:20"},"nativeSrc":"957:27:20","nodeType":"YulFunctionCall","src":"957:27:20"}],"functionName":{"name":"add","nativeSrc":"945:3:20","nodeType":"YulIdentifier","src":"945:3:20"},"nativeSrc":"945:40:20","nodeType":"YulFunctionCall","src":"945:40:20"},"variables":[{"name":"newFreePtr","nativeSrc":"931:10:20","nodeType":"YulTypedName","src":"931:10:20","type":""}]},{"body":{"nativeSrc":"1096:22:20","nodeType":"YulBlock","src":"1096:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1098:16:20","nodeType":"YulIdentifier","src":"1098:16:20"},"nativeSrc":"1098:18:20","nodeType":"YulFunctionCall","src":"1098:18:20"},"nativeSrc":"1098:18:20","nodeType":"YulExpressionStatement","src":"1098:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1039:10:20","nodeType":"YulIdentifier","src":"1039:10:20"},{"kind":"number","nativeSrc":"1051:18:20","nodeType":"YulLiteral","src":"1051:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1036:2:20","nodeType":"YulIdentifier","src":"1036:2:20"},"nativeSrc":"1036:34:20","nodeType":"YulFunctionCall","src":"1036:34:20"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1075:10:20","nodeType":"YulIdentifier","src":"1075:10:20"},{"name":"memPtr","nativeSrc":"1087:6:20","nodeType":"YulIdentifier","src":"1087:6:20"}],"functionName":{"name":"lt","nativeSrc":"1072:2:20","nodeType":"YulIdentifier","src":"1072:2:20"},"nativeSrc":"1072:22:20","nodeType":"YulFunctionCall","src":"1072:22:20"}],"functionName":{"name":"or","nativeSrc":"1033:2:20","nodeType":"YulIdentifier","src":"1033:2:20"},"nativeSrc":"1033:62:20","nodeType":"YulFunctionCall","src":"1033:62:20"},"nativeSrc":"1030:88:20","nodeType":"YulIf","src":"1030:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1134:2:20","nodeType":"YulLiteral","src":"1134:2:20","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1138:10:20","nodeType":"YulIdentifier","src":"1138:10:20"}],"functionName":{"name":"mstore","nativeSrc":"1127:6:20","nodeType":"YulIdentifier","src":"1127:6:20"},"nativeSrc":"1127:22:20","nodeType":"YulFunctionCall","src":"1127:22:20"},"nativeSrc":"1127:22:20","nodeType":"YulExpressionStatement","src":"1127:22:20"}]},"name":"finalize_allocation","nativeSrc":"874:281:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"903:6:20","nodeType":"YulTypedName","src":"903:6:20","type":""},{"name":"size","nativeSrc":"911:4:20","nodeType":"YulTypedName","src":"911:4:20","type":""}],"src":"874:281:20"},{"body":{"nativeSrc":"1202:88:20","nodeType":"YulBlock","src":"1202:88:20","statements":[{"nativeSrc":"1212:30:20","nodeType":"YulAssignment","src":"1212:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1222:18:20","nodeType":"YulIdentifier","src":"1222:18:20"},"nativeSrc":"1222:20:20","nodeType":"YulFunctionCall","src":"1222:20:20"},"variableNames":[{"name":"memPtr","nativeSrc":"1212:6:20","nodeType":"YulIdentifier","src":"1212:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1271:6:20","nodeType":"YulIdentifier","src":"1271:6:20"},{"name":"size","nativeSrc":"1279:4:20","nodeType":"YulIdentifier","src":"1279:4:20"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1251:19:20","nodeType":"YulIdentifier","src":"1251:19:20"},"nativeSrc":"1251:33:20","nodeType":"YulFunctionCall","src":"1251:33:20"},"nativeSrc":"1251:33:20","nodeType":"YulExpressionStatement","src":"1251:33:20"}]},"name":"allocate_memory","nativeSrc":"1161:129:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1186:4:20","nodeType":"YulTypedName","src":"1186:4:20","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1195:6:20","nodeType":"YulTypedName","src":"1195:6:20","type":""}],"src":"1161:129:20"},{"body":{"nativeSrc":"1363:241:20","nodeType":"YulBlock","src":"1363:241:20","statements":[{"body":{"nativeSrc":"1468:22:20","nodeType":"YulBlock","src":"1468:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1470:16:20","nodeType":"YulIdentifier","src":"1470:16:20"},"nativeSrc":"1470:18:20","nodeType":"YulFunctionCall","src":"1470:18:20"},"nativeSrc":"1470:18:20","nodeType":"YulExpressionStatement","src":"1470:18:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1440:6:20","nodeType":"YulIdentifier","src":"1440:6:20"},{"kind":"number","nativeSrc":"1448:18:20","nodeType":"YulLiteral","src":"1448:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1437:2:20","nodeType":"YulIdentifier","src":"1437:2:20"},"nativeSrc":"1437:30:20","nodeType":"YulFunctionCall","src":"1437:30:20"},"nativeSrc":"1434:56:20","nodeType":"YulIf","src":"1434:56:20"},{"nativeSrc":"1500:37:20","nodeType":"YulAssignment","src":"1500:37:20","value":{"arguments":[{"name":"length","nativeSrc":"1530:6:20","nodeType":"YulIdentifier","src":"1530:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1508:21:20","nodeType":"YulIdentifier","src":"1508:21:20"},"nativeSrc":"1508:29:20","nodeType":"YulFunctionCall","src":"1508:29:20"},"variableNames":[{"name":"size","nativeSrc":"1500:4:20","nodeType":"YulIdentifier","src":"1500:4:20"}]},{"nativeSrc":"1574:23:20","nodeType":"YulAssignment","src":"1574:23:20","value":{"arguments":[{"name":"size","nativeSrc":"1586:4:20","nodeType":"YulIdentifier","src":"1586:4:20"},{"kind":"number","nativeSrc":"1592:4:20","nodeType":"YulLiteral","src":"1592:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1582:3:20","nodeType":"YulIdentifier","src":"1582:3:20"},"nativeSrc":"1582:15:20","nodeType":"YulFunctionCall","src":"1582:15:20"},"variableNames":[{"name":"size","nativeSrc":"1574:4:20","nodeType":"YulIdentifier","src":"1574:4:20"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1296:308:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1347:6:20","nodeType":"YulTypedName","src":"1347:6:20","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1358:4:20","nodeType":"YulTypedName","src":"1358:4:20","type":""}],"src":"1296:308:20"},{"body":{"nativeSrc":"1672:186:20","nodeType":"YulBlock","src":"1672:186:20","statements":[{"nativeSrc":"1683:10:20","nodeType":"YulVariableDeclaration","src":"1683:10:20","value":{"kind":"number","nativeSrc":"1692:1:20","nodeType":"YulLiteral","src":"1692:1:20","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1687:1:20","nodeType":"YulTypedName","src":"1687:1:20","type":""}]},{"body":{"nativeSrc":"1752:63:20","nodeType":"YulBlock","src":"1752:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1777:3:20","nodeType":"YulIdentifier","src":"1777:3:20"},{"name":"i","nativeSrc":"1782:1:20","nodeType":"YulIdentifier","src":"1782:1:20"}],"functionName":{"name":"add","nativeSrc":"1773:3:20","nodeType":"YulIdentifier","src":"1773:3:20"},"nativeSrc":"1773:11:20","nodeType":"YulFunctionCall","src":"1773:11:20"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1796:3:20","nodeType":"YulIdentifier","src":"1796:3:20"},{"name":"i","nativeSrc":"1801:1:20","nodeType":"YulIdentifier","src":"1801:1:20"}],"functionName":{"name":"add","nativeSrc":"1792:3:20","nodeType":"YulIdentifier","src":"1792:3:20"},"nativeSrc":"1792:11:20","nodeType":"YulFunctionCall","src":"1792:11:20"}],"functionName":{"name":"mload","nativeSrc":"1786:5:20","nodeType":"YulIdentifier","src":"1786:5:20"},"nativeSrc":"1786:18:20","nodeType":"YulFunctionCall","src":"1786:18:20"}],"functionName":{"name":"mstore","nativeSrc":"1766:6:20","nodeType":"YulIdentifier","src":"1766:6:20"},"nativeSrc":"1766:39:20","nodeType":"YulFunctionCall","src":"1766:39:20"},"nativeSrc":"1766:39:20","nodeType":"YulExpressionStatement","src":"1766:39:20"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1713:1:20","nodeType":"YulIdentifier","src":"1713:1:20"},{"name":"length","nativeSrc":"1716:6:20","nodeType":"YulIdentifier","src":"1716:6:20"}],"functionName":{"name":"lt","nativeSrc":"1710:2:20","nodeType":"YulIdentifier","src":"1710:2:20"},"nativeSrc":"1710:13:20","nodeType":"YulFunctionCall","src":"1710:13:20"},"nativeSrc":"1702:113:20","nodeType":"YulForLoop","post":{"nativeSrc":"1724:19:20","nodeType":"YulBlock","src":"1724:19:20","statements":[{"nativeSrc":"1726:15:20","nodeType":"YulAssignment","src":"1726:15:20","value":{"arguments":[{"name":"i","nativeSrc":"1735:1:20","nodeType":"YulIdentifier","src":"1735:1:20"},{"kind":"number","nativeSrc":"1738:2:20","nodeType":"YulLiteral","src":"1738:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1731:3:20","nodeType":"YulIdentifier","src":"1731:3:20"},"nativeSrc":"1731:10:20","nodeType":"YulFunctionCall","src":"1731:10:20"},"variableNames":[{"name":"i","nativeSrc":"1726:1:20","nodeType":"YulIdentifier","src":"1726:1:20"}]}]},"pre":{"nativeSrc":"1706:3:20","nodeType":"YulBlock","src":"1706:3:20","statements":[]},"src":"1702:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1835:3:20","nodeType":"YulIdentifier","src":"1835:3:20"},{"name":"length","nativeSrc":"1840:6:20","nodeType":"YulIdentifier","src":"1840:6:20"}],"functionName":{"name":"add","nativeSrc":"1831:3:20","nodeType":"YulIdentifier","src":"1831:3:20"},"nativeSrc":"1831:16:20","nodeType":"YulFunctionCall","src":"1831:16:20"},{"kind":"number","nativeSrc":"1849:1:20","nodeType":"YulLiteral","src":"1849:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1824:6:20","nodeType":"YulIdentifier","src":"1824:6:20"},"nativeSrc":"1824:27:20","nodeType":"YulFunctionCall","src":"1824:27:20"},"nativeSrc":"1824:27:20","nodeType":"YulExpressionStatement","src":"1824:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1610:248:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1654:3:20","nodeType":"YulTypedName","src":"1654:3:20","type":""},{"name":"dst","nativeSrc":"1659:3:20","nodeType":"YulTypedName","src":"1659:3:20","type":""},{"name":"length","nativeSrc":"1664:6:20","nodeType":"YulTypedName","src":"1664:6:20","type":""}],"src":"1610:248:20"},{"body":{"nativeSrc":"1959:339:20","nodeType":"YulBlock","src":"1959:339:20","statements":[{"nativeSrc":"1969:75:20","nodeType":"YulAssignment","src":"1969:75:20","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2036:6:20","nodeType":"YulIdentifier","src":"2036:6:20"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1994:41:20","nodeType":"YulIdentifier","src":"1994:41:20"},"nativeSrc":"1994:49:20","nodeType":"YulFunctionCall","src":"1994:49:20"}],"functionName":{"name":"allocate_memory","nativeSrc":"1978:15:20","nodeType":"YulIdentifier","src":"1978:15:20"},"nativeSrc":"1978:66:20","nodeType":"YulFunctionCall","src":"1978:66:20"},"variableNames":[{"name":"array","nativeSrc":"1969:5:20","nodeType":"YulIdentifier","src":"1969:5:20"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2060:5:20","nodeType":"YulIdentifier","src":"2060:5:20"},{"name":"length","nativeSrc":"2067:6:20","nodeType":"YulIdentifier","src":"2067:6:20"}],"functionName":{"name":"mstore","nativeSrc":"2053:6:20","nodeType":"YulIdentifier","src":"2053:6:20"},"nativeSrc":"2053:21:20","nodeType":"YulFunctionCall","src":"2053:21:20"},"nativeSrc":"2053:21:20","nodeType":"YulExpressionStatement","src":"2053:21:20"},{"nativeSrc":"2083:27:20","nodeType":"YulVariableDeclaration","src":"2083:27:20","value":{"arguments":[{"name":"array","nativeSrc":"2098:5:20","nodeType":"YulIdentifier","src":"2098:5:20"},{"kind":"number","nativeSrc":"2105:4:20","nodeType":"YulLiteral","src":"2105:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2094:3:20","nodeType":"YulIdentifier","src":"2094:3:20"},"nativeSrc":"2094:16:20","nodeType":"YulFunctionCall","src":"2094:16:20"},"variables":[{"name":"dst","nativeSrc":"2087:3:20","nodeType":"YulTypedName","src":"2087:3:20","type":""}]},{"body":{"nativeSrc":"2148:83:20","nodeType":"YulBlock","src":"2148:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2150:77:20","nodeType":"YulIdentifier","src":"2150:77:20"},"nativeSrc":"2150:79:20","nodeType":"YulFunctionCall","src":"2150:79:20"},"nativeSrc":"2150:79:20","nodeType":"YulExpressionStatement","src":"2150:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2129:3:20","nodeType":"YulIdentifier","src":"2129:3:20"},{"name":"length","nativeSrc":"2134:6:20","nodeType":"YulIdentifier","src":"2134:6:20"}],"functionName":{"name":"add","nativeSrc":"2125:3:20","nodeType":"YulIdentifier","src":"2125:3:20"},"nativeSrc":"2125:16:20","nodeType":"YulFunctionCall","src":"2125:16:20"},{"name":"end","nativeSrc":"2143:3:20","nodeType":"YulIdentifier","src":"2143:3:20"}],"functionName":{"name":"gt","nativeSrc":"2122:2:20","nodeType":"YulIdentifier","src":"2122:2:20"},"nativeSrc":"2122:25:20","nodeType":"YulFunctionCall","src":"2122:25:20"},"nativeSrc":"2119:112:20","nodeType":"YulIf","src":"2119:112:20"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2275:3:20","nodeType":"YulIdentifier","src":"2275:3:20"},{"name":"dst","nativeSrc":"2280:3:20","nodeType":"YulIdentifier","src":"2280:3:20"},{"name":"length","nativeSrc":"2285:6:20","nodeType":"YulIdentifier","src":"2285:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2240:34:20","nodeType":"YulIdentifier","src":"2240:34:20"},"nativeSrc":"2240:52:20","nodeType":"YulFunctionCall","src":"2240:52:20"},"nativeSrc":"2240:52:20","nodeType":"YulExpressionStatement","src":"2240:52:20"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"1864:434:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1932:3:20","nodeType":"YulTypedName","src":"1932:3:20","type":""},{"name":"length","nativeSrc":"1937:6:20","nodeType":"YulTypedName","src":"1937:6:20","type":""},{"name":"end","nativeSrc":"1945:3:20","nodeType":"YulTypedName","src":"1945:3:20","type":""}],"returnVariables":[{"name":"array","nativeSrc":"1953:5:20","nodeType":"YulTypedName","src":"1953:5:20","type":""}],"src":"1864:434:20"},{"body":{"nativeSrc":"2391:282:20","nodeType":"YulBlock","src":"2391:282:20","statements":[{"body":{"nativeSrc":"2440:83:20","nodeType":"YulBlock","src":"2440:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2442:77:20","nodeType":"YulIdentifier","src":"2442:77:20"},"nativeSrc":"2442:79:20","nodeType":"YulFunctionCall","src":"2442:79:20"},"nativeSrc":"2442:79:20","nodeType":"YulExpressionStatement","src":"2442:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2419:6:20","nodeType":"YulIdentifier","src":"2419:6:20"},{"kind":"number","nativeSrc":"2427:4:20","nodeType":"YulLiteral","src":"2427:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2415:3:20","nodeType":"YulIdentifier","src":"2415:3:20"},"nativeSrc":"2415:17:20","nodeType":"YulFunctionCall","src":"2415:17:20"},{"name":"end","nativeSrc":"2434:3:20","nodeType":"YulIdentifier","src":"2434:3:20"}],"functionName":{"name":"slt","nativeSrc":"2411:3:20","nodeType":"YulIdentifier","src":"2411:3:20"},"nativeSrc":"2411:27:20","nodeType":"YulFunctionCall","src":"2411:27:20"}],"functionName":{"name":"iszero","nativeSrc":"2404:6:20","nodeType":"YulIdentifier","src":"2404:6:20"},"nativeSrc":"2404:35:20","nodeType":"YulFunctionCall","src":"2404:35:20"},"nativeSrc":"2401:122:20","nodeType":"YulIf","src":"2401:122:20"},{"nativeSrc":"2532:27:20","nodeType":"YulVariableDeclaration","src":"2532:27:20","value":{"arguments":[{"name":"offset","nativeSrc":"2552:6:20","nodeType":"YulIdentifier","src":"2552:6:20"}],"functionName":{"name":"mload","nativeSrc":"2546:5:20","nodeType":"YulIdentifier","src":"2546:5:20"},"nativeSrc":"2546:13:20","nodeType":"YulFunctionCall","src":"2546:13:20"},"variables":[{"name":"length","nativeSrc":"2536:6:20","nodeType":"YulTypedName","src":"2536:6:20","type":""}]},{"nativeSrc":"2568:99:20","nodeType":"YulAssignment","src":"2568:99:20","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2640:6:20","nodeType":"YulIdentifier","src":"2640:6:20"},{"kind":"number","nativeSrc":"2648:4:20","nodeType":"YulLiteral","src":"2648:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2636:3:20","nodeType":"YulIdentifier","src":"2636:3:20"},"nativeSrc":"2636:17:20","nodeType":"YulFunctionCall","src":"2636:17:20"},{"name":"length","nativeSrc":"2655:6:20","nodeType":"YulIdentifier","src":"2655:6:20"},{"name":"end","nativeSrc":"2663:3:20","nodeType":"YulIdentifier","src":"2663:3:20"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"2577:58:20","nodeType":"YulIdentifier","src":"2577:58:20"},"nativeSrc":"2577:90:20","nodeType":"YulFunctionCall","src":"2577:90:20"},"variableNames":[{"name":"array","nativeSrc":"2568:5:20","nodeType":"YulIdentifier","src":"2568:5:20"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"2318:355:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2369:6:20","nodeType":"YulTypedName","src":"2369:6:20","type":""},{"name":"end","nativeSrc":"2377:3:20","nodeType":"YulTypedName","src":"2377:3:20","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2385:5:20","nodeType":"YulTypedName","src":"2385:5:20","type":""}],"src":"2318:355:20"},{"body":{"nativeSrc":"2724:81:20","nodeType":"YulBlock","src":"2724:81:20","statements":[{"nativeSrc":"2734:65:20","nodeType":"YulAssignment","src":"2734:65:20","value":{"arguments":[{"name":"value","nativeSrc":"2749:5:20","nodeType":"YulIdentifier","src":"2749:5:20"},{"kind":"number","nativeSrc":"2756:42:20","nodeType":"YulLiteral","src":"2756:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2745:3:20","nodeType":"YulIdentifier","src":"2745:3:20"},"nativeSrc":"2745:54:20","nodeType":"YulFunctionCall","src":"2745:54:20"},"variableNames":[{"name":"cleaned","nativeSrc":"2734:7:20","nodeType":"YulIdentifier","src":"2734:7:20"}]}]},"name":"cleanup_t_uint160","nativeSrc":"2679:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2706:5:20","nodeType":"YulTypedName","src":"2706:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2716:7:20","nodeType":"YulTypedName","src":"2716:7:20","type":""}],"src":"2679:126:20"},{"body":{"nativeSrc":"2856:51:20","nodeType":"YulBlock","src":"2856:51:20","statements":[{"nativeSrc":"2866:35:20","nodeType":"YulAssignment","src":"2866:35:20","value":{"arguments":[{"name":"value","nativeSrc":"2895:5:20","nodeType":"YulIdentifier","src":"2895:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"2877:17:20","nodeType":"YulIdentifier","src":"2877:17:20"},"nativeSrc":"2877:24:20","nodeType":"YulFunctionCall","src":"2877:24:20"},"variableNames":[{"name":"cleaned","nativeSrc":"2866:7:20","nodeType":"YulIdentifier","src":"2866:7:20"}]}]},"name":"cleanup_t_address","nativeSrc":"2811:96:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2838:5:20","nodeType":"YulTypedName","src":"2838:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2848:7:20","nodeType":"YulTypedName","src":"2848:7:20","type":""}],"src":"2811:96:20"},{"body":{"nativeSrc":"2956:79:20","nodeType":"YulBlock","src":"2956:79:20","statements":[{"body":{"nativeSrc":"3013:16:20","nodeType":"YulBlock","src":"3013:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3022:1:20","nodeType":"YulLiteral","src":"3022:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3025:1:20","nodeType":"YulLiteral","src":"3025:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3015:6:20","nodeType":"YulIdentifier","src":"3015:6:20"},"nativeSrc":"3015:12:20","nodeType":"YulFunctionCall","src":"3015:12:20"},"nativeSrc":"3015:12:20","nodeType":"YulExpressionStatement","src":"3015:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2979:5:20","nodeType":"YulIdentifier","src":"2979:5:20"},{"arguments":[{"name":"value","nativeSrc":"3004:5:20","nodeType":"YulIdentifier","src":"3004:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"2986:17:20","nodeType":"YulIdentifier","src":"2986:17:20"},"nativeSrc":"2986:24:20","nodeType":"YulFunctionCall","src":"2986:24:20"}],"functionName":{"name":"eq","nativeSrc":"2976:2:20","nodeType":"YulIdentifier","src":"2976:2:20"},"nativeSrc":"2976:35:20","nodeType":"YulFunctionCall","src":"2976:35:20"}],"functionName":{"name":"iszero","nativeSrc":"2969:6:20","nodeType":"YulIdentifier","src":"2969:6:20"},"nativeSrc":"2969:43:20","nodeType":"YulFunctionCall","src":"2969:43:20"},"nativeSrc":"2966:63:20","nodeType":"YulIf","src":"2966:63:20"}]},"name":"validator_revert_t_address","nativeSrc":"2913:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2949:5:20","nodeType":"YulTypedName","src":"2949:5:20","type":""}],"src":"2913:122:20"},{"body":{"nativeSrc":"3104:80:20","nodeType":"YulBlock","src":"3104:80:20","statements":[{"nativeSrc":"3114:22:20","nodeType":"YulAssignment","src":"3114:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"3129:6:20","nodeType":"YulIdentifier","src":"3129:6:20"}],"functionName":{"name":"mload","nativeSrc":"3123:5:20","nodeType":"YulIdentifier","src":"3123:5:20"},"nativeSrc":"3123:13:20","nodeType":"YulFunctionCall","src":"3123:13:20"},"variableNames":[{"name":"value","nativeSrc":"3114:5:20","nodeType":"YulIdentifier","src":"3114:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3172:5:20","nodeType":"YulIdentifier","src":"3172:5:20"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"3145:26:20","nodeType":"YulIdentifier","src":"3145:26:20"},"nativeSrc":"3145:33:20","nodeType":"YulFunctionCall","src":"3145:33:20"},"nativeSrc":"3145:33:20","nodeType":"YulExpressionStatement","src":"3145:33:20"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"3041:143:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3082:6:20","nodeType":"YulTypedName","src":"3082:6:20","type":""},{"name":"end","nativeSrc":"3090:3:20","nodeType":"YulTypedName","src":"3090:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3098:5:20","nodeType":"YulTypedName","src":"3098:5:20","type":""}],"src":"3041:143:20"},{"body":{"nativeSrc":"3355:1158:20","nodeType":"YulBlock","src":"3355:1158:20","statements":[{"body":{"nativeSrc":"3402:83:20","nodeType":"YulBlock","src":"3402:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3404:77:20","nodeType":"YulIdentifier","src":"3404:77:20"},"nativeSrc":"3404:79:20","nodeType":"YulFunctionCall","src":"3404:79:20"},"nativeSrc":"3404:79:20","nodeType":"YulExpressionStatement","src":"3404:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3376:7:20","nodeType":"YulIdentifier","src":"3376:7:20"},{"name":"headStart","nativeSrc":"3385:9:20","nodeType":"YulIdentifier","src":"3385:9:20"}],"functionName":{"name":"sub","nativeSrc":"3372:3:20","nodeType":"YulIdentifier","src":"3372:3:20"},"nativeSrc":"3372:23:20","nodeType":"YulFunctionCall","src":"3372:23:20"},{"kind":"number","nativeSrc":"3397:3:20","nodeType":"YulLiteral","src":"3397:3:20","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3368:3:20","nodeType":"YulIdentifier","src":"3368:3:20"},"nativeSrc":"3368:33:20","nodeType":"YulFunctionCall","src":"3368:33:20"},"nativeSrc":"3365:120:20","nodeType":"YulIf","src":"3365:120:20"},{"nativeSrc":"3495:291:20","nodeType":"YulBlock","src":"3495:291:20","statements":[{"nativeSrc":"3510:38:20","nodeType":"YulVariableDeclaration","src":"3510:38:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3534:9:20","nodeType":"YulIdentifier","src":"3534:9:20"},{"kind":"number","nativeSrc":"3545:1:20","nodeType":"YulLiteral","src":"3545:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3530:3:20","nodeType":"YulIdentifier","src":"3530:3:20"},"nativeSrc":"3530:17:20","nodeType":"YulFunctionCall","src":"3530:17:20"}],"functionName":{"name":"mload","nativeSrc":"3524:5:20","nodeType":"YulIdentifier","src":"3524:5:20"},"nativeSrc":"3524:24:20","nodeType":"YulFunctionCall","src":"3524:24:20"},"variables":[{"name":"offset","nativeSrc":"3514:6:20","nodeType":"YulTypedName","src":"3514:6:20","type":""}]},{"body":{"nativeSrc":"3595:83:20","nodeType":"YulBlock","src":"3595:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3597:77:20","nodeType":"YulIdentifier","src":"3597:77:20"},"nativeSrc":"3597:79:20","nodeType":"YulFunctionCall","src":"3597:79:20"},"nativeSrc":"3597:79:20","nodeType":"YulExpressionStatement","src":"3597:79:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3567:6:20","nodeType":"YulIdentifier","src":"3567:6:20"},{"kind":"number","nativeSrc":"3575:18:20","nodeType":"YulLiteral","src":"3575:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3564:2:20","nodeType":"YulIdentifier","src":"3564:2:20"},"nativeSrc":"3564:30:20","nodeType":"YulFunctionCall","src":"3564:30:20"},"nativeSrc":"3561:117:20","nodeType":"YulIf","src":"3561:117:20"},{"nativeSrc":"3692:84:20","nodeType":"YulAssignment","src":"3692:84:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3748:9:20","nodeType":"YulIdentifier","src":"3748:9:20"},{"name":"offset","nativeSrc":"3759:6:20","nodeType":"YulIdentifier","src":"3759:6:20"}],"functionName":{"name":"add","nativeSrc":"3744:3:20","nodeType":"YulIdentifier","src":"3744:3:20"},"nativeSrc":"3744:22:20","nodeType":"YulFunctionCall","src":"3744:22:20"},{"name":"dataEnd","nativeSrc":"3768:7:20","nodeType":"YulIdentifier","src":"3768:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3702:41:20","nodeType":"YulIdentifier","src":"3702:41:20"},"nativeSrc":"3702:74:20","nodeType":"YulFunctionCall","src":"3702:74:20"},"variableNames":[{"name":"value0","nativeSrc":"3692:6:20","nodeType":"YulIdentifier","src":"3692:6:20"}]}]},{"nativeSrc":"3796:292:20","nodeType":"YulBlock","src":"3796:292:20","statements":[{"nativeSrc":"3811:39:20","nodeType":"YulVariableDeclaration","src":"3811:39:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3835:9:20","nodeType":"YulIdentifier","src":"3835:9:20"},{"kind":"number","nativeSrc":"3846:2:20","nodeType":"YulLiteral","src":"3846:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3831:3:20","nodeType":"YulIdentifier","src":"3831:3:20"},"nativeSrc":"3831:18:20","nodeType":"YulFunctionCall","src":"3831:18:20"}],"functionName":{"name":"mload","nativeSrc":"3825:5:20","nodeType":"YulIdentifier","src":"3825:5:20"},"nativeSrc":"3825:25:20","nodeType":"YulFunctionCall","src":"3825:25:20"},"variables":[{"name":"offset","nativeSrc":"3815:6:20","nodeType":"YulTypedName","src":"3815:6:20","type":""}]},{"body":{"nativeSrc":"3897:83:20","nodeType":"YulBlock","src":"3897:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3899:77:20","nodeType":"YulIdentifier","src":"3899:77:20"},"nativeSrc":"3899:79:20","nodeType":"YulFunctionCall","src":"3899:79:20"},"nativeSrc":"3899:79:20","nodeType":"YulExpressionStatement","src":"3899:79:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3869:6:20","nodeType":"YulIdentifier","src":"3869:6:20"},{"kind":"number","nativeSrc":"3877:18:20","nodeType":"YulLiteral","src":"3877:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3866:2:20","nodeType":"YulIdentifier","src":"3866:2:20"},"nativeSrc":"3866:30:20","nodeType":"YulFunctionCall","src":"3866:30:20"},"nativeSrc":"3863:117:20","nodeType":"YulIf","src":"3863:117:20"},{"nativeSrc":"3994:84:20","nodeType":"YulAssignment","src":"3994:84:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4050:9:20","nodeType":"YulIdentifier","src":"4050:9:20"},{"name":"offset","nativeSrc":"4061:6:20","nodeType":"YulIdentifier","src":"4061:6:20"}],"functionName":{"name":"add","nativeSrc":"4046:3:20","nodeType":"YulIdentifier","src":"4046:3:20"},"nativeSrc":"4046:22:20","nodeType":"YulFunctionCall","src":"4046:22:20"},{"name":"dataEnd","nativeSrc":"4070:7:20","nodeType":"YulIdentifier","src":"4070:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"4004:41:20","nodeType":"YulIdentifier","src":"4004:41:20"},"nativeSrc":"4004:74:20","nodeType":"YulFunctionCall","src":"4004:74:20"},"variableNames":[{"name":"value1","nativeSrc":"3994:6:20","nodeType":"YulIdentifier","src":"3994:6:20"}]}]},{"nativeSrc":"4098:129:20","nodeType":"YulBlock","src":"4098:129:20","statements":[{"nativeSrc":"4113:16:20","nodeType":"YulVariableDeclaration","src":"4113:16:20","value":{"kind":"number","nativeSrc":"4127:2:20","nodeType":"YulLiteral","src":"4127:2:20","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"4117:6:20","nodeType":"YulTypedName","src":"4117:6:20","type":""}]},{"nativeSrc":"4143:74:20","nodeType":"YulAssignment","src":"4143:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4189:9:20","nodeType":"YulIdentifier","src":"4189:9:20"},{"name":"offset","nativeSrc":"4200:6:20","nodeType":"YulIdentifier","src":"4200:6:20"}],"functionName":{"name":"add","nativeSrc":"4185:3:20","nodeType":"YulIdentifier","src":"4185:3:20"},"nativeSrc":"4185:22:20","nodeType":"YulFunctionCall","src":"4185:22:20"},{"name":"dataEnd","nativeSrc":"4209:7:20","nodeType":"YulIdentifier","src":"4209:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"4153:31:20","nodeType":"YulIdentifier","src":"4153:31:20"},"nativeSrc":"4153:64:20","nodeType":"YulFunctionCall","src":"4153:64:20"},"variableNames":[{"name":"value2","nativeSrc":"4143:6:20","nodeType":"YulIdentifier","src":"4143:6:20"}]}]},{"nativeSrc":"4237:129:20","nodeType":"YulBlock","src":"4237:129:20","statements":[{"nativeSrc":"4252:16:20","nodeType":"YulVariableDeclaration","src":"4252:16:20","value":{"kind":"number","nativeSrc":"4266:2:20","nodeType":"YulLiteral","src":"4266:2:20","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"4256:6:20","nodeType":"YulTypedName","src":"4256:6:20","type":""}]},{"nativeSrc":"4282:74:20","nodeType":"YulAssignment","src":"4282:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4328:9:20","nodeType":"YulIdentifier","src":"4328:9:20"},{"name":"offset","nativeSrc":"4339:6:20","nodeType":"YulIdentifier","src":"4339:6:20"}],"functionName":{"name":"add","nativeSrc":"4324:3:20","nodeType":"YulIdentifier","src":"4324:3:20"},"nativeSrc":"4324:22:20","nodeType":"YulFunctionCall","src":"4324:22:20"},{"name":"dataEnd","nativeSrc":"4348:7:20","nodeType":"YulIdentifier","src":"4348:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"4292:31:20","nodeType":"YulIdentifier","src":"4292:31:20"},"nativeSrc":"4292:64:20","nodeType":"YulFunctionCall","src":"4292:64:20"},"variableNames":[{"name":"value3","nativeSrc":"4282:6:20","nodeType":"YulIdentifier","src":"4282:6:20"}]}]},{"nativeSrc":"4376:130:20","nodeType":"YulBlock","src":"4376:130:20","statements":[{"nativeSrc":"4391:17:20","nodeType":"YulVariableDeclaration","src":"4391:17:20","value":{"kind":"number","nativeSrc":"4405:3:20","nodeType":"YulLiteral","src":"4405:3:20","type":"","value":"128"},"variables":[{"name":"offset","nativeSrc":"4395:6:20","nodeType":"YulTypedName","src":"4395:6:20","type":""}]},{"nativeSrc":"4422:74:20","nodeType":"YulAssignment","src":"4422:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4468:9:20","nodeType":"YulIdentifier","src":"4468:9:20"},{"name":"offset","nativeSrc":"4479:6:20","nodeType":"YulIdentifier","src":"4479:6:20"}],"functionName":{"name":"add","nativeSrc":"4464:3:20","nodeType":"YulIdentifier","src":"4464:3:20"},"nativeSrc":"4464:22:20","nodeType":"YulFunctionCall","src":"4464:22:20"},{"name":"dataEnd","nativeSrc":"4488:7:20","nodeType":"YulIdentifier","src":"4488:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"4432:31:20","nodeType":"YulIdentifier","src":"4432:31:20"},"nativeSrc":"4432:64:20","nodeType":"YulFunctionCall","src":"4432:64:20"},"variableNames":[{"name":"value4","nativeSrc":"4422:6:20","nodeType":"YulIdentifier","src":"4422:6:20"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_address_fromMemory","nativeSrc":"3190:1323:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3293:9:20","nodeType":"YulTypedName","src":"3293:9:20","type":""},{"name":"dataEnd","nativeSrc":"3304:7:20","nodeType":"YulTypedName","src":"3304:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3316:6:20","nodeType":"YulTypedName","src":"3316:6:20","type":""},{"name":"value1","nativeSrc":"3324:6:20","nodeType":"YulTypedName","src":"3324:6:20","type":""},{"name":"value2","nativeSrc":"3332:6:20","nodeType":"YulTypedName","src":"3332:6:20","type":""},{"name":"value3","nativeSrc":"3340:6:20","nodeType":"YulTypedName","src":"3340:6:20","type":""},{"name":"value4","nativeSrc":"3348:6:20","nodeType":"YulTypedName","src":"3348:6:20","type":""}],"src":"3190:1323:20"},{"body":{"nativeSrc":"4578:40:20","nodeType":"YulBlock","src":"4578:40:20","statements":[{"nativeSrc":"4589:22:20","nodeType":"YulAssignment","src":"4589:22:20","value":{"arguments":[{"name":"value","nativeSrc":"4605:5:20","nodeType":"YulIdentifier","src":"4605:5:20"}],"functionName":{"name":"mload","nativeSrc":"4599:5:20","nodeType":"YulIdentifier","src":"4599:5:20"},"nativeSrc":"4599:12:20","nodeType":"YulFunctionCall","src":"4599:12:20"},"variableNames":[{"name":"length","nativeSrc":"4589:6:20","nodeType":"YulIdentifier","src":"4589:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"4519:99:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4561:5:20","nodeType":"YulTypedName","src":"4561:5:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"4571:6:20","nodeType":"YulTypedName","src":"4571:6:20","type":""}],"src":"4519:99:20"},{"body":{"nativeSrc":"4652:152:20","nodeType":"YulBlock","src":"4652:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4669:1:20","nodeType":"YulLiteral","src":"4669:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4672:77:20","nodeType":"YulLiteral","src":"4672:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4662:6:20","nodeType":"YulIdentifier","src":"4662:6:20"},"nativeSrc":"4662:88:20","nodeType":"YulFunctionCall","src":"4662:88:20"},"nativeSrc":"4662:88:20","nodeType":"YulExpressionStatement","src":"4662:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4766:1:20","nodeType":"YulLiteral","src":"4766:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"4769:4:20","nodeType":"YulLiteral","src":"4769:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"4759:6:20","nodeType":"YulIdentifier","src":"4759:6:20"},"nativeSrc":"4759:15:20","nodeType":"YulFunctionCall","src":"4759:15:20"},"nativeSrc":"4759:15:20","nodeType":"YulExpressionStatement","src":"4759:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4790:1:20","nodeType":"YulLiteral","src":"4790:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4793:4:20","nodeType":"YulLiteral","src":"4793:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4783:6:20","nodeType":"YulIdentifier","src":"4783:6:20"},"nativeSrc":"4783:15:20","nodeType":"YulFunctionCall","src":"4783:15:20"},"nativeSrc":"4783:15:20","nodeType":"YulExpressionStatement","src":"4783:15:20"}]},"name":"panic_error_0x22","nativeSrc":"4624:180:20","nodeType":"YulFunctionDefinition","src":"4624:180:20"},{"body":{"nativeSrc":"4861:269:20","nodeType":"YulBlock","src":"4861:269:20","statements":[{"nativeSrc":"4871:22:20","nodeType":"YulAssignment","src":"4871:22:20","value":{"arguments":[{"name":"data","nativeSrc":"4885:4:20","nodeType":"YulIdentifier","src":"4885:4:20"},{"kind":"number","nativeSrc":"4891:1:20","nodeType":"YulLiteral","src":"4891:1:20","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"4881:3:20","nodeType":"YulIdentifier","src":"4881:3:20"},"nativeSrc":"4881:12:20","nodeType":"YulFunctionCall","src":"4881:12:20"},"variableNames":[{"name":"length","nativeSrc":"4871:6:20","nodeType":"YulIdentifier","src":"4871:6:20"}]},{"nativeSrc":"4902:38:20","nodeType":"YulVariableDeclaration","src":"4902:38:20","value":{"arguments":[{"name":"data","nativeSrc":"4932:4:20","nodeType":"YulIdentifier","src":"4932:4:20"},{"kind":"number","nativeSrc":"4938:1:20","nodeType":"YulLiteral","src":"4938:1:20","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"4928:3:20","nodeType":"YulIdentifier","src":"4928:3:20"},"nativeSrc":"4928:12:20","nodeType":"YulFunctionCall","src":"4928:12:20"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"4906:18:20","nodeType":"YulTypedName","src":"4906:18:20","type":""}]},{"body":{"nativeSrc":"4979:51:20","nodeType":"YulBlock","src":"4979:51:20","statements":[{"nativeSrc":"4993:27:20","nodeType":"YulAssignment","src":"4993:27:20","value":{"arguments":[{"name":"length","nativeSrc":"5007:6:20","nodeType":"YulIdentifier","src":"5007:6:20"},{"kind":"number","nativeSrc":"5015:4:20","nodeType":"YulLiteral","src":"5015:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"5003:3:20","nodeType":"YulIdentifier","src":"5003:3:20"},"nativeSrc":"5003:17:20","nodeType":"YulFunctionCall","src":"5003:17:20"},"variableNames":[{"name":"length","nativeSrc":"4993:6:20","nodeType":"YulIdentifier","src":"4993:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4959:18:20","nodeType":"YulIdentifier","src":"4959:18:20"}],"functionName":{"name":"iszero","nativeSrc":"4952:6:20","nodeType":"YulIdentifier","src":"4952:6:20"},"nativeSrc":"4952:26:20","nodeType":"YulFunctionCall","src":"4952:26:20"},"nativeSrc":"4949:81:20","nodeType":"YulIf","src":"4949:81:20"},{"body":{"nativeSrc":"5082:42:20","nodeType":"YulBlock","src":"5082:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"5096:16:20","nodeType":"YulIdentifier","src":"5096:16:20"},"nativeSrc":"5096:18:20","nodeType":"YulFunctionCall","src":"5096:18:20"},"nativeSrc":"5096:18:20","nodeType":"YulExpressionStatement","src":"5096:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"5046:18:20","nodeType":"YulIdentifier","src":"5046:18:20"},{"arguments":[{"name":"length","nativeSrc":"5069:6:20","nodeType":"YulIdentifier","src":"5069:6:20"},{"kind":"number","nativeSrc":"5077:2:20","nodeType":"YulLiteral","src":"5077:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"5066:2:20","nodeType":"YulIdentifier","src":"5066:2:20"},"nativeSrc":"5066:14:20","nodeType":"YulFunctionCall","src":"5066:14:20"}],"functionName":{"name":"eq","nativeSrc":"5043:2:20","nodeType":"YulIdentifier","src":"5043:2:20"},"nativeSrc":"5043:38:20","nodeType":"YulFunctionCall","src":"5043:38:20"},"nativeSrc":"5040:84:20","nodeType":"YulIf","src":"5040:84:20"}]},"name":"extract_byte_array_length","nativeSrc":"4810:320:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4845:4:20","nodeType":"YulTypedName","src":"4845:4:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"4854:6:20","nodeType":"YulTypedName","src":"4854:6:20","type":""}],"src":"4810:320:20"},{"body":{"nativeSrc":"5190:87:20","nodeType":"YulBlock","src":"5190:87:20","statements":[{"nativeSrc":"5200:11:20","nodeType":"YulAssignment","src":"5200:11:20","value":{"name":"ptr","nativeSrc":"5208:3:20","nodeType":"YulIdentifier","src":"5208:3:20"},"variableNames":[{"name":"data","nativeSrc":"5200:4:20","nodeType":"YulIdentifier","src":"5200:4:20"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5228:1:20","nodeType":"YulLiteral","src":"5228:1:20","type":"","value":"0"},{"name":"ptr","nativeSrc":"5231:3:20","nodeType":"YulIdentifier","src":"5231:3:20"}],"functionName":{"name":"mstore","nativeSrc":"5221:6:20","nodeType":"YulIdentifier","src":"5221:6:20"},"nativeSrc":"5221:14:20","nodeType":"YulFunctionCall","src":"5221:14:20"},"nativeSrc":"5221:14:20","nodeType":"YulExpressionStatement","src":"5221:14:20"},{"nativeSrc":"5244:26:20","nodeType":"YulAssignment","src":"5244:26:20","value":{"arguments":[{"kind":"number","nativeSrc":"5262:1:20","nodeType":"YulLiteral","src":"5262:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5265:4:20","nodeType":"YulLiteral","src":"5265:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"5252:9:20","nodeType":"YulIdentifier","src":"5252:9:20"},"nativeSrc":"5252:18:20","nodeType":"YulFunctionCall","src":"5252:18:20"},"variableNames":[{"name":"data","nativeSrc":"5244:4:20","nodeType":"YulIdentifier","src":"5244:4:20"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"5136:141:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"5177:3:20","nodeType":"YulTypedName","src":"5177:3:20","type":""}],"returnVariables":[{"name":"data","nativeSrc":"5185:4:20","nodeType":"YulTypedName","src":"5185:4:20","type":""}],"src":"5136:141:20"},{"body":{"nativeSrc":"5327:49:20","nodeType":"YulBlock","src":"5327:49:20","statements":[{"nativeSrc":"5337:33:20","nodeType":"YulAssignment","src":"5337:33:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5355:5:20","nodeType":"YulIdentifier","src":"5355:5:20"},{"kind":"number","nativeSrc":"5362:2:20","nodeType":"YulLiteral","src":"5362:2:20","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"5351:3:20","nodeType":"YulIdentifier","src":"5351:3:20"},"nativeSrc":"5351:14:20","nodeType":"YulFunctionCall","src":"5351:14:20"},{"kind":"number","nativeSrc":"5367:2:20","nodeType":"YulLiteral","src":"5367:2:20","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"5347:3:20","nodeType":"YulIdentifier","src":"5347:3:20"},"nativeSrc":"5347:23:20","nodeType":"YulFunctionCall","src":"5347:23:20"},"variableNames":[{"name":"result","nativeSrc":"5337:6:20","nodeType":"YulIdentifier","src":"5337:6:20"}]}]},"name":"divide_by_32_ceil","nativeSrc":"5283:93:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5310:5:20","nodeType":"YulTypedName","src":"5310:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"5320:6:20","nodeType":"YulTypedName","src":"5320:6:20","type":""}],"src":"5283:93:20"},{"body":{"nativeSrc":"5435:54:20","nodeType":"YulBlock","src":"5435:54:20","statements":[{"nativeSrc":"5445:37:20","nodeType":"YulAssignment","src":"5445:37:20","value":{"arguments":[{"name":"bits","nativeSrc":"5470:4:20","nodeType":"YulIdentifier","src":"5470:4:20"},{"name":"value","nativeSrc":"5476:5:20","nodeType":"YulIdentifier","src":"5476:5:20"}],"functionName":{"name":"shl","nativeSrc":"5466:3:20","nodeType":"YulIdentifier","src":"5466:3:20"},"nativeSrc":"5466:16:20","nodeType":"YulFunctionCall","src":"5466:16:20"},"variableNames":[{"name":"newValue","nativeSrc":"5445:8:20","nodeType":"YulIdentifier","src":"5445:8:20"}]}]},"name":"shift_left_dynamic","nativeSrc":"5382:107:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"5410:4:20","nodeType":"YulTypedName","src":"5410:4:20","type":""},{"name":"value","nativeSrc":"5416:5:20","nodeType":"YulTypedName","src":"5416:5:20","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"5426:8:20","nodeType":"YulTypedName","src":"5426:8:20","type":""}],"src":"5382:107:20"},{"body":{"nativeSrc":"5571:317:20","nodeType":"YulBlock","src":"5571:317:20","statements":[{"nativeSrc":"5581:35:20","nodeType":"YulVariableDeclaration","src":"5581:35:20","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"5602:10:20","nodeType":"YulIdentifier","src":"5602:10:20"},{"kind":"number","nativeSrc":"5614:1:20","nodeType":"YulLiteral","src":"5614:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"5598:3:20","nodeType":"YulIdentifier","src":"5598:3:20"},"nativeSrc":"5598:18:20","nodeType":"YulFunctionCall","src":"5598:18:20"},"variables":[{"name":"shiftBits","nativeSrc":"5585:9:20","nodeType":"YulTypedName","src":"5585:9:20","type":""}]},{"nativeSrc":"5625:109:20","nodeType":"YulVariableDeclaration","src":"5625:109:20","value":{"arguments":[{"name":"shiftBits","nativeSrc":"5656:9:20","nodeType":"YulIdentifier","src":"5656:9:20"},{"kind":"number","nativeSrc":"5667:66:20","nodeType":"YulLiteral","src":"5667:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"5637:18:20","nodeType":"YulIdentifier","src":"5637:18:20"},"nativeSrc":"5637:97:20","nodeType":"YulFunctionCall","src":"5637:97:20"},"variables":[{"name":"mask","nativeSrc":"5629:4:20","nodeType":"YulTypedName","src":"5629:4:20","type":""}]},{"nativeSrc":"5743:51:20","nodeType":"YulAssignment","src":"5743:51:20","value":{"arguments":[{"name":"shiftBits","nativeSrc":"5774:9:20","nodeType":"YulIdentifier","src":"5774:9:20"},{"name":"toInsert","nativeSrc":"5785:8:20","nodeType":"YulIdentifier","src":"5785:8:20"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"5755:18:20","nodeType":"YulIdentifier","src":"5755:18:20"},"nativeSrc":"5755:39:20","nodeType":"YulFunctionCall","src":"5755:39:20"},"variableNames":[{"name":"toInsert","nativeSrc":"5743:8:20","nodeType":"YulIdentifier","src":"5743:8:20"}]},{"nativeSrc":"5803:30:20","nodeType":"YulAssignment","src":"5803:30:20","value":{"arguments":[{"name":"value","nativeSrc":"5816:5:20","nodeType":"YulIdentifier","src":"5816:5:20"},{"arguments":[{"name":"mask","nativeSrc":"5827:4:20","nodeType":"YulIdentifier","src":"5827:4:20"}],"functionName":{"name":"not","nativeSrc":"5823:3:20","nodeType":"YulIdentifier","src":"5823:3:20"},"nativeSrc":"5823:9:20","nodeType":"YulFunctionCall","src":"5823:9:20"}],"functionName":{"name":"and","nativeSrc":"5812:3:20","nodeType":"YulIdentifier","src":"5812:3:20"},"nativeSrc":"5812:21:20","nodeType":"YulFunctionCall","src":"5812:21:20"},"variableNames":[{"name":"value","nativeSrc":"5803:5:20","nodeType":"YulIdentifier","src":"5803:5:20"}]},{"nativeSrc":"5842:40:20","nodeType":"YulAssignment","src":"5842:40:20","value":{"arguments":[{"name":"value","nativeSrc":"5855:5:20","nodeType":"YulIdentifier","src":"5855:5:20"},{"arguments":[{"name":"toInsert","nativeSrc":"5866:8:20","nodeType":"YulIdentifier","src":"5866:8:20"},{"name":"mask","nativeSrc":"5876:4:20","nodeType":"YulIdentifier","src":"5876:4:20"}],"functionName":{"name":"and","nativeSrc":"5862:3:20","nodeType":"YulIdentifier","src":"5862:3:20"},"nativeSrc":"5862:19:20","nodeType":"YulFunctionCall","src":"5862:19:20"}],"functionName":{"name":"or","nativeSrc":"5852:2:20","nodeType":"YulIdentifier","src":"5852:2:20"},"nativeSrc":"5852:30:20","nodeType":"YulFunctionCall","src":"5852:30:20"},"variableNames":[{"name":"result","nativeSrc":"5842:6:20","nodeType":"YulIdentifier","src":"5842:6:20"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"5495:393:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5532:5:20","nodeType":"YulTypedName","src":"5532:5:20","type":""},{"name":"shiftBytes","nativeSrc":"5539:10:20","nodeType":"YulTypedName","src":"5539:10:20","type":""},{"name":"toInsert","nativeSrc":"5551:8:20","nodeType":"YulTypedName","src":"5551:8:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"5564:6:20","nodeType":"YulTypedName","src":"5564:6:20","type":""}],"src":"5495:393:20"},{"body":{"nativeSrc":"5939:32:20","nodeType":"YulBlock","src":"5939:32:20","statements":[{"nativeSrc":"5949:16:20","nodeType":"YulAssignment","src":"5949:16:20","value":{"name":"value","nativeSrc":"5960:5:20","nodeType":"YulIdentifier","src":"5960:5:20"},"variableNames":[{"name":"cleaned","nativeSrc":"5949:7:20","nodeType":"YulIdentifier","src":"5949:7:20"}]}]},"name":"cleanup_t_uint256","nativeSrc":"5894:77:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5921:5:20","nodeType":"YulTypedName","src":"5921:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5931:7:20","nodeType":"YulTypedName","src":"5931:7:20","type":""}],"src":"5894:77:20"},{"body":{"nativeSrc":"6009:28:20","nodeType":"YulBlock","src":"6009:28:20","statements":[{"nativeSrc":"6019:12:20","nodeType":"YulAssignment","src":"6019:12:20","value":{"name":"value","nativeSrc":"6026:5:20","nodeType":"YulIdentifier","src":"6026:5:20"},"variableNames":[{"name":"ret","nativeSrc":"6019:3:20","nodeType":"YulIdentifier","src":"6019:3:20"}]}]},"name":"identity","nativeSrc":"5977:60:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5995:5:20","nodeType":"YulTypedName","src":"5995:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"6005:3:20","nodeType":"YulTypedName","src":"6005:3:20","type":""}],"src":"5977:60:20"},{"body":{"nativeSrc":"6103:82:20","nodeType":"YulBlock","src":"6103:82:20","statements":[{"nativeSrc":"6113:66:20","nodeType":"YulAssignment","src":"6113:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6171:5:20","nodeType":"YulIdentifier","src":"6171:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6153:17:20","nodeType":"YulIdentifier","src":"6153:17:20"},"nativeSrc":"6153:24:20","nodeType":"YulFunctionCall","src":"6153:24:20"}],"functionName":{"name":"identity","nativeSrc":"6144:8:20","nodeType":"YulIdentifier","src":"6144:8:20"},"nativeSrc":"6144:34:20","nodeType":"YulFunctionCall","src":"6144:34:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6126:17:20","nodeType":"YulIdentifier","src":"6126:17:20"},"nativeSrc":"6126:53:20","nodeType":"YulFunctionCall","src":"6126:53:20"},"variableNames":[{"name":"converted","nativeSrc":"6113:9:20","nodeType":"YulIdentifier","src":"6113:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"6043:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6083:5:20","nodeType":"YulTypedName","src":"6083:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"6093:9:20","nodeType":"YulTypedName","src":"6093:9:20","type":""}],"src":"6043:142:20"},{"body":{"nativeSrc":"6238:28:20","nodeType":"YulBlock","src":"6238:28:20","statements":[{"nativeSrc":"6248:12:20","nodeType":"YulAssignment","src":"6248:12:20","value":{"name":"value","nativeSrc":"6255:5:20","nodeType":"YulIdentifier","src":"6255:5:20"},"variableNames":[{"name":"ret","nativeSrc":"6248:3:20","nodeType":"YulIdentifier","src":"6248:3:20"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"6191:75:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6224:5:20","nodeType":"YulTypedName","src":"6224:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"6234:3:20","nodeType":"YulTypedName","src":"6234:3:20","type":""}],"src":"6191:75:20"},{"body":{"nativeSrc":"6348:193:20","nodeType":"YulBlock","src":"6348:193:20","statements":[{"nativeSrc":"6358:63:20","nodeType":"YulVariableDeclaration","src":"6358:63:20","value":{"arguments":[{"name":"value_0","nativeSrc":"6413:7:20","nodeType":"YulIdentifier","src":"6413:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"6382:30:20","nodeType":"YulIdentifier","src":"6382:30:20"},"nativeSrc":"6382:39:20","nodeType":"YulFunctionCall","src":"6382:39:20"},"variables":[{"name":"convertedValue_0","nativeSrc":"6362:16:20","nodeType":"YulTypedName","src":"6362:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6437:4:20","nodeType":"YulIdentifier","src":"6437:4:20"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"6477:4:20","nodeType":"YulIdentifier","src":"6477:4:20"}],"functionName":{"name":"sload","nativeSrc":"6471:5:20","nodeType":"YulIdentifier","src":"6471:5:20"},"nativeSrc":"6471:11:20","nodeType":"YulFunctionCall","src":"6471:11:20"},{"name":"offset","nativeSrc":"6484:6:20","nodeType":"YulIdentifier","src":"6484:6:20"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"6516:16:20","nodeType":"YulIdentifier","src":"6516:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"6492:23:20","nodeType":"YulIdentifier","src":"6492:23:20"},"nativeSrc":"6492:41:20","nodeType":"YulFunctionCall","src":"6492:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"6443:27:20","nodeType":"YulIdentifier","src":"6443:27:20"},"nativeSrc":"6443:91:20","nodeType":"YulFunctionCall","src":"6443:91:20"}],"functionName":{"name":"sstore","nativeSrc":"6430:6:20","nodeType":"YulIdentifier","src":"6430:6:20"},"nativeSrc":"6430:105:20","nodeType":"YulFunctionCall","src":"6430:105:20"},"nativeSrc":"6430:105:20","nodeType":"YulExpressionStatement","src":"6430:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"6272:269:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"6325:4:20","nodeType":"YulTypedName","src":"6325:4:20","type":""},{"name":"offset","nativeSrc":"6331:6:20","nodeType":"YulTypedName","src":"6331:6:20","type":""},{"name":"value_0","nativeSrc":"6339:7:20","nodeType":"YulTypedName","src":"6339:7:20","type":""}],"src":"6272:269:20"},{"body":{"nativeSrc":"6596:24:20","nodeType":"YulBlock","src":"6596:24:20","statements":[{"nativeSrc":"6606:8:20","nodeType":"YulAssignment","src":"6606:8:20","value":{"kind":"number","nativeSrc":"6613:1:20","nodeType":"YulLiteral","src":"6613:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"6606:3:20","nodeType":"YulIdentifier","src":"6606:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"6547:73:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"6592:3:20","nodeType":"YulTypedName","src":"6592:3:20","type":""}],"src":"6547:73:20"},{"body":{"nativeSrc":"6679:136:20","nodeType":"YulBlock","src":"6679:136:20","statements":[{"nativeSrc":"6689:46:20","nodeType":"YulVariableDeclaration","src":"6689:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"6703:30:20","nodeType":"YulIdentifier","src":"6703:30:20"},"nativeSrc":"6703:32:20","nodeType":"YulFunctionCall","src":"6703:32:20"},"variables":[{"name":"zero_0","nativeSrc":"6693:6:20","nodeType":"YulTypedName","src":"6693:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6788:4:20","nodeType":"YulIdentifier","src":"6788:4:20"},{"name":"offset","nativeSrc":"6794:6:20","nodeType":"YulIdentifier","src":"6794:6:20"},{"name":"zero_0","nativeSrc":"6802:6:20","nodeType":"YulIdentifier","src":"6802:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"6744:43:20","nodeType":"YulIdentifier","src":"6744:43:20"},"nativeSrc":"6744:65:20","nodeType":"YulFunctionCall","src":"6744:65:20"},"nativeSrc":"6744:65:20","nodeType":"YulExpressionStatement","src":"6744:65:20"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"6626:189:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"6665:4:20","nodeType":"YulTypedName","src":"6665:4:20","type":""},{"name":"offset","nativeSrc":"6671:6:20","nodeType":"YulTypedName","src":"6671:6:20","type":""}],"src":"6626:189:20"},{"body":{"nativeSrc":"6871:136:20","nodeType":"YulBlock","src":"6871:136:20","statements":[{"body":{"nativeSrc":"6938:63:20","nodeType":"YulBlock","src":"6938:63:20","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"6982:5:20","nodeType":"YulIdentifier","src":"6982:5:20"},{"kind":"number","nativeSrc":"6989:1:20","nodeType":"YulLiteral","src":"6989:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"6952:29:20","nodeType":"YulIdentifier","src":"6952:29:20"},"nativeSrc":"6952:39:20","nodeType":"YulFunctionCall","src":"6952:39:20"},"nativeSrc":"6952:39:20","nodeType":"YulExpressionStatement","src":"6952:39:20"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"6891:5:20","nodeType":"YulIdentifier","src":"6891:5:20"},{"name":"end","nativeSrc":"6898:3:20","nodeType":"YulIdentifier","src":"6898:3:20"}],"functionName":{"name":"lt","nativeSrc":"6888:2:20","nodeType":"YulIdentifier","src":"6888:2:20"},"nativeSrc":"6888:14:20","nodeType":"YulFunctionCall","src":"6888:14:20"},"nativeSrc":"6881:120:20","nodeType":"YulForLoop","post":{"nativeSrc":"6903:26:20","nodeType":"YulBlock","src":"6903:26:20","statements":[{"nativeSrc":"6905:22:20","nodeType":"YulAssignment","src":"6905:22:20","value":{"arguments":[{"name":"start","nativeSrc":"6918:5:20","nodeType":"YulIdentifier","src":"6918:5:20"},{"kind":"number","nativeSrc":"6925:1:20","nodeType":"YulLiteral","src":"6925:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6914:3:20","nodeType":"YulIdentifier","src":"6914:3:20"},"nativeSrc":"6914:13:20","nodeType":"YulFunctionCall","src":"6914:13:20"},"variableNames":[{"name":"start","nativeSrc":"6905:5:20","nodeType":"YulIdentifier","src":"6905:5:20"}]}]},"pre":{"nativeSrc":"6885:2:20","nodeType":"YulBlock","src":"6885:2:20","statements":[]},"src":"6881:120:20"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"6821:186:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6859:5:20","nodeType":"YulTypedName","src":"6859:5:20","type":""},{"name":"end","nativeSrc":"6866:3:20","nodeType":"YulTypedName","src":"6866:3:20","type":""}],"src":"6821:186:20"},{"body":{"nativeSrc":"7092:464:20","nodeType":"YulBlock","src":"7092:464:20","statements":[{"body":{"nativeSrc":"7118:431:20","nodeType":"YulBlock","src":"7118:431:20","statements":[{"nativeSrc":"7132:54:20","nodeType":"YulVariableDeclaration","src":"7132:54:20","value":{"arguments":[{"name":"array","nativeSrc":"7180:5:20","nodeType":"YulIdentifier","src":"7180:5:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"7148:31:20","nodeType":"YulIdentifier","src":"7148:31:20"},"nativeSrc":"7148:38:20","nodeType":"YulFunctionCall","src":"7148:38:20"},"variables":[{"name":"dataArea","nativeSrc":"7136:8:20","nodeType":"YulTypedName","src":"7136:8:20","type":""}]},{"nativeSrc":"7199:63:20","nodeType":"YulVariableDeclaration","src":"7199:63:20","value":{"arguments":[{"name":"dataArea","nativeSrc":"7222:8:20","nodeType":"YulIdentifier","src":"7222:8:20"},{"arguments":[{"name":"startIndex","nativeSrc":"7250:10:20","nodeType":"YulIdentifier","src":"7250:10:20"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"7232:17:20","nodeType":"YulIdentifier","src":"7232:17:20"},"nativeSrc":"7232:29:20","nodeType":"YulFunctionCall","src":"7232:29:20"}],"functionName":{"name":"add","nativeSrc":"7218:3:20","nodeType":"YulIdentifier","src":"7218:3:20"},"nativeSrc":"7218:44:20","nodeType":"YulFunctionCall","src":"7218:44:20"},"variables":[{"name":"deleteStart","nativeSrc":"7203:11:20","nodeType":"YulTypedName","src":"7203:11:20","type":""}]},{"body":{"nativeSrc":"7419:27:20","nodeType":"YulBlock","src":"7419:27:20","statements":[{"nativeSrc":"7421:23:20","nodeType":"YulAssignment","src":"7421:23:20","value":{"name":"dataArea","nativeSrc":"7436:8:20","nodeType":"YulIdentifier","src":"7436:8:20"},"variableNames":[{"name":"deleteStart","nativeSrc":"7421:11:20","nodeType":"YulIdentifier","src":"7421:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"7403:10:20","nodeType":"YulIdentifier","src":"7403:10:20"},{"kind":"number","nativeSrc":"7415:2:20","nodeType":"YulLiteral","src":"7415:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"7400:2:20","nodeType":"YulIdentifier","src":"7400:2:20"},"nativeSrc":"7400:18:20","nodeType":"YulFunctionCall","src":"7400:18:20"},"nativeSrc":"7397:49:20","nodeType":"YulIf","src":"7397:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"7488:11:20","nodeType":"YulIdentifier","src":"7488:11:20"},{"arguments":[{"name":"dataArea","nativeSrc":"7505:8:20","nodeType":"YulIdentifier","src":"7505:8:20"},{"arguments":[{"name":"len","nativeSrc":"7533:3:20","nodeType":"YulIdentifier","src":"7533:3:20"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"7515:17:20","nodeType":"YulIdentifier","src":"7515:17:20"},"nativeSrc":"7515:22:20","nodeType":"YulFunctionCall","src":"7515:22:20"}],"functionName":{"name":"add","nativeSrc":"7501:3:20","nodeType":"YulIdentifier","src":"7501:3:20"},"nativeSrc":"7501:37:20","nodeType":"YulFunctionCall","src":"7501:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"7459:28:20","nodeType":"YulIdentifier","src":"7459:28:20"},"nativeSrc":"7459:80:20","nodeType":"YulFunctionCall","src":"7459:80:20"},"nativeSrc":"7459:80:20","nodeType":"YulExpressionStatement","src":"7459:80:20"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"7109:3:20","nodeType":"YulIdentifier","src":"7109:3:20"},{"kind":"number","nativeSrc":"7114:2:20","nodeType":"YulLiteral","src":"7114:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"7106:2:20","nodeType":"YulIdentifier","src":"7106:2:20"},"nativeSrc":"7106:11:20","nodeType":"YulFunctionCall","src":"7106:11:20"},"nativeSrc":"7103:446:20","nodeType":"YulIf","src":"7103:446:20"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"7013:543:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"7068:5:20","nodeType":"YulTypedName","src":"7068:5:20","type":""},{"name":"len","nativeSrc":"7075:3:20","nodeType":"YulTypedName","src":"7075:3:20","type":""},{"name":"startIndex","nativeSrc":"7080:10:20","nodeType":"YulTypedName","src":"7080:10:20","type":""}],"src":"7013:543:20"},{"body":{"nativeSrc":"7625:54:20","nodeType":"YulBlock","src":"7625:54:20","statements":[{"nativeSrc":"7635:37:20","nodeType":"YulAssignment","src":"7635:37:20","value":{"arguments":[{"name":"bits","nativeSrc":"7660:4:20","nodeType":"YulIdentifier","src":"7660:4:20"},{"name":"value","nativeSrc":"7666:5:20","nodeType":"YulIdentifier","src":"7666:5:20"}],"functionName":{"name":"shr","nativeSrc":"7656:3:20","nodeType":"YulIdentifier","src":"7656:3:20"},"nativeSrc":"7656:16:20","nodeType":"YulFunctionCall","src":"7656:16:20"},"variableNames":[{"name":"newValue","nativeSrc":"7635:8:20","nodeType":"YulIdentifier","src":"7635:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"7562:117:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"7600:4:20","nodeType":"YulTypedName","src":"7600:4:20","type":""},{"name":"value","nativeSrc":"7606:5:20","nodeType":"YulTypedName","src":"7606:5:20","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"7616:8:20","nodeType":"YulTypedName","src":"7616:8:20","type":""}],"src":"7562:117:20"},{"body":{"nativeSrc":"7736:118:20","nodeType":"YulBlock","src":"7736:118:20","statements":[{"nativeSrc":"7746:68:20","nodeType":"YulVariableDeclaration","src":"7746:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7795:1:20","nodeType":"YulLiteral","src":"7795:1:20","type":"","value":"8"},{"name":"bytes","nativeSrc":"7798:5:20","nodeType":"YulIdentifier","src":"7798:5:20"}],"functionName":{"name":"mul","nativeSrc":"7791:3:20","nodeType":"YulIdentifier","src":"7791:3:20"},"nativeSrc":"7791:13:20","nodeType":"YulFunctionCall","src":"7791:13:20"},{"arguments":[{"kind":"number","nativeSrc":"7810:1:20","nodeType":"YulLiteral","src":"7810:1:20","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"7806:3:20","nodeType":"YulIdentifier","src":"7806:3:20"},"nativeSrc":"7806:6:20","nodeType":"YulFunctionCall","src":"7806:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"7762:28:20","nodeType":"YulIdentifier","src":"7762:28:20"},"nativeSrc":"7762:51:20","nodeType":"YulFunctionCall","src":"7762:51:20"}],"functionName":{"name":"not","nativeSrc":"7758:3:20","nodeType":"YulIdentifier","src":"7758:3:20"},"nativeSrc":"7758:56:20","nodeType":"YulFunctionCall","src":"7758:56:20"},"variables":[{"name":"mask","nativeSrc":"7750:4:20","nodeType":"YulTypedName","src":"7750:4:20","type":""}]},{"nativeSrc":"7823:25:20","nodeType":"YulAssignment","src":"7823:25:20","value":{"arguments":[{"name":"data","nativeSrc":"7837:4:20","nodeType":"YulIdentifier","src":"7837:4:20"},{"name":"mask","nativeSrc":"7843:4:20","nodeType":"YulIdentifier","src":"7843:4:20"}],"functionName":{"name":"and","nativeSrc":"7833:3:20","nodeType":"YulIdentifier","src":"7833:3:20"},"nativeSrc":"7833:15:20","nodeType":"YulFunctionCall","src":"7833:15:20"},"variableNames":[{"name":"result","nativeSrc":"7823:6:20","nodeType":"YulIdentifier","src":"7823:6:20"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"7685:169:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7713:4:20","nodeType":"YulTypedName","src":"7713:4:20","type":""},{"name":"bytes","nativeSrc":"7719:5:20","nodeType":"YulTypedName","src":"7719:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"7729:6:20","nodeType":"YulTypedName","src":"7729:6:20","type":""}],"src":"7685:169:20"},{"body":{"nativeSrc":"7940:214:20","nodeType":"YulBlock","src":"7940:214:20","statements":[{"nativeSrc":"8073:37:20","nodeType":"YulAssignment","src":"8073:37:20","value":{"arguments":[{"name":"data","nativeSrc":"8100:4:20","nodeType":"YulIdentifier","src":"8100:4:20"},{"name":"len","nativeSrc":"8106:3:20","nodeType":"YulIdentifier","src":"8106:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"8081:18:20","nodeType":"YulIdentifier","src":"8081:18:20"},"nativeSrc":"8081:29:20","nodeType":"YulFunctionCall","src":"8081:29:20"},"variableNames":[{"name":"data","nativeSrc":"8073:4:20","nodeType":"YulIdentifier","src":"8073:4:20"}]},{"nativeSrc":"8119:29:20","nodeType":"YulAssignment","src":"8119:29:20","value":{"arguments":[{"name":"data","nativeSrc":"8130:4:20","nodeType":"YulIdentifier","src":"8130:4:20"},{"arguments":[{"kind":"number","nativeSrc":"8140:1:20","nodeType":"YulLiteral","src":"8140:1:20","type":"","value":"2"},{"name":"len","nativeSrc":"8143:3:20","nodeType":"YulIdentifier","src":"8143:3:20"}],"functionName":{"name":"mul","nativeSrc":"8136:3:20","nodeType":"YulIdentifier","src":"8136:3:20"},"nativeSrc":"8136:11:20","nodeType":"YulFunctionCall","src":"8136:11:20"}],"functionName":{"name":"or","nativeSrc":"8127:2:20","nodeType":"YulIdentifier","src":"8127:2:20"},"nativeSrc":"8127:21:20","nodeType":"YulFunctionCall","src":"8127:21:20"},"variableNames":[{"name":"used","nativeSrc":"8119:4:20","nodeType":"YulIdentifier","src":"8119:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"7859:295:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7921:4:20","nodeType":"YulTypedName","src":"7921:4:20","type":""},{"name":"len","nativeSrc":"7927:3:20","nodeType":"YulTypedName","src":"7927:3:20","type":""}],"returnVariables":[{"name":"used","nativeSrc":"7935:4:20","nodeType":"YulTypedName","src":"7935:4:20","type":""}],"src":"7859:295:20"},{"body":{"nativeSrc":"8251:1303:20","nodeType":"YulBlock","src":"8251:1303:20","statements":[{"nativeSrc":"8262:51:20","nodeType":"YulVariableDeclaration","src":"8262:51:20","value":{"arguments":[{"name":"src","nativeSrc":"8309:3:20","nodeType":"YulIdentifier","src":"8309:3:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"8276:32:20","nodeType":"YulIdentifier","src":"8276:32:20"},"nativeSrc":"8276:37:20","nodeType":"YulFunctionCall","src":"8276:37:20"},"variables":[{"name":"newLen","nativeSrc":"8266:6:20","nodeType":"YulTypedName","src":"8266:6:20","type":""}]},{"body":{"nativeSrc":"8398:22:20","nodeType":"YulBlock","src":"8398:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8400:16:20","nodeType":"YulIdentifier","src":"8400:16:20"},"nativeSrc":"8400:18:20","nodeType":"YulFunctionCall","src":"8400:18:20"},"nativeSrc":"8400:18:20","nodeType":"YulExpressionStatement","src":"8400:18:20"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"8370:6:20","nodeType":"YulIdentifier","src":"8370:6:20"},{"kind":"number","nativeSrc":"8378:18:20","nodeType":"YulLiteral","src":"8378:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8367:2:20","nodeType":"YulIdentifier","src":"8367:2:20"},"nativeSrc":"8367:30:20","nodeType":"YulFunctionCall","src":"8367:30:20"},"nativeSrc":"8364:56:20","nodeType":"YulIf","src":"8364:56:20"},{"nativeSrc":"8430:52:20","nodeType":"YulVariableDeclaration","src":"8430:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"8476:4:20","nodeType":"YulIdentifier","src":"8476:4:20"}],"functionName":{"name":"sload","nativeSrc":"8470:5:20","nodeType":"YulIdentifier","src":"8470:5:20"},"nativeSrc":"8470:11:20","nodeType":"YulFunctionCall","src":"8470:11:20"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"8444:25:20","nodeType":"YulIdentifier","src":"8444:25:20"},"nativeSrc":"8444:38:20","nodeType":"YulFunctionCall","src":"8444:38:20"},"variables":[{"name":"oldLen","nativeSrc":"8434:6:20","nodeType":"YulTypedName","src":"8434:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8575:4:20","nodeType":"YulIdentifier","src":"8575:4:20"},{"name":"oldLen","nativeSrc":"8581:6:20","nodeType":"YulIdentifier","src":"8581:6:20"},{"name":"newLen","nativeSrc":"8589:6:20","nodeType":"YulIdentifier","src":"8589:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"8529:45:20","nodeType":"YulIdentifier","src":"8529:45:20"},"nativeSrc":"8529:67:20","nodeType":"YulFunctionCall","src":"8529:67:20"},"nativeSrc":"8529:67:20","nodeType":"YulExpressionStatement","src":"8529:67:20"},{"nativeSrc":"8606:18:20","nodeType":"YulVariableDeclaration","src":"8606:18:20","value":{"kind":"number","nativeSrc":"8623:1:20","nodeType":"YulLiteral","src":"8623:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"8610:9:20","nodeType":"YulTypedName","src":"8610:9:20","type":""}]},{"nativeSrc":"8634:17:20","nodeType":"YulAssignment","src":"8634:17:20","value":{"kind":"number","nativeSrc":"8647:4:20","nodeType":"YulLiteral","src":"8647:4:20","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"8634:9:20","nodeType":"YulIdentifier","src":"8634:9:20"}]},{"cases":[{"body":{"nativeSrc":"8698:611:20","nodeType":"YulBlock","src":"8698:611:20","statements":[{"nativeSrc":"8712:37:20","nodeType":"YulVariableDeclaration","src":"8712:37:20","value":{"arguments":[{"name":"newLen","nativeSrc":"8731:6:20","nodeType":"YulIdentifier","src":"8731:6:20"},{"arguments":[{"kind":"number","nativeSrc":"8743:4:20","nodeType":"YulLiteral","src":"8743:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"8739:3:20","nodeType":"YulIdentifier","src":"8739:3:20"},"nativeSrc":"8739:9:20","nodeType":"YulFunctionCall","src":"8739:9:20"}],"functionName":{"name":"and","nativeSrc":"8727:3:20","nodeType":"YulIdentifier","src":"8727:3:20"},"nativeSrc":"8727:22:20","nodeType":"YulFunctionCall","src":"8727:22:20"},"variables":[{"name":"loopEnd","nativeSrc":"8716:7:20","nodeType":"YulTypedName","src":"8716:7:20","type":""}]},{"nativeSrc":"8763:51:20","nodeType":"YulVariableDeclaration","src":"8763:51:20","value":{"arguments":[{"name":"slot","nativeSrc":"8809:4:20","nodeType":"YulIdentifier","src":"8809:4:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"8777:31:20","nodeType":"YulIdentifier","src":"8777:31:20"},"nativeSrc":"8777:37:20","nodeType":"YulFunctionCall","src":"8777:37:20"},"variables":[{"name":"dstPtr","nativeSrc":"8767:6:20","nodeType":"YulTypedName","src":"8767:6:20","type":""}]},{"nativeSrc":"8827:10:20","nodeType":"YulVariableDeclaration","src":"8827:10:20","value":{"kind":"number","nativeSrc":"8836:1:20","nodeType":"YulLiteral","src":"8836:1:20","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8831:1:20","nodeType":"YulTypedName","src":"8831:1:20","type":""}]},{"body":{"nativeSrc":"8895:163:20","nodeType":"YulBlock","src":"8895:163:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8920:6:20","nodeType":"YulIdentifier","src":"8920:6:20"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8938:3:20","nodeType":"YulIdentifier","src":"8938:3:20"},{"name":"srcOffset","nativeSrc":"8943:9:20","nodeType":"YulIdentifier","src":"8943:9:20"}],"functionName":{"name":"add","nativeSrc":"8934:3:20","nodeType":"YulIdentifier","src":"8934:3:20"},"nativeSrc":"8934:19:20","nodeType":"YulFunctionCall","src":"8934:19:20"}],"functionName":{"name":"mload","nativeSrc":"8928:5:20","nodeType":"YulIdentifier","src":"8928:5:20"},"nativeSrc":"8928:26:20","nodeType":"YulFunctionCall","src":"8928:26:20"}],"functionName":{"name":"sstore","nativeSrc":"8913:6:20","nodeType":"YulIdentifier","src":"8913:6:20"},"nativeSrc":"8913:42:20","nodeType":"YulFunctionCall","src":"8913:42:20"},"nativeSrc":"8913:42:20","nodeType":"YulExpressionStatement","src":"8913:42:20"},{"nativeSrc":"8972:24:20","nodeType":"YulAssignment","src":"8972:24:20","value":{"arguments":[{"name":"dstPtr","nativeSrc":"8986:6:20","nodeType":"YulIdentifier","src":"8986:6:20"},{"kind":"number","nativeSrc":"8994:1:20","nodeType":"YulLiteral","src":"8994:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8982:3:20","nodeType":"YulIdentifier","src":"8982:3:20"},"nativeSrc":"8982:14:20","nodeType":"YulFunctionCall","src":"8982:14:20"},"variableNames":[{"name":"dstPtr","nativeSrc":"8972:6:20","nodeType":"YulIdentifier","src":"8972:6:20"}]},{"nativeSrc":"9013:31:20","nodeType":"YulAssignment","src":"9013:31:20","value":{"arguments":[{"name":"srcOffset","nativeSrc":"9030:9:20","nodeType":"YulIdentifier","src":"9030:9:20"},{"kind":"number","nativeSrc":"9041:2:20","nodeType":"YulLiteral","src":"9041:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9026:3:20","nodeType":"YulIdentifier","src":"9026:3:20"},"nativeSrc":"9026:18:20","nodeType":"YulFunctionCall","src":"9026:18:20"},"variableNames":[{"name":"srcOffset","nativeSrc":"9013:9:20","nodeType":"YulIdentifier","src":"9013:9:20"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8861:1:20","nodeType":"YulIdentifier","src":"8861:1:20"},{"name":"loopEnd","nativeSrc":"8864:7:20","nodeType":"YulIdentifier","src":"8864:7:20"}],"functionName":{"name":"lt","nativeSrc":"8858:2:20","nodeType":"YulIdentifier","src":"8858:2:20"},"nativeSrc":"8858:14:20","nodeType":"YulFunctionCall","src":"8858:14:20"},"nativeSrc":"8850:208:20","nodeType":"YulForLoop","post":{"nativeSrc":"8873:21:20","nodeType":"YulBlock","src":"8873:21:20","statements":[{"nativeSrc":"8875:17:20","nodeType":"YulAssignment","src":"8875:17:20","value":{"arguments":[{"name":"i","nativeSrc":"8884:1:20","nodeType":"YulIdentifier","src":"8884:1:20"},{"kind":"number","nativeSrc":"8887:4:20","nodeType":"YulLiteral","src":"8887:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8880:3:20","nodeType":"YulIdentifier","src":"8880:3:20"},"nativeSrc":"8880:12:20","nodeType":"YulFunctionCall","src":"8880:12:20"},"variableNames":[{"name":"i","nativeSrc":"8875:1:20","nodeType":"YulIdentifier","src":"8875:1:20"}]}]},"pre":{"nativeSrc":"8854:3:20","nodeType":"YulBlock","src":"8854:3:20","statements":[]},"src":"8850:208:20"},{"body":{"nativeSrc":"9094:156:20","nodeType":"YulBlock","src":"9094:156:20","statements":[{"nativeSrc":"9112:43:20","nodeType":"YulVariableDeclaration","src":"9112:43:20","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9139:3:20","nodeType":"YulIdentifier","src":"9139:3:20"},{"name":"srcOffset","nativeSrc":"9144:9:20","nodeType":"YulIdentifier","src":"9144:9:20"}],"functionName":{"name":"add","nativeSrc":"9135:3:20","nodeType":"YulIdentifier","src":"9135:3:20"},"nativeSrc":"9135:19:20","nodeType":"YulFunctionCall","src":"9135:19:20"}],"functionName":{"name":"mload","nativeSrc":"9129:5:20","nodeType":"YulIdentifier","src":"9129:5:20"},"nativeSrc":"9129:26:20","nodeType":"YulFunctionCall","src":"9129:26:20"},"variables":[{"name":"lastValue","nativeSrc":"9116:9:20","nodeType":"YulTypedName","src":"9116:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"9179:6:20","nodeType":"YulIdentifier","src":"9179:6:20"},{"arguments":[{"name":"lastValue","nativeSrc":"9206:9:20","nodeType":"YulIdentifier","src":"9206:9:20"},{"arguments":[{"name":"newLen","nativeSrc":"9221:6:20","nodeType":"YulIdentifier","src":"9221:6:20"},{"kind":"number","nativeSrc":"9229:4:20","nodeType":"YulLiteral","src":"9229:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"9217:3:20","nodeType":"YulIdentifier","src":"9217:3:20"},"nativeSrc":"9217:17:20","nodeType":"YulFunctionCall","src":"9217:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"9187:18:20","nodeType":"YulIdentifier","src":"9187:18:20"},"nativeSrc":"9187:48:20","nodeType":"YulFunctionCall","src":"9187:48:20"}],"functionName":{"name":"sstore","nativeSrc":"9172:6:20","nodeType":"YulIdentifier","src":"9172:6:20"},"nativeSrc":"9172:64:20","nodeType":"YulFunctionCall","src":"9172:64:20"},"nativeSrc":"9172:64:20","nodeType":"YulExpressionStatement","src":"9172:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"9077:7:20","nodeType":"YulIdentifier","src":"9077:7:20"},{"name":"newLen","nativeSrc":"9086:6:20","nodeType":"YulIdentifier","src":"9086:6:20"}],"functionName":{"name":"lt","nativeSrc":"9074:2:20","nodeType":"YulIdentifier","src":"9074:2:20"},"nativeSrc":"9074:19:20","nodeType":"YulFunctionCall","src":"9074:19:20"},"nativeSrc":"9071:179:20","nodeType":"YulIf","src":"9071:179:20"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"9270:4:20","nodeType":"YulIdentifier","src":"9270:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"9284:6:20","nodeType":"YulIdentifier","src":"9284:6:20"},{"kind":"number","nativeSrc":"9292:1:20","nodeType":"YulLiteral","src":"9292:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"9280:3:20","nodeType":"YulIdentifier","src":"9280:3:20"},"nativeSrc":"9280:14:20","nodeType":"YulFunctionCall","src":"9280:14:20"},{"kind":"number","nativeSrc":"9296:1:20","nodeType":"YulLiteral","src":"9296:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9276:3:20","nodeType":"YulIdentifier","src":"9276:3:20"},"nativeSrc":"9276:22:20","nodeType":"YulFunctionCall","src":"9276:22:20"}],"functionName":{"name":"sstore","nativeSrc":"9263:6:20","nodeType":"YulIdentifier","src":"9263:6:20"},"nativeSrc":"9263:36:20","nodeType":"YulFunctionCall","src":"9263:36:20"},"nativeSrc":"9263:36:20","nodeType":"YulExpressionStatement","src":"9263:36:20"}]},"nativeSrc":"8691:618:20","nodeType":"YulCase","src":"8691:618:20","value":{"kind":"number","nativeSrc":"8696:1:20","nodeType":"YulLiteral","src":"8696:1:20","type":"","value":"1"}},{"body":{"nativeSrc":"9326:222:20","nodeType":"YulBlock","src":"9326:222:20","statements":[{"nativeSrc":"9340:14:20","nodeType":"YulVariableDeclaration","src":"9340:14:20","value":{"kind":"number","nativeSrc":"9353:1:20","nodeType":"YulLiteral","src":"9353:1:20","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"9344:5:20","nodeType":"YulTypedName","src":"9344:5:20","type":""}]},{"body":{"nativeSrc":"9377:67:20","nodeType":"YulBlock","src":"9377:67:20","statements":[{"nativeSrc":"9395:35:20","nodeType":"YulAssignment","src":"9395:35:20","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9414:3:20","nodeType":"YulIdentifier","src":"9414:3:20"},{"name":"srcOffset","nativeSrc":"9419:9:20","nodeType":"YulIdentifier","src":"9419:9:20"}],"functionName":{"name":"add","nativeSrc":"9410:3:20","nodeType":"YulIdentifier","src":"9410:3:20"},"nativeSrc":"9410:19:20","nodeType":"YulFunctionCall","src":"9410:19:20"}],"functionName":{"name":"mload","nativeSrc":"9404:5:20","nodeType":"YulIdentifier","src":"9404:5:20"},"nativeSrc":"9404:26:20","nodeType":"YulFunctionCall","src":"9404:26:20"},"variableNames":[{"name":"value","nativeSrc":"9395:5:20","nodeType":"YulIdentifier","src":"9395:5:20"}]}]},"condition":{"name":"newLen","nativeSrc":"9370:6:20","nodeType":"YulIdentifier","src":"9370:6:20"},"nativeSrc":"9367:77:20","nodeType":"YulIf","src":"9367:77:20"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"9464:4:20","nodeType":"YulIdentifier","src":"9464:4:20"},{"arguments":[{"name":"value","nativeSrc":"9523:5:20","nodeType":"YulIdentifier","src":"9523:5:20"},{"name":"newLen","nativeSrc":"9530:6:20","nodeType":"YulIdentifier","src":"9530:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"9470:52:20","nodeType":"YulIdentifier","src":"9470:52:20"},"nativeSrc":"9470:67:20","nodeType":"YulFunctionCall","src":"9470:67:20"}],"functionName":{"name":"sstore","nativeSrc":"9457:6:20","nodeType":"YulIdentifier","src":"9457:6:20"},"nativeSrc":"9457:81:20","nodeType":"YulFunctionCall","src":"9457:81:20"},"nativeSrc":"9457:81:20","nodeType":"YulExpressionStatement","src":"9457:81:20"}]},"nativeSrc":"9318:230:20","nodeType":"YulCase","src":"9318:230:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"8671:6:20","nodeType":"YulIdentifier","src":"8671:6:20"},{"kind":"number","nativeSrc":"8679:2:20","nodeType":"YulLiteral","src":"8679:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"8668:2:20","nodeType":"YulIdentifier","src":"8668:2:20"},"nativeSrc":"8668:14:20","nodeType":"YulFunctionCall","src":"8668:14:20"},"nativeSrc":"8661:887:20","nodeType":"YulSwitch","src":"8661:887:20"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"8159:1395:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"8240:4:20","nodeType":"YulTypedName","src":"8240:4:20","type":""},{"name":"src","nativeSrc":"8246:3:20","nodeType":"YulTypedName","src":"8246:3:20","type":""}],"src":"8159:1395:20"},{"body":{"nativeSrc":"9625:53:20","nodeType":"YulBlock","src":"9625:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9642:3:20","nodeType":"YulIdentifier","src":"9642:3:20"},{"arguments":[{"name":"value","nativeSrc":"9665:5:20","nodeType":"YulIdentifier","src":"9665:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"9647:17:20","nodeType":"YulIdentifier","src":"9647:17:20"},"nativeSrc":"9647:24:20","nodeType":"YulFunctionCall","src":"9647:24:20"}],"functionName":{"name":"mstore","nativeSrc":"9635:6:20","nodeType":"YulIdentifier","src":"9635:6:20"},"nativeSrc":"9635:37:20","nodeType":"YulFunctionCall","src":"9635:37:20"},"nativeSrc":"9635:37:20","nodeType":"YulExpressionStatement","src":"9635:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"9560:118:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9613:5:20","nodeType":"YulTypedName","src":"9613:5:20","type":""},{"name":"pos","nativeSrc":"9620:3:20","nodeType":"YulTypedName","src":"9620:3:20","type":""}],"src":"9560:118:20"},{"body":{"nativeSrc":"9782:124:20","nodeType":"YulBlock","src":"9782:124:20","statements":[{"nativeSrc":"9792:26:20","nodeType":"YulAssignment","src":"9792:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"9804:9:20","nodeType":"YulIdentifier","src":"9804:9:20"},{"kind":"number","nativeSrc":"9815:2:20","nodeType":"YulLiteral","src":"9815:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9800:3:20","nodeType":"YulIdentifier","src":"9800:3:20"},"nativeSrc":"9800:18:20","nodeType":"YulFunctionCall","src":"9800:18:20"},"variableNames":[{"name":"tail","nativeSrc":"9792:4:20","nodeType":"YulIdentifier","src":"9792:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"9872:6:20","nodeType":"YulIdentifier","src":"9872:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"9885:9:20","nodeType":"YulIdentifier","src":"9885:9:20"},{"kind":"number","nativeSrc":"9896:1:20","nodeType":"YulLiteral","src":"9896:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"9881:3:20","nodeType":"YulIdentifier","src":"9881:3:20"},"nativeSrc":"9881:17:20","nodeType":"YulFunctionCall","src":"9881:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"9828:43:20","nodeType":"YulIdentifier","src":"9828:43:20"},"nativeSrc":"9828:71:20","nodeType":"YulFunctionCall","src":"9828:71:20"},"nativeSrc":"9828:71:20","nodeType":"YulExpressionStatement","src":"9828:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"9684:222:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9754:9:20","nodeType":"YulTypedName","src":"9754:9:20","type":""},{"name":"value0","nativeSrc":"9766:6:20","nodeType":"YulTypedName","src":"9766:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9777:4:20","nodeType":"YulTypedName","src":"9777:4:20","type":""}],"src":"9684:222:20"},{"body":{"nativeSrc":"10038:206:20","nodeType":"YulBlock","src":"10038:206:20","statements":[{"nativeSrc":"10048:26:20","nodeType":"YulAssignment","src":"10048:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"10060:9:20","nodeType":"YulIdentifier","src":"10060:9:20"},{"kind":"number","nativeSrc":"10071:2:20","nodeType":"YulLiteral","src":"10071:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10056:3:20","nodeType":"YulIdentifier","src":"10056:3:20"},"nativeSrc":"10056:18:20","nodeType":"YulFunctionCall","src":"10056:18:20"},"variableNames":[{"name":"tail","nativeSrc":"10048:4:20","nodeType":"YulIdentifier","src":"10048:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"10128:6:20","nodeType":"YulIdentifier","src":"10128:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"10141:9:20","nodeType":"YulIdentifier","src":"10141:9:20"},{"kind":"number","nativeSrc":"10152:1:20","nodeType":"YulLiteral","src":"10152:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10137:3:20","nodeType":"YulIdentifier","src":"10137:3:20"},"nativeSrc":"10137:17:20","nodeType":"YulFunctionCall","src":"10137:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"10084:43:20","nodeType":"YulIdentifier","src":"10084:43:20"},"nativeSrc":"10084:71:20","nodeType":"YulFunctionCall","src":"10084:71:20"},"nativeSrc":"10084:71:20","nodeType":"YulExpressionStatement","src":"10084:71:20"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"10209:6:20","nodeType":"YulIdentifier","src":"10209:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"10222:9:20","nodeType":"YulIdentifier","src":"10222:9:20"},{"kind":"number","nativeSrc":"10233:2:20","nodeType":"YulLiteral","src":"10233:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10218:3:20","nodeType":"YulIdentifier","src":"10218:3:20"},"nativeSrc":"10218:18:20","nodeType":"YulFunctionCall","src":"10218:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"10165:43:20","nodeType":"YulIdentifier","src":"10165:43:20"},"nativeSrc":"10165:72:20","nodeType":"YulFunctionCall","src":"10165:72:20"},"nativeSrc":"10165:72:20","nodeType":"YulExpressionStatement","src":"10165:72:20"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"9912:332:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10002:9:20","nodeType":"YulTypedName","src":"10002:9:20","type":""},{"name":"value1","nativeSrc":"10014:6:20","nodeType":"YulTypedName","src":"10014:6:20","type":""},{"name":"value0","nativeSrc":"10022:6:20","nodeType":"YulTypedName","src":"10022:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10033:4:20","nodeType":"YulTypedName","src":"10033:4:20","type":""}],"src":"9912:332:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051614c54380380614c54833981810160405281019061003291906103ff565b828585816000908161004491906106d3565b50806001908161005491906106d3565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c95760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100c091906107b4565b60405180910390fd5b6100d88161015960201b60201c565b5080826040516100e79061021f565b6100f29291906107cf565b604051809103906000f08015801561010e573d6000803e3d6000fd5b50600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506107f8565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61109380613bc183390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102938261024a565b810181811067ffffffffffffffff821117156102b2576102b161025b565b5b80604052505050565b60006102c561022c565b90506102d1828261028a565b919050565b600067ffffffffffffffff8211156102f1576102f061025b565b5b6102fa8261024a565b9050602081019050919050565b60005b8381101561032557808201518184015260208101905061030a565b60008484015250505050565b600061034461033f846102d6565b6102bb565b9050828152602081018484840111156103605761035f610245565b5b61036b848285610307565b509392505050565b600082601f83011261038857610387610240565b5b8151610398848260208601610331565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cc826103a1565b9050919050565b6103dc816103c1565b81146103e757600080fd5b50565b6000815190506103f9816103d3565b92915050565b600080600080600060a0868803121561041b5761041a610236565b5b600086015167ffffffffffffffff8111156104395761043861023b565b5b61044588828901610373565b955050602086015167ffffffffffffffff8111156104665761046561023b565b5b61047288828901610373565b9450506040610483888289016103ea565b9350506060610494888289016103ea565b92505060806104a5888289016103ea565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061050457607f821691505b602082108103610517576105166104bd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261057f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610542565b6105898683610542565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006105d06105cb6105c6846105a1565b6105ab565b6105a1565b9050919050565b6000819050919050565b6105ea836105b5565b6105fe6105f6826105d7565b84845461054f565b825550505050565b600090565b610613610606565b61061e8184846105e1565b505050565b5b818110156106425761063760008261060b565b600181019050610624565b5050565b601f821115610687576106588161051d565b61066184610532565b81016020851015610670578190505b61068461067c85610532565b830182610623565b50505b505050565b600082821c905092915050565b60006106aa6000198460080261068c565b1980831691505092915050565b60006106c38383610699565b9150826002028217905092915050565b6106dc826104b2565b67ffffffffffffffff8111156106f5576106f461025b565b5b6106ff82546104ec565b61070a828285610646565b600060209050601f83116001811461073d576000841561072b578287015190505b61073585826106b7565b86555061079d565b601f19841661074b8661051d565b60005b828110156107735784890151825560018201915060208501945060208101905061074e565b86831015610790578489015161078c601f891682610699565b8355505b6001600288020188555050505b505050505050565b6107ae816103c1565b82525050565b60006020820190506107c960008301846107a5565b92915050565b60006040820190506107e460008301856107a5565b6107f160208301846107a5565b9392505050565b6133ba806108076000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806375f2fc2c116100c3578063a91496411161007c578063a914964114610403578063b88d4fde14610421578063c87b56dd1461043d578063d3fc98641461046d578063e985e9c514610489578063f2fde38b146104b957610158565b806375f2fc2c146103175780638684e124146103475780638baafe131461037b5780638da5cb5b146103ab57806395d89b41146103c9578063a22cb465146103e757610158565b80632f745c59116101155780632f745c591461023157806341de982e1461026157806342842e0e146102915780636352211e146102ad57806370a08231146102dd578063715018a61461030d57610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db57806323b872dd146101f75780632cb7d92f14610213575b600080fd5b61017760048036038101906101729190612525565b6104d5565b604051610184919061256d565b60405180910390f35b610195610536565b6040516101a29190612618565b60405180910390f35b6101c560048036038101906101c09190612670565b6105c8565b6040516101d291906126de565b60405180910390f35b6101f560048036038101906101f09190612725565b6105e4565b005b610211600480360381019061020c9190612765565b6105fa565b005b61021b6106fc565b6040516102289190612817565b60405180910390f35b61024b60048036038101906102469190612725565b610722565b6040516102589190612841565b60405180910390f35b61027b6004803603810190610276919061285c565b610780565b6040516102889190612841565b60405180910390f35b6102ab60048036038101906102a69190612765565b6107c9565b005b6102c760048036038101906102c29190612670565b6107e9565b6040516102d491906126de565b60405180910390f35b6102f760048036038101906102f2919061285c565b6107fb565b6040516103049190612841565b60405180910390f35b6103156108b5565b005b610331600480360381019061032c9190612889565b6108c9565b60405161033e9190612841565b60405180910390f35b610361600480360381019061035c9190612670565b610971565b6040516103729594939291906128c9565b60405180910390f35b6103956004803603810190610390919061285c565b610b6f565b6040516103a29190612841565b60405180910390f35b6103b3610bb8565b6040516103c091906126de565b60405180910390f35b6103d1610be2565b6040516103de9190612618565b60405180910390f35b61040160048036038101906103fc919061295d565b610c74565b005b61040b610c8a565b6040516104189190612b4b565b60405180910390f35b61043b60048036038101906104369190612ca2565b610eff565b005b61045760048036038101906104529190612670565b610f1c565b6040516104649190612618565b60405180910390f35b61048760048036038101906104829190612d85565b61102f565b005b6104a3600480360381019061049e9190612df9565b61136a565b6040516104b0919061256d565b60405180910390f35b6104d360048036038101906104ce919061285c565b6113fe565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061052f575061052e82611484565b5b9050919050565b60606000805461054590612e68565b80601f016020809104026020016040519081016040528092919081815260200182805461057190612e68565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b5050505050905090565b60006105d382611566565b506105dd826115ee565b9050919050565b6105f682826105f161162b565b611633565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066c5760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161066391906126de565b60405180910390fd5b6000610680838361067b61162b565b611645565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106f6578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016106ed93929190612e99565b60405180910390fd5b50505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154905092915050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107e483838360405180602001604052806000815250610eff565b505050565b60006107f482611566565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086e5760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161086591906126de565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108bd61185f565b6108c760006118e6565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355eef30383856040518363ffffffff1660e01b8152600401610928929190612ed0565b602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190612f0e565b905092915050565b6009818154811061098157600080fd5b90600052602060002090600502016000915090508060000154908060010180546109aa90612e68565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690612e68565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505090806002018054610a3890612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6490612e68565b8015610ab15780601f10610a8657610100808354040283529160200191610ab1565b820191906000526020600020905b815481529060010190602001808311610a9457829003601f168201915b505050505090806003018054610ac690612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610af290612e68565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610bf190612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1d90612e68565b8015610c6a5780601f10610c3f57610100808354040283529160200191610c6a565b820191906000526020600020905b815481529060010190602001808311610c4d57829003601f168201915b5050505050905090565b610c86610c7f61162b565b83836119ac565b5050565b60606009805480602002602001604051908101604052809291908181526020016000905b82821015610ef657838290600052602060002090600502016040518060a001604052908160008201548152602001600182018054610ceb90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1790612e68565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b50505050508152602001600282018054610d7d90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610da990612e68565b8015610df65780601f10610dcb57610100808354040283529160200191610df6565b820191906000526020600020905b815481529060010190602001808311610dd957829003601f168201915b50505050508152602001600382018054610e0f90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3b90612e68565b8015610e885780601f10610e5d57610100808354040283529160200191610e88565b820191906000526020600020905b815481529060010190602001808311610e6b57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610cae565b50505050905090565b610f0a8484846105fa565b610f1684848484611b1b565b50505050565b6060610f2782611566565b506000600660008481526020019081526020016000208054610f4890612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7490612e68565b8015610fc15780601f10610f9657610100808354040283529160200191610fc1565b820191906000526020600020905b815481529060010190602001808311610fa457829003601f168201915b505050505090506000610fd2611cd2565b90506000815103610fe757819250505061102a565b60008251111561101c578082604051602001611004929190612f77565b6040516020818303038152906040529250505061102a565b61102584611ce9565b925050505b919050565b6110398484611d52565b6110878383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611e4b565b60005b611093336107fb565b81101561111357604051806020016040528085815250600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060008201518160000155905050808060010191505061108a565b506001600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111649190612fca565b925050819055506001600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111bb9190612fca565b9250508190555060006040518060a001604052808581526020016040518060400160405280600481526020017f4e616d650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f4465736372697074696f6e00000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f496d61676548617368000000000000000000000000000000000000000000000081525081526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060098190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010190816112ed91906131a0565b50604082015181600201908161130391906131a0565b50606082015181600301908161131991906131a0565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61140661185f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114785760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161146f91906126de565b60405180910390fd5b611481816118e6565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061154f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061155f575061155e82611ea7565b5b9050919050565b60008061157283611f11565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115e557826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115dc9190612841565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6116408383836001611f4e565b505050565b60008061165184611f11565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461169357611692818486612113565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611724576116d5600085600080611f4e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146117a7576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b61186761162b565b73ffffffffffffffffffffffffffffffffffffffff16611885610bb8565b73ffffffffffffffffffffffffffffffffffffffff16146118e4576118a861162b565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016118db91906126de565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a1d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611a1491906126de565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b0e919061256d565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611ccc578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5f61162b565b8685856040518563ffffffff1660e01b8152600401611b8194939291906132c7565b6020604051808303816000875af1925050508015611bbd57506040513d601f19601f82011682018060405250810190611bba9190613328565b60015b611c41573d8060008114611bed576040519150601f19603f3d011682016040523d82523d6000602084013e611bf2565b606091505b506000815103611c3957836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c3091906126de565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611cca57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611cc191906126de565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060611cf482611566565b506000611cff611cd2565b90506000815111611d1f5760405180602001604052806000815250611d4a565b80611d29846121d7565b604051602001611d3a929190612f77565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611dc45760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611dbb91906126de565b60405180910390fd5b6000611dd283836000611645565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611e465760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611e3d91906126de565b60405180910390fd5b505050565b80600660008481526020019081526020016000209081611e6b91906131a0565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611e9b9190612841565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611f875750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156120bb576000611f9784611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561200257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156120155750612013818461136a565b155b1561205757826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161204e91906126de565b60405180910390fd5b81156120b957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61211e8383836122a5565b6121d257600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361219357806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161218a9190612841565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016121c9929190612ed0565b60405180910390fd5b505050565b6060600060016121e684612366565b01905060008167ffffffffffffffff81111561220557612204612b77565b5b6040519080825280601f01601f1916602001820160405280156122375781602001600182028036833780820191505090505b509050600082602001820190505b60011561229a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161228e5761228d613355565b5b04945060008503612245575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561235d57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061231e575061231d848461136a565b5b8061235c57508273ffffffffffffffffffffffffffffffffffffffff16612344836115ee565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123c4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816123ba576123b9613355565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612401576d04ee2d6d415b85acef810000000083816123f7576123f6613355565b5b0492506020810190505b662386f26fc10000831061243057662386f26fc10000838161242657612425613355565b5b0492506010810190505b6305f5e1008310612459576305f5e100838161244f5761244e613355565b5b0492506008810190505b612710831061247e57612710838161247457612473613355565b5b0492506004810190505b606483106124a1576064838161249757612496613355565b5b0492506002810190505b600a83106124b0576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612502816124cd565b811461250d57600080fd5b50565b60008135905061251f816124f9565b92915050565b60006020828403121561253b5761253a6124c3565b5b600061254984828501612510565b91505092915050565b60008115159050919050565b61256781612552565b82525050565b6000602082019050612582600083018461255e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125c25780820151818401526020810190506125a7565b60008484015250505050565b6000601f19601f8301169050919050565b60006125ea82612588565b6125f48185612593565b93506126048185602086016125a4565b61260d816125ce565b840191505092915050565b6000602082019050818103600083015261263281846125df565b905092915050565b6000819050919050565b61264d8161263a565b811461265857600080fd5b50565b60008135905061266a81612644565b92915050565b600060208284031215612686576126856124c3565b5b60006126948482850161265b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126c88261269d565b9050919050565b6126d8816126bd565b82525050565b60006020820190506126f360008301846126cf565b92915050565b612702816126bd565b811461270d57600080fd5b50565b60008135905061271f816126f9565b92915050565b6000806040838503121561273c5761273b6124c3565b5b600061274a85828601612710565b925050602061275b8582860161265b565b9150509250929050565b60008060006060848603121561277e5761277d6124c3565b5b600061278c86828701612710565b935050602061279d86828701612710565b92505060406127ae8682870161265b565b9150509250925092565b6000819050919050565b60006127dd6127d86127d38461269d565b6127b8565b61269d565b9050919050565b60006127ef826127c2565b9050919050565b6000612801826127e4565b9050919050565b612811816127f6565b82525050565b600060208201905061282c6000830184612808565b92915050565b61283b8161263a565b82525050565b60006020820190506128566000830184612832565b92915050565b600060208284031215612872576128716124c3565b5b600061288084828501612710565b91505092915050565b600080604083850312156128a05761289f6124c3565b5b60006128ae8582860161265b565b92505060206128bf85828601612710565b9150509250929050565b600060a0820190506128de6000830188612832565b81810360208301526128f081876125df565b9050818103604083015261290481866125df565b9050818103606083015261291881856125df565b905061292760808301846126cf565b9695505050505050565b61293a81612552565b811461294557600080fd5b50565b60008135905061295781612931565b92915050565b60008060408385031215612974576129736124c3565b5b600061298285828601612710565b925050602061299385828601612948565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129d28161263a565b82525050565b600082825260208201905092915050565b60006129f482612588565b6129fe81856129d8565b9350612a0e8185602086016125a4565b612a17816125ce565b840191505092915050565b612a2b816126bd565b82525050565b600060a083016000830151612a4960008601826129c9565b5060208301518482036020860152612a6182826129e9565b91505060408301518482036040860152612a7b82826129e9565b91505060608301518482036060860152612a9582826129e9565b9150506080830151612aaa6080860182612a22565b508091505092915050565b6000612ac18383612a31565b905092915050565b6000602082019050919050565b6000612ae18261299d565b612aeb81856129a8565b935083602082028501612afd856129b9565b8060005b85811015612b395784840389528151612b1a8582612ab5565b9450612b2583612ac9565b925060208a01995050600181019050612b01565b50829750879550505050505092915050565b60006020820190508181036000830152612b658184612ad6565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612baf826125ce565b810181811067ffffffffffffffff82111715612bce57612bcd612b77565b5b80604052505050565b6000612be16124b9565b9050612bed8282612ba6565b919050565b600067ffffffffffffffff821115612c0d57612c0c612b77565b5b612c16826125ce565b9050602081019050919050565b82818337600083830152505050565b6000612c45612c4084612bf2565b612bd7565b905082815260208101848484011115612c6157612c60612b72565b5b612c6c848285612c23565b509392505050565b600082601f830112612c8957612c88612b6d565b5b8135612c99848260208601612c32565b91505092915050565b60008060008060808587031215612cbc57612cbb6124c3565b5b6000612cca87828801612710565b9450506020612cdb87828801612710565b9350506040612cec8782880161265b565b925050606085013567ffffffffffffffff811115612d0d57612d0c6124c8565b5b612d1987828801612c74565b91505092959194509250565b600080fd5b600080fd5b60008083601f840112612d4557612d44612b6d565b5b8235905067ffffffffffffffff811115612d6257612d61612d25565b5b602083019150836001820283011115612d7e57612d7d612d2a565b5b9250929050565b60008060008060608587031215612d9f57612d9e6124c3565b5b6000612dad87828801612710565b9450506020612dbe8782880161265b565b935050604085013567ffffffffffffffff811115612ddf57612dde6124c8565b5b612deb87828801612d2f565b925092505092959194509250565b60008060408385031215612e1057612e0f6124c3565b5b6000612e1e85828601612710565b9250506020612e2f85828601612710565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e8057607f821691505b602082108103612e9357612e92612e39565b5b50919050565b6000606082019050612eae60008301866126cf565b612ebb6020830185612832565b612ec860408301846126cf565b949350505050565b6000604082019050612ee560008301856126cf565b612ef26020830184612832565b9392505050565b600081519050612f0881612644565b92915050565b600060208284031215612f2457612f236124c3565b5b6000612f3284828501612ef9565b91505092915050565b600081905092915050565b6000612f5182612588565b612f5b8185612f3b565b9350612f6b8185602086016125a4565b80840191505092915050565b6000612f838285612f46565b9150612f8f8284612f46565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fd58261263a565b9150612fe08361263a565b9250828201905080821115612ff857612ff7612f9b565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613023565b61306a8683613023565b95508019841693508086168417925050509392505050565b600061309d6130986130938461263a565b6127b8565b61263a565b9050919050565b6000819050919050565b6130b783613082565b6130cb6130c3826130a4565b848454613030565b825550505050565b600090565b6130e06130d3565b6130eb8184846130ae565b505050565b5b8181101561310f576131046000826130d8565b6001810190506130f1565b5050565b601f8211156131545761312581612ffe565b61312e84613013565b8101602085101561313d578190505b61315161314985613013565b8301826130f0565b50505b505050565b600082821c905092915050565b600061317760001984600802613159565b1980831691505092915050565b60006131908383613166565b9150826002028217905092915050565b6131a982612588565b67ffffffffffffffff8111156131c2576131c1612b77565b5b6131cc8254612e68565b6131d7828285613113565b600060209050601f83116001811461320a57600084156131f8578287015190505b6132028582613184565b86555061326a565b601f19841661321886612ffe565b60005b828110156132405784890151825560018201915060208501945060208101905061321b565b8683101561325d5784890151613259601f891682613166565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b600061329982613272565b6132a3818561327d565b93506132b38185602086016125a4565b6132bc816125ce565b840191505092915050565b60006080820190506132dc60008301876126cf565b6132e960208301866126cf565b6132f66040830185612832565b8181036060830152613308818461328e565b905095945050505050565b600081519050613322816124f9565b92915050565b60006020828403121561333e5761333d6124c3565b5b600061334c84828501613313565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220e37662c6aa77e81bbfd434a67fa600e33326d3614212429f998bd955b6d156e764736f6c634300081b0033608060405234801561001057600080fd5b506040516110933803806110938339818101604052810190610032919061011d565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b610f278061016c6000396000f3fe6080604052600436106100915760003560e01c806380c7d5e11161005957806380c7d5e11461017e578063810b8145146101bb578063d56d229d146101f8578063d9af03ef14610223578063df82498c1461026057610091565b80631a8398d41461009657806352f5ad77146100b257806353a6b941146100db57806355eef30314610118578063779f770714610155575b600080fd5b6100b060048036038101906100ab9190610a91565b61029d565b005b3480156100be57600080fd5b506100d960048036038101906100d49190610ad1565b61061b565b005b3480156100e757600080fd5b5061010260048036038101906100fd9190610ad1565b61065e565b60405161010f9190610b19565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610a91565b61067e565b60405161014c9190610b43565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610b5e565b6106d9565b005b34801561018a57600080fd5b506101a560048036038101906101a09190610ad1565b610828565b6040516101b29190610b43565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd9190610a91565b610840565b6040516101ef9190610b43565b60405180910390f35b34801561020457600080fd5b5061020d610865565b60405161021a9190610bfd565b60405180910390f35b34801561022f57600080fd5b5061024a60048036038101906102459190610ad1565b610889565b6040516102579190610b43565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190610ad1565b6108d2565b6040516102949190610b19565b60405180910390f35b8173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161030d9190610b43565b602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610c2d565b73ffffffffffffffffffffffffffffffffffffffff161461039b576040517f6c8b88df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610425576040517fab09bb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020546104ab600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b036105e5576001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008273ffffffffffffffffffffffffffffffffffffffff16610556600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092890919063ffffffff16565b60405161056290610c8b565b60006040518083038185875af1925050503d806000811461059f576040519150601f19603f3d011682016040523d82523d6000602084013e6105a4565b606091505b50509050806105df576040517f312585c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610617565b6040517ffb77229500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008111610713576040517f8209ab4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610748600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261092890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167f51991dac21fa3f9c470153885bded81e15400ea0307d507104bd32152aea965860405160405180910390a35050565b60036020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008061093483610964565b90506000670de0b6b3a7640000858361094d9190610ccf565b6109579190610d40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190610dfe565b505050915050670de0b6b3a7640000816109f09190610e79565b915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a28826109fd565b9050919050565b610a3881610a1d565b8114610a4357600080fd5b50565b600081359050610a5581610a2f565b92915050565b6000819050919050565b610a6e81610a5b565b8114610a7957600080fd5b50565b600081359050610a8b81610a65565b92915050565b60008060408385031215610aa857610aa76109f8565b5b6000610ab685828601610a46565b9250506020610ac785828601610a7c565b9150509250929050565b600060208284031215610ae757610ae66109f8565b5b6000610af584828501610a46565b91505092915050565b60008115159050919050565b610b1381610afe565b82525050565b6000602082019050610b2e6000830184610b0a565b92915050565b610b3d81610a5b565b82525050565b6000602082019050610b586000830184610b34565b92915050565b60008060408385031215610b7557610b746109f8565b5b6000610b8385828601610a7c565b9250506020610b9485828601610a7c565b9150509250929050565b6000819050919050565b6000610bc3610bbe610bb9846109fd565b610b9e565b6109fd565b9050919050565b6000610bd582610ba8565b9050919050565b6000610be782610bca565b9050919050565b610bf781610bdc565b82525050565b6000602082019050610c126000830184610bee565b92915050565b600081519050610c2781610a2f565b92915050565b600060208284031215610c4357610c426109f8565b5b6000610c5184828501610c18565b91505092915050565b600081905092915050565b50565b6000610c75600083610c5a565b9150610c8082610c65565b600082019050919050565b6000610c9682610c68565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cda82610a5b565b9150610ce583610a5b565b9250828202610cf381610a5b565b91508282048414831517610d0a57610d09610ca0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d4b82610a5b565b9150610d5683610a5b565b925082610d6657610d65610d11565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9081610d71565b8114610d9b57600080fd5b50565b600081519050610dad81610d87565b92915050565b6000819050919050565b610dc681610db3565b8114610dd157600080fd5b50565b600081519050610de381610dbd565b92915050565b600081519050610df881610a65565b92915050565b600080600080600060a08688031215610e1a57610e196109f8565b5b6000610e2888828901610d9e565b9550506020610e3988828901610dd4565b9450506040610e4a88828901610de9565b9350506060610e5b88828901610de9565b9250506080610e6c88828901610d9e565b9150509295509295909350565b6000610e8482610db3565b9150610e8f83610db3565b9250828202610e9d81610db3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ed557610ed4610ca0565b5b8282058414831517610eea57610ee9610ca0565b5b509291505056fea2646970667358221220473cd60ec302577a690a6577cad0b2835162c2c0c737cbb3bf4ff47cce655fc864736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x4C54 CODESIZE SUB DUP1 PUSH2 0x4C54 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x3FF JUMP JUMPDEST DUP3 DUP6 DUP6 DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0x44 SWAP2 SWAP1 PUSH2 0x6D3 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x54 SWAP2 SWAP1 PUSH2 0x6D3 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD8 DUP2 PUSH2 0x159 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP1 PUSH2 0x21F JUMP JUMPDEST PUSH2 0xF2 SWAP3 SWAP2 SWAP1 PUSH2 0x7CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x10E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP PUSH2 0x7F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1093 DUP1 PUSH2 0x3BC1 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x293 DUP3 PUSH2 0x24A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2B2 JUMPI PUSH2 0x2B1 PUSH2 0x25B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP1 POP PUSH2 0x2D1 DUP3 DUP3 PUSH2 0x28A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0x2F0 PUSH2 0x25B JUMP JUMPDEST JUMPDEST PUSH2 0x2FA DUP3 PUSH2 0x24A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x325 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x344 PUSH2 0x33F DUP5 PUSH2 0x2D6 JUMP JUMPDEST PUSH2 0x2BB JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x360 JUMPI PUSH2 0x35F PUSH2 0x245 JUMP JUMPDEST JUMPDEST PUSH2 0x36B DUP5 DUP3 DUP6 PUSH2 0x307 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x388 JUMPI PUSH2 0x387 PUSH2 0x240 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x398 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x331 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC DUP3 PUSH2 0x3A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DC DUP2 PUSH2 0x3C1 JUMP JUMPDEST DUP2 EQ PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3F9 DUP2 PUSH2 0x3D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x41B JUMPI PUSH2 0x41A PUSH2 0x236 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x439 JUMPI PUSH2 0x438 PUSH2 0x23B JUMP JUMPDEST JUMPDEST PUSH2 0x445 DUP9 DUP3 DUP10 ADD PUSH2 0x373 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x466 JUMPI PUSH2 0x465 PUSH2 0x23B JUMP JUMPDEST JUMPDEST PUSH2 0x472 DUP9 DUP3 DUP10 ADD PUSH2 0x373 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x483 DUP9 DUP3 DUP10 ADD PUSH2 0x3EA JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x494 DUP9 DUP3 DUP10 ADD PUSH2 0x3EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x4A5 DUP9 DUP3 DUP10 ADD PUSH2 0x3EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x504 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x517 JUMPI PUSH2 0x516 PUSH2 0x4BD JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x57F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x542 JUMP JUMPDEST PUSH2 0x589 DUP7 DUP4 PUSH2 0x542 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH2 0x5CB PUSH2 0x5C6 DUP5 PUSH2 0x5A1 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x5A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5EA DUP4 PUSH2 0x5B5 JUMP JUMPDEST PUSH2 0x5FE PUSH2 0x5F6 DUP3 PUSH2 0x5D7 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x54F JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x613 PUSH2 0x606 JUMP JUMPDEST PUSH2 0x61E DUP2 DUP5 DUP5 PUSH2 0x5E1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH2 0x637 PUSH1 0x0 DUP3 PUSH2 0x60B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x624 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x687 JUMPI PUSH2 0x658 DUP2 PUSH2 0x51D JUMP JUMPDEST PUSH2 0x661 DUP5 PUSH2 0x532 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x670 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x684 PUSH2 0x67C DUP6 PUSH2 0x532 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x623 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6AA PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x68C JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C3 DUP4 DUP4 PUSH2 0x699 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6DC DUP3 PUSH2 0x4B2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F5 JUMPI PUSH2 0x6F4 PUSH2 0x25B JUMP JUMPDEST JUMPDEST PUSH2 0x6FF DUP3 SLOAD PUSH2 0x4EC JUMP JUMPDEST PUSH2 0x70A DUP3 DUP3 DUP6 PUSH2 0x646 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x73D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x72B JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x735 DUP6 DUP3 PUSH2 0x6B7 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x79D JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x74B DUP7 PUSH2 0x51D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x773 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x74E JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x790 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x78C PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x699 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7AE DUP2 PUSH2 0x3C1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7C9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x7A5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x7E4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x7A5 JUMP JUMPDEST PUSH2 0x7F1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7A5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x33BA DUP1 PUSH2 0x807 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75F2FC2C GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xA9149641 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA9149641 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD3FC9864 EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B9 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x75F2FC2C EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x8684E124 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x8BAAFE13 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3E7 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x2F745C59 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x41DE982E EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x30D JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x2CB7D92F EQ PUSH2 0x213 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x2525 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x184 SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x195 PUSH2 0x536 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x5C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x5FA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x21B PUSH2 0x6FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x258 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x276 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x780 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x7C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x315 PUSH2 0x8B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x331 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32C SWAP2 SWAP1 PUSH2 0x2889 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x372 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x395 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x390 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0xB6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A2 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B3 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D1 PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x401 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x295D JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x40B PUSH2 0xC8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x2B4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x43B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x487 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x482 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH2 0x102F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49E SWAP2 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B0 SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CE SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x13FE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x52F JUMPI POP PUSH2 0x52E DUP3 PUSH2 0x1484 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x545 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x571 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5BE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x593 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5BE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5A1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D3 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH2 0x5DD DUP3 PUSH2 0x15EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5F6 DUP3 DUP3 PUSH2 0x5F1 PUSH2 0x162B JUMP JUMPDEST PUSH2 0x1633 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x66C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x663 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x680 DUP4 DUP4 PUSH2 0x67B PUSH2 0x162B JUMP JUMPDEST PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6F6 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6ED SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E99 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEFF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F4 DUP3 PUSH2 0x1566 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8BD PUSH2 0x185F JUMP JUMPDEST PUSH2 0x8C7 PUSH1 0x0 PUSH2 0x18E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x55EEF303 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x928 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x945 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x969 SWAP2 SWAP1 PUSH2 0x2F0E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x9AA SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9D6 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA23 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA23 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA06 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xA38 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA64 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAB1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA86 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAB1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA94 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0xAC6 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAF2 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB3F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB14 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB3F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB22 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xBF1 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC1D SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC6A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC3F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC6A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC4D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC86 PUSH2 0xC7F PUSH2 0x162B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x19AC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xEF6 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xCEB SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD17 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD64 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD39 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD64 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD47 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0xD7D SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDA9 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDF6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDCB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDF6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDD9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xE0F SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE3B SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE88 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE5D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE88 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE6B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xCAE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF0A DUP5 DUP5 DUP5 PUSH2 0x5FA JUMP JUMPDEST PUSH2 0xF16 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B1B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF27 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xF48 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF74 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFC1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF96 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFC1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFA4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xFD2 PUSH2 0x1CD2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xFE7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x102A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x101C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1004 SWAP3 SWAP2 SWAP1 PUSH2 0x2F77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x102A JUMP JUMPDEST PUSH2 0x1025 DUP5 PUSH2 0x1CE9 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP5 DUP5 PUSH2 0x1D52 JUMP JUMPDEST PUSH2 0x1087 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x1E4B JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH2 0x1093 CALLER PUSH2 0x7FB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x108A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1164 SWAP2 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E616D6500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465736372697074696F6E000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x496D616765486173680000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x9 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1303 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x1319 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1406 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1478 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146F SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1481 DUP2 PUSH2 0x18E6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x154F JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x155F JUMPI POP PUSH2 0x155E DUP3 PUSH2 0x1EA7 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1572 DUP4 PUSH2 0x1F11 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15E5 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15DC SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1640 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1651 DUP5 PUSH2 0x1F11 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1693 JUMPI PUSH2 0x1692 DUP2 DUP5 DUP7 PUSH2 0x2113 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1724 JUMPI PUSH2 0x16D5 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1F4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17A7 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1867 PUSH2 0x162B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1885 PUSH2 0xBB8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18E4 JUMPI PUSH2 0x18A8 PUSH2 0x162B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18DB SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A1D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A14 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1B0E SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1CCC JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1B5F PUSH2 0x162B JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B81 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32C7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1BBD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BBA SWAP2 SWAP1 PUSH2 0x3328 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C41 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1C39 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C30 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1CCA JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CC1 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1CF4 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1CFF PUSH2 0x1CD2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D4A JUMP JUMPDEST DUP1 PUSH2 0x1D29 DUP5 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D3A SWAP3 SWAP2 SWAP1 PUSH2 0x2F77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DC4 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DBB SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DD2 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E46 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3D SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1E9B SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1F87 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x20BB JUMPI PUSH1 0x0 PUSH2 0x1F97 DUP5 PUSH2 0x1566 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2002 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2015 JUMPI POP PUSH2 0x2013 DUP2 DUP5 PUSH2 0x136A JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2057 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x204E SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x20B9 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x211E DUP4 DUP4 DUP4 PUSH2 0x22A5 JUMP JUMPDEST PUSH2 0x21D2 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2193 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x218A SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21C9 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x21E6 DUP5 PUSH2 0x2366 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2205 JUMPI PUSH2 0x2204 PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2237 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x229A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x228E JUMPI PUSH2 0x228D PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2245 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x235D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x231E JUMPI POP PUSH2 0x231D DUP5 DUP5 PUSH2 0x136A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x235C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2344 DUP4 PUSH2 0x15EE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x23C4 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x23BA JUMPI PUSH2 0x23B9 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2401 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x23F7 JUMPI PUSH2 0x23F6 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2430 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2426 JUMPI PUSH2 0x2425 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2459 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x244F JUMPI PUSH2 0x244E PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x247E JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2474 JUMPI PUSH2 0x2473 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x24A1 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2497 JUMPI PUSH2 0x2496 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24B0 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2502 DUP2 PUSH2 0x24CD JUMP JUMPDEST DUP2 EQ PUSH2 0x250D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x251F DUP2 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x253B JUMPI PUSH2 0x253A PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2549 DUP5 DUP3 DUP6 ADD PUSH2 0x2510 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2567 DUP2 PUSH2 0x2552 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2582 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x255E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25A7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25EA DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x25F4 DUP2 DUP6 PUSH2 0x2593 JUMP JUMPDEST SWAP4 POP PUSH2 0x2604 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x260D DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2632 DUP2 DUP5 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x264D DUP2 PUSH2 0x263A JUMP JUMPDEST DUP2 EQ PUSH2 0x2658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x266A DUP2 PUSH2 0x2644 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2686 JUMPI PUSH2 0x2685 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2694 DUP5 DUP3 DUP6 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C8 DUP3 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26D8 DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26F3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2702 DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP2 EQ PUSH2 0x270D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x271F DUP2 PUSH2 0x26F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x273C JUMPI PUSH2 0x273B PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x274A DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x275B DUP6 DUP3 DUP7 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x277E JUMPI PUSH2 0x277D PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x278C DUP7 DUP3 DUP8 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x279D DUP7 DUP3 DUP8 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x27AE DUP7 DUP3 DUP8 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DD PUSH2 0x27D8 PUSH2 0x27D3 DUP5 PUSH2 0x269D JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EF DUP3 PUSH2 0x27C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2801 DUP3 PUSH2 0x27E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2811 DUP2 PUSH2 0x27F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x282C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2808 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x283B DUP2 PUSH2 0x263A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2856 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2832 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2872 JUMPI PUSH2 0x2871 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2880 DUP5 DUP3 DUP6 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A0 JUMPI PUSH2 0x289F PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28AE DUP6 DUP3 DUP7 ADD PUSH2 0x265B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x28DE PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2832 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x28F0 DUP2 DUP8 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2904 DUP2 DUP7 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2918 DUP2 DUP6 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP PUSH2 0x2927 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x293A DUP2 PUSH2 0x2552 JUMP JUMPDEST DUP2 EQ PUSH2 0x2945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2957 DUP2 PUSH2 0x2931 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2974 JUMPI PUSH2 0x2973 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2982 DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2993 DUP6 DUP3 DUP7 ADD PUSH2 0x2948 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29D2 DUP2 PUSH2 0x263A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F4 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x29FE DUP2 DUP6 PUSH2 0x29D8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2A0E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x2A17 DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A2B DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x2A49 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x29C9 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x2A61 DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2A7B DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2A95 DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2AAA PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2A22 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AC1 DUP4 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AE1 DUP3 PUSH2 0x299D JUMP JUMPDEST PUSH2 0x2AEB DUP2 DUP6 PUSH2 0x29A8 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2AFD DUP6 PUSH2 0x29B9 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2B39 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x2B1A DUP6 DUP3 PUSH2 0x2AB5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2B25 DUP4 PUSH2 0x2AC9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2B01 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B65 DUP2 DUP5 PUSH2 0x2AD6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2BAF DUP3 PUSH2 0x25CE JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2BCE JUMPI PUSH2 0x2BCD PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE1 PUSH2 0x24B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2BED DUP3 DUP3 PUSH2 0x2BA6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2C0D JUMPI PUSH2 0x2C0C PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH2 0x2C16 DUP3 PUSH2 0x25CE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C45 PUSH2 0x2C40 DUP5 PUSH2 0x2BF2 JUMP JUMPDEST PUSH2 0x2BD7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2C61 JUMPI PUSH2 0x2C60 PUSH2 0x2B72 JUMP JUMPDEST JUMPDEST PUSH2 0x2C6C DUP5 DUP3 DUP6 PUSH2 0x2C23 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C89 JUMPI PUSH2 0x2C88 PUSH2 0x2B6D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2C99 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2C32 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2CBC JUMPI PUSH2 0x2CBB PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CCA DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2CDB DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2CEC DUP8 DUP3 DUP9 ADD PUSH2 0x265B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D0D JUMPI PUSH2 0x2D0C PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST PUSH2 0x2D19 DUP8 DUP3 DUP9 ADD PUSH2 0x2C74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2D45 JUMPI PUSH2 0x2D44 PUSH2 0x2B6D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D62 JUMPI PUSH2 0x2D61 PUSH2 0x2D25 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2D7E JUMPI PUSH2 0x2D7D PUSH2 0x2D2A JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2D9F JUMPI PUSH2 0x2D9E PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DAD DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2DBE DUP8 DUP3 DUP9 ADD PUSH2 0x265B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DDF JUMPI PUSH2 0x2DDE PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST PUSH2 0x2DEB DUP8 DUP3 DUP9 ADD PUSH2 0x2D2F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E10 JUMPI PUSH2 0x2E0F PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E1E DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E2F DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2E80 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2E93 JUMPI PUSH2 0x2E92 PUSH2 0x2E39 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2EAE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x2EBB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2832 JUMP JUMPDEST PUSH2 0x2EC8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EE5 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x2EF2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2832 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F08 DUP2 PUSH2 0x2644 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F24 JUMPI PUSH2 0x2F23 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F32 DUP5 DUP3 DUP6 ADD PUSH2 0x2EF9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F51 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x2F5B DUP2 DUP6 PUSH2 0x2F3B JUMP JUMPDEST SWAP4 POP PUSH2 0x2F6B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F83 DUP3 DUP6 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8F DUP3 DUP5 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2FD5 DUP3 PUSH2 0x263A JUMP JUMPDEST SWAP2 POP PUSH2 0x2FE0 DUP4 PUSH2 0x263A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2FF8 JUMPI PUSH2 0x2FF7 PUSH2 0x2F9B JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3060 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3023 JUMP JUMPDEST PUSH2 0x306A DUP7 DUP4 PUSH2 0x3023 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309D PUSH2 0x3098 PUSH2 0x3093 DUP5 PUSH2 0x263A JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x263A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30B7 DUP4 PUSH2 0x3082 JUMP JUMPDEST PUSH2 0x30CB PUSH2 0x30C3 DUP3 PUSH2 0x30A4 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3030 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x30E0 PUSH2 0x30D3 JUMP JUMPDEST PUSH2 0x30EB DUP2 DUP5 DUP5 PUSH2 0x30AE JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x310F JUMPI PUSH2 0x3104 PUSH1 0x0 DUP3 PUSH2 0x30D8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x30F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3154 JUMPI PUSH2 0x3125 DUP2 PUSH2 0x2FFE JUMP JUMPDEST PUSH2 0x312E DUP5 PUSH2 0x3013 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x313D JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3151 PUSH2 0x3149 DUP6 PUSH2 0x3013 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x30F0 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3177 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3159 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3190 DUP4 DUP4 PUSH2 0x3166 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x31A9 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31C2 JUMPI PUSH2 0x31C1 PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH2 0x31CC DUP3 SLOAD PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x31D7 DUP3 DUP3 DUP6 PUSH2 0x3113 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x320A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x31F8 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3202 DUP6 DUP3 PUSH2 0x3184 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x326A JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3218 DUP7 PUSH2 0x2FFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3240 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x321B JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x325D JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3259 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3166 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3299 DUP3 PUSH2 0x3272 JUMP JUMPDEST PUSH2 0x32A3 DUP2 DUP6 PUSH2 0x327D JUMP JUMPDEST SWAP4 POP PUSH2 0x32B3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x32BC DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x32DC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x32E9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x32F6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2832 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3308 DUP2 DUP5 PUSH2 0x328E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3322 DUP2 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x333E JUMPI PUSH2 0x333D PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x334C DUP5 DUP3 DUP6 ADD PUSH2 0x3313 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 PUSH23 0x62C6AA77E81BBFD434A67FA600E33326D3614212429F99 DUP12 0xD9 SSTORE 0xB6 0xD1 JUMP 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1093 CODESIZE SUB DUP1 PUSH2 0x1093 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x11D JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x15D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA DUP3 PUSH2 0xBF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA DUP2 PUSH2 0xDF JUMP JUMPDEST DUP2 EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x117 DUP2 PUSH2 0xF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134 JUMPI PUSH2 0x133 PUSH2 0xBA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x142 DUP6 DUP3 DUP7 ADD PUSH2 0x108 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x153 DUP6 DUP3 DUP7 ADD PUSH2 0x108 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xF27 DUP1 PUSH2 0x16C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80C7D5E1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x80C7D5E1 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x810B8145 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xD56D229D EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xD9AF03EF EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0xDF82498C EQ PUSH2 0x260 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x1A8398D4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x52F5AD77 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x53A6B941 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x55EEF303 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x779F7707 EQ PUSH2 0x155 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFD SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x828 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x865 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21A SWAP2 SWAP1 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x245 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0xAD1 JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30D SWAP2 SWAP1 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x39B JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C8B88DF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO SUB PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAB09BB1400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4AB PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SUB PUSH2 0x5E5 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x556 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x562 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x59F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x312585C900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFB77229500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x713 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8209AB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x748 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x51991DAC21FA3F9C470153885BDED81E15400EA0307D507104BD32152AEA9658 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x934 DUP4 PUSH2 0x964 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 DUP4 PUSH2 0x94D SWAP2 SWAP1 PUSH2 0xCCF JUMP JUMPDEST PUSH2 0x957 SWAP2 SWAP1 PUSH2 0xD40 JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9D6 SWAP2 SWAP1 PUSH2 0xDFE JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0xE79 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA28 DUP3 PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA38 DUP2 PUSH2 0xA1D JUMP JUMPDEST DUP2 EQ PUSH2 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA55 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA6E DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP2 EQ PUSH2 0xA79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xA8B DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAA8 JUMPI PUSH2 0xAA7 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAB6 DUP6 DUP3 DUP7 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAC7 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE7 JUMPI PUSH2 0xAE6 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAF5 DUP5 DUP3 DUP6 ADD PUSH2 0xA46 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB13 DUP2 PUSH2 0xAFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB0A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB3D DUP2 PUSH2 0xA5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB34 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB74 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB94 DUP6 DUP3 DUP7 ADD PUSH2 0xA7C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC3 PUSH2 0xBBE PUSH2 0xBB9 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x9FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD5 DUP3 PUSH2 0xBA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBE7 DUP3 PUSH2 0xBCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBF7 DUP2 PUSH2 0xBDC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC12 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBEE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xC27 DUP2 PUSH2 0xA2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC43 JUMPI PUSH2 0xC42 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC51 DUP5 DUP3 DUP6 ADD PUSH2 0xC18 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC75 PUSH1 0x0 DUP4 PUSH2 0xC5A JUMP JUMPDEST SWAP2 POP PUSH2 0xC80 DUP3 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC96 DUP3 PUSH2 0xC68 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDA DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xCE5 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xCF3 DUP2 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xD0A JUMPI PUSH2 0xD09 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD4B DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP2 POP PUSH2 0xD56 DUP4 PUSH2 0xA5B JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xD66 JUMPI PUSH2 0xD65 PUSH2 0xD11 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD90 DUP2 PUSH2 0xD71 JUMP JUMPDEST DUP2 EQ PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDAD DUP2 PUSH2 0xD87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDC6 DUP2 PUSH2 0xDB3 JUMP JUMPDEST DUP2 EQ PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDE3 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xDF8 DUP2 PUSH2 0xA65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xE1A JUMPI PUSH2 0xE19 PUSH2 0x9F8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xE39 DUP9 DUP3 DUP10 ADD PUSH2 0xDD4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xE4A DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xE5B DUP9 DUP3 DUP10 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0xE6C DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE84 DUP3 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH2 0xE8F DUP4 PUSH2 0xDB3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xE9D DUP2 PUSH2 0xDB3 JUMP JUMPDEST SWAP2 POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP5 EQ PUSH1 0x0 DUP5 SLT AND ISZERO PUSH2 0xED5 JUMPI PUSH2 0xED4 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SDIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xEEA JUMPI PUSH2 0xEE9 PUSH2 0xCA0 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE EXTCODECOPY 0xD6 0xE 0xC3 MUL JUMPI PUSH27 0x690A6577CAD0B2835162C2C0C737CBB3BF4FF47CCE655FC864736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"395:2264:18:-:0;;;962:240;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1114:12;1093:4;1098:6;1455:5:6;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;1297:1:1;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1163:9:18::2;1173:22;1151:45;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;1133:15;;:63;;;;;;;;;;;;;;;;;;962:240:::0;;;;;395:2264;;2912:187:1;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;395:2264:18:-;;;;;;;;:::o;7:75:20:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:248::-;1692:1;1702:113;1716:6;1713:1;1710:13;1702:113;;;1801:1;1796:3;1792:11;1786:18;1782:1;1777:3;1773:11;1766:39;1738:2;1735:1;1731:10;1726:15;;1702:113;;;1849:1;1840:6;1835:3;1831:16;1824:27;1672:186;1610:248;;;:::o;1864:434::-;1953:5;1978:66;1994:49;2036:6;1994:49;:::i;:::-;1978:66;:::i;:::-;1969:75;;2067:6;2060:5;2053:21;2105:4;2098:5;2094:16;2143:3;2134:6;2129:3;2125:16;2122:25;2119:112;;;2150:79;;:::i;:::-;2119:112;2240:52;2285:6;2280:3;2275;2240:52;:::i;:::-;1959:339;1864:434;;;;;:::o;2318:355::-;2385:5;2434:3;2427:4;2419:6;2415:17;2411:27;2401:122;;2442:79;;:::i;:::-;2401:122;2552:6;2546:13;2577:90;2663:3;2655:6;2648:4;2640:6;2636:17;2577:90;:::i;:::-;2568:99;;2391:282;2318:355;;;;:::o;2679:126::-;2716:7;2756:42;2749:5;2745:54;2734:65;;2679:126;;;:::o;2811:96::-;2848:7;2877:24;2895:5;2877:24;:::i;:::-;2866:35;;2811:96;;;:::o;2913:122::-;2986:24;3004:5;2986:24;:::i;:::-;2979:5;2976:35;2966:63;;3025:1;3022;3015:12;2966:63;2913:122;:::o;3041:143::-;3098:5;3129:6;3123:13;3114:22;;3145:33;3172:5;3145:33;:::i;:::-;3041:143;;;;:::o;3190:1323::-;3316:6;3324;3332;3340;3348;3397:3;3385:9;3376:7;3372:23;3368:33;3365:120;;;3404:79;;:::i;:::-;3365:120;3545:1;3534:9;3530:17;3524:24;3575:18;3567:6;3564:30;3561:117;;;3597:79;;:::i;:::-;3561:117;3702:74;3768:7;3759:6;3748:9;3744:22;3702:74;:::i;:::-;3692:84;;3495:291;3846:2;3835:9;3831:18;3825:25;3877:18;3869:6;3866:30;3863:117;;;3899:79;;:::i;:::-;3863:117;4004:74;4070:7;4061:6;4050:9;4046:22;4004:74;:::i;:::-;3994:84;;3796:292;4127:2;4153:64;4209:7;4200:6;4189:9;4185:22;4153:64;:::i;:::-;4143:74;;4098:129;4266:2;4292:64;4348:7;4339:6;4328:9;4324:22;4292:64;:::i;:::-;4282:74;;4237:129;4405:3;4432:64;4488:7;4479:6;4468:9;4464:22;4432:64;:::i;:::-;4422:74;;4376:130;3190:1323;;;;;;;;:::o;4519:99::-;4571:6;4605:5;4599:12;4589:22;;4519:99;;;:::o;4624:180::-;4672:77;4669:1;4662:88;4769:4;4766:1;4759:15;4793:4;4790:1;4783:15;4810:320;4854:6;4891:1;4885:4;4881:12;4871:22;;4938:1;4932:4;4928:12;4959:18;4949:81;;5015:4;5007:6;5003:17;4993:27;;4949:81;5077:2;5069:6;5066:14;5046:18;5043:38;5040:84;;5096:18;;:::i;:::-;5040:84;4861:269;4810:320;;;:::o;5136:141::-;5185:4;5208:3;5200:11;;5231:3;5228:1;5221:14;5265:4;5262:1;5252:18;5244:26;;5136:141;;;:::o;5283:93::-;5320:6;5367:2;5362;5355:5;5351:14;5347:23;5337:33;;5283:93;;;:::o;5382:107::-;5426:8;5476:5;5470:4;5466:16;5445:37;;5382:107;;;;:::o;5495:393::-;5564:6;5614:1;5602:10;5598:18;5637:97;5667:66;5656:9;5637:97;:::i;:::-;5755:39;5785:8;5774:9;5755:39;:::i;:::-;5743:51;;5827:4;5823:9;5816:5;5812:21;5803:30;;5876:4;5866:8;5862:19;5855:5;5852:30;5842:40;;5571:317;;5495:393;;;;;:::o;5894:77::-;5931:7;5960:5;5949:16;;5894:77;;;:::o;5977:60::-;6005:3;6026:5;6019:12;;5977:60;;;:::o;6043:142::-;6093:9;6126:53;6144:34;6153:24;6171:5;6153:24;:::i;:::-;6144:34;:::i;:::-;6126:53;:::i;:::-;6113:66;;6043:142;;;:::o;6191:75::-;6234:3;6255:5;6248:12;;6191:75;;;:::o;6272:269::-;6382:39;6413:7;6382:39;:::i;:::-;6443:91;6492:41;6516:16;6492:41;:::i;:::-;6484:6;6477:4;6471:11;6443:91;:::i;:::-;6437:4;6430:105;6348:193;6272:269;;;:::o;6547:73::-;6592:3;6547:73;:::o;6626:189::-;6703:32;;:::i;:::-;6744:65;6802:6;6794;6788:4;6744:65;:::i;:::-;6679:136;6626:189;;:::o;6821:186::-;6881:120;6898:3;6891:5;6888:14;6881:120;;;6952:39;6989:1;6982:5;6952:39;:::i;:::-;6925:1;6918:5;6914:13;6905:22;;6881:120;;;6821:186;;:::o;7013:543::-;7114:2;7109:3;7106:11;7103:446;;;7148:38;7180:5;7148:38;:::i;:::-;7232:29;7250:10;7232:29;:::i;:::-;7222:8;7218:44;7415:2;7403:10;7400:18;7397:49;;;7436:8;7421:23;;7397:49;7459:80;7515:22;7533:3;7515:22;:::i;:::-;7505:8;7501:37;7488:11;7459:80;:::i;:::-;7118:431;;7103:446;7013:543;;;:::o;7562:117::-;7616:8;7666:5;7660:4;7656:16;7635:37;;7562:117;;;;:::o;7685:169::-;7729:6;7762:51;7810:1;7806:6;7798:5;7795:1;7791:13;7762:51;:::i;:::-;7758:56;7843:4;7837;7833:15;7823:25;;7736:118;7685:169;;;;:::o;7859:295::-;7935:4;8081:29;8106:3;8100:4;8081:29;:::i;:::-;8073:37;;8143:3;8140:1;8136:11;8130:4;8127:21;8119:29;;7859:295;;;;:::o;8159:1395::-;8276:37;8309:3;8276:37;:::i;:::-;8378:18;8370:6;8367:30;8364:56;;;8400:18;;:::i;:::-;8364:56;8444:38;8476:4;8470:11;8444:38;:::i;:::-;8529:67;8589:6;8581;8575:4;8529:67;:::i;:::-;8623:1;8647:4;8634:17;;8679:2;8671:6;8668:14;8696:1;8691:618;;;;9353:1;9370:6;9367:77;;;9419:9;9414:3;9410:19;9404:26;9395:35;;9367:77;9470:67;9530:6;9523:5;9470:67;:::i;:::-;9464:4;9457:81;9326:222;8661:887;;8691:618;8743:4;8739:9;8731:6;8727:22;8777:37;8809:4;8777:37;:::i;:::-;8836:1;8850:208;8864:7;8861:1;8858:14;8850:208;;;8943:9;8938:3;8934:19;8928:26;8920:6;8913:42;8994:1;8986:6;8982:14;8972:24;;9041:2;9030:9;9026:18;9013:31;;8887:4;8884:1;8880:12;8875:17;;8850:208;;;9086:6;9077:7;9074:19;9071:179;;;9144:9;9139:3;9135:19;9129:26;9187:48;9229:4;9221:6;9217:17;9206:9;9187:48;:::i;:::-;9179:6;9172:64;9094:156;9071:179;9296:1;9292;9284:6;9280:14;9276:22;9270:4;9263:36;8698:611;;;8661:887;;8251:1303;;;8159:1395;;:::o;9560:118::-;9647:24;9665:5;9647:24;:::i;:::-;9642:3;9635:37;9560:118;;:::o;9684:222::-;9777:4;9815:2;9804:9;9800:18;9792:26;;9828:71;9896:1;9885:9;9881:17;9872:6;9828:71;:::i;:::-;9684:222;;;;:::o;9912:332::-;10033:4;10071:2;10060:9;10056:18;10048:26;;10084:71;10152:1;10141:9;10137:17;10128:6;10084:71;:::i;:::-;10165:72;10233:2;10222:9;10218:18;10209:6;10165:72;:::i;:::-;9912:332;;;;;:::o;395:2264:18:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_1174":{"entryPoint":5683,"id":1174,"parameterSlots":3,"returnSlots":0},"@_approve_1240":{"entryPoint":8014,"id":1240,"parameterSlots":4,"returnSlots":0},"@_baseURI_567":{"entryPoint":7378,"id":567,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_822":{"entryPoint":8467,"id":822,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1370":{"entryPoint":6939,"id":1370,"parameterSlots":4,"returnSlots":0},"@_checkOwner_130":{"entryPoint":6239,"id":130,"parameterSlots":0,"returnSlots":0},"@_getApproved_749":{"entryPoint":5614,"id":749,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_785":{"entryPoint":8869,"id":785,"parameterSlots":3,"returnSlots":1},"@_mint_978":{"entryPoint":7506,"id":978,"parameterSlots":2,"returnSlots":0},"@_msgSender_1672":{"entryPoint":5675,"id":1672,"parameterSlots":0,"returnSlots":1},"@_ownerOf_736":{"entryPoint":7953,"id":736,"parameterSlots":1,"returnSlots":1},"@_requireOwned_1306":{"entryPoint":5478,"id":1306,"parameterSlots":1,"returnSlots":1},"@_setApprovalForAll_1277":{"entryPoint":6572,"id":1277,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1631":{"entryPoint":7755,"id":1631,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_192":{"entryPoint":6374,"id":192,"parameterSlots":1,"returnSlots":0},"@_update_928":{"entryPoint":5701,"id":928,"parameterSlots":3,"returnSlots":1},"@approve_583":{"entryPoint":1508,"id":583,"parameterSlots":2,"returnSlots":0},"@balanceOf_491":{"entryPoint":2043,"id":491,"parameterSlots":1,"returnSlots":1},"@contentContract_3389":{"entryPoint":1788,"id":3389,"parameterSlots":0,"returnSlots":0},"@getApproved_600":{"entryPoint":1480,"id":600,"parameterSlots":1,"returnSlots":1},"@getNftFeed_3580":{"entryPoint":3210,"id":3580,"parameterSlots":0,"returnSlots":1},"@getNftPrice_3596":{"entryPoint":2249,"id":3596,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_633":{"entryPoint":4970,"id":633,"parameterSlots":2,"returnSlots":1},"@log10_2855":{"entryPoint":9062,"id":2855,"parameterSlots":1,"returnSlots":1},"@mint_3528":{"entryPoint":4143,"id":3528,"parameterSlots":4,"returnSlots":0},"@name_513":{"entryPoint":1334,"id":513,"parameterSlots":0,"returnSlots":1},"@nftFeed_3404":{"entryPoint":2417,"id":3404,"parameterSlots":0,"returnSlots":0},"@nftsMinted_3541":{"entryPoint":1920,"id":3541,"parameterSlots":1,"returnSlots":1},"@nftsOwned_3553":{"entryPoint":2927,"id":3553,"parameterSlots":1,"returnSlots":1},"@ownerOf_504":{"entryPoint":2025,"id":504,"parameterSlots":1,"returnSlots":1},"@owner_113":{"entryPoint":3000,"id":113,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_144":{"entryPoint":2229,"id":144,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_697":{"entryPoint":1993,"id":697,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_723":{"entryPoint":3839,"id":723,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_616":{"entryPoint":3188,"id":616,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1555":{"entryPoint":1237,"id":1555,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1968":{"entryPoint":7847,"id":1968,"parameterSlots":1,"returnSlots":1},"@supportsInterface_463":{"entryPoint":5252,"id":463,"parameterSlots":1,"returnSlots":1},"@symbol_522":{"entryPoint":3042,"id":522,"parameterSlots":0,"returnSlots":1},"@toString_1758":{"entryPoint":8663,"id":1758,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_3570":{"entryPoint":1826,"id":3570,"parameterSlots":2,"returnSlots":1},"@tokenURI_1612":{"entryPoint":3868,"id":1612,"parameterSlots":1,"returnSlots":1},"@tokenURI_558":{"entryPoint":7401,"id":558,"parameterSlots":1,"returnSlots":1},"@transferFrom_679":{"entryPoint":1530,"id":679,"parameterSlots":3,"returnSlots":0},"@transferOwnership_172":{"entryPoint":5118,"id":172,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":11314,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10000,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":10568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":9488,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":13075,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":11380,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_calldata_ptr":{"entryPoint":11567,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_uint256":{"entryPoint":9819,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":12025,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10332,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":11769,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":10085,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":11426,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":10589,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10021,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr":{"entryPoint":11653,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":9509,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":13096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9840,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":12046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":10377,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr":{"entryPoint":10933,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":10786,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9935,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10966,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9566,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":12942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_Content_$3373_to_t_address_fromStack":{"entryPoint":10248,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":10729,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9695,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12102,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr":{"entryPoint":10801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":10697,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":10290,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12151,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9950,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":12999,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":11984,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":11929,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":11083,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9581,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_Content_$3373__to_t_address__fromStack_reversed":{"entryPoint":10263,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9752,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":10305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":10441,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":11223,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9401,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":11250,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr":{"entryPoint":10681,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":12286,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr":{"entryPoint":10653,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":12914,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":9608,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr":{"entryPoint":10953,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10664,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":12925,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr":{"entryPoint":10712,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9619,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12091,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12234,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":12563,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9917,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9554,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":9421,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9885,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9786,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":12528,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_contract$_Content_$3373_to_t_address":{"entryPoint":10230,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":10212,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":10178,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":12418,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":12704,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":11299,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9636,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":12307,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":11880,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":12676,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":11174,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":10168,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":12646,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12187,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":13141,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":11833,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":11127,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":12452,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":11557,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":11117,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":11562,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":11122,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9416,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9411,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9678,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":12323,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":12633,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":12504,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":12336,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":12462,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9977,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":10545,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":9465,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9796,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":12499,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:28567:20","nodeType":"YulBlock","src":"0:28567:20","statements":[{"body":{"nativeSrc":"47:35:20","nodeType":"YulBlock","src":"47:35:20","statements":[{"nativeSrc":"57:19:20","nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:20","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:20","nodeType":"YulIdentifier","src":"67:5:20"},"nativeSrc":"67:9:20","nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:20","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:20","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nativeSrc":"177:28:20","nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:20","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:20","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:20","nodeType":"YulIdentifier","src":"187:6:20"},"nativeSrc":"187:12:20","nodeType":"YulFunctionCall","src":"187:12:20"},"nativeSrc":"187:12:20","nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:20","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nativeSrc":"300:28:20","nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:20","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:20","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:20","nodeType":"YulIdentifier","src":"310:6:20"},"nativeSrc":"310:12:20","nodeType":"YulFunctionCall","src":"310:12:20"},"nativeSrc":"310:12:20","nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:20","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nativeSrc":"378:105:20","nodeType":"YulBlock","src":"378:105:20","statements":[{"nativeSrc":"388:89:20","nodeType":"YulAssignment","src":"388:89:20","value":{"arguments":[{"name":"value","nativeSrc":"403:5:20","nodeType":"YulIdentifier","src":"403:5:20"},{"kind":"number","nativeSrc":"410:66:20","nodeType":"YulLiteral","src":"410:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:20","nodeType":"YulIdentifier","src":"399:3:20"},"nativeSrc":"399:78:20","nodeType":"YulFunctionCall","src":"399:78:20"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:20","nodeType":"YulIdentifier","src":"388:7:20"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:20","nodeType":"YulTypedName","src":"360:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:20","nodeType":"YulTypedName","src":"370:7:20","type":""}],"src":"334:149:20"},{"body":{"nativeSrc":"531:78:20","nodeType":"YulBlock","src":"531:78:20","statements":[{"body":{"nativeSrc":"587:16:20","nodeType":"YulBlock","src":"587:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:20","nodeType":"YulLiteral","src":"596:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:20","nodeType":"YulLiteral","src":"599:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:20","nodeType":"YulIdentifier","src":"589:6:20"},"nativeSrc":"589:12:20","nodeType":"YulFunctionCall","src":"589:12:20"},"nativeSrc":"589:12:20","nodeType":"YulExpressionStatement","src":"589:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:20","nodeType":"YulIdentifier","src":"554:5:20"},{"arguments":[{"name":"value","nativeSrc":"578:5:20","nodeType":"YulIdentifier","src":"578:5:20"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:20","nodeType":"YulIdentifier","src":"561:16:20"},"nativeSrc":"561:23:20","nodeType":"YulFunctionCall","src":"561:23:20"}],"functionName":{"name":"eq","nativeSrc":"551:2:20","nodeType":"YulIdentifier","src":"551:2:20"},"nativeSrc":"551:34:20","nodeType":"YulFunctionCall","src":"551:34:20"}],"functionName":{"name":"iszero","nativeSrc":"544:6:20","nodeType":"YulIdentifier","src":"544:6:20"},"nativeSrc":"544:42:20","nodeType":"YulFunctionCall","src":"544:42:20"},"nativeSrc":"541:62:20","nodeType":"YulIf","src":"541:62:20"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:20","nodeType":"YulTypedName","src":"524:5:20","type":""}],"src":"489:120:20"},{"body":{"nativeSrc":"666:86:20","nodeType":"YulBlock","src":"666:86:20","statements":[{"nativeSrc":"676:29:20","nodeType":"YulAssignment","src":"676:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:20","nodeType":"YulIdentifier","src":"698:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:20","nodeType":"YulIdentifier","src":"685:12:20"},"nativeSrc":"685:20:20","nodeType":"YulFunctionCall","src":"685:20:20"},"variableNames":[{"name":"value","nativeSrc":"676:5:20","nodeType":"YulIdentifier","src":"676:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:20","nodeType":"YulIdentifier","src":"740:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:20","nodeType":"YulIdentifier","src":"714:25:20"},"nativeSrc":"714:32:20","nodeType":"YulFunctionCall","src":"714:32:20"},"nativeSrc":"714:32:20","nodeType":"YulExpressionStatement","src":"714:32:20"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:20","nodeType":"YulTypedName","src":"644:6:20","type":""},{"name":"end","nativeSrc":"652:3:20","nodeType":"YulTypedName","src":"652:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:20","nodeType":"YulTypedName","src":"660:5:20","type":""}],"src":"615:137:20"},{"body":{"nativeSrc":"823:262:20","nodeType":"YulBlock","src":"823:262:20","statements":[{"body":{"nativeSrc":"869:83:20","nodeType":"YulBlock","src":"869:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:20","nodeType":"YulIdentifier","src":"871:77:20"},"nativeSrc":"871:79:20","nodeType":"YulFunctionCall","src":"871:79:20"},"nativeSrc":"871:79:20","nodeType":"YulExpressionStatement","src":"871:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:20","nodeType":"YulIdentifier","src":"844:7:20"},{"name":"headStart","nativeSrc":"853:9:20","nodeType":"YulIdentifier","src":"853:9:20"}],"functionName":{"name":"sub","nativeSrc":"840:3:20","nodeType":"YulIdentifier","src":"840:3:20"},"nativeSrc":"840:23:20","nodeType":"YulFunctionCall","src":"840:23:20"},{"kind":"number","nativeSrc":"865:2:20","nodeType":"YulLiteral","src":"865:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:20","nodeType":"YulIdentifier","src":"836:3:20"},"nativeSrc":"836:32:20","nodeType":"YulFunctionCall","src":"836:32:20"},"nativeSrc":"833:119:20","nodeType":"YulIf","src":"833:119:20"},{"nativeSrc":"962:116:20","nodeType":"YulBlock","src":"962:116:20","statements":[{"nativeSrc":"977:15:20","nodeType":"YulVariableDeclaration","src":"977:15:20","value":{"kind":"number","nativeSrc":"991:1:20","nodeType":"YulLiteral","src":"991:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:20","nodeType":"YulTypedName","src":"981:6:20","type":""}]},{"nativeSrc":"1006:62:20","nodeType":"YulAssignment","src":"1006:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:20","nodeType":"YulIdentifier","src":"1040:9:20"},{"name":"offset","nativeSrc":"1051:6:20","nodeType":"YulIdentifier","src":"1051:6:20"}],"functionName":{"name":"add","nativeSrc":"1036:3:20","nodeType":"YulIdentifier","src":"1036:3:20"},"nativeSrc":"1036:22:20","nodeType":"YulFunctionCall","src":"1036:22:20"},{"name":"dataEnd","nativeSrc":"1060:7:20","nodeType":"YulIdentifier","src":"1060:7:20"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:20","nodeType":"YulIdentifier","src":"1016:19:20"},"nativeSrc":"1016:52:20","nodeType":"YulFunctionCall","src":"1016:52:20"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:20","nodeType":"YulIdentifier","src":"1006:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:20","nodeType":"YulTypedName","src":"793:9:20","type":""},{"name":"dataEnd","nativeSrc":"804:7:20","nodeType":"YulTypedName","src":"804:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:20","nodeType":"YulTypedName","src":"816:6:20","type":""}],"src":"758:327:20"},{"body":{"nativeSrc":"1133:48:20","nodeType":"YulBlock","src":"1133:48:20","statements":[{"nativeSrc":"1143:32:20","nodeType":"YulAssignment","src":"1143:32:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:20","nodeType":"YulIdentifier","src":"1168:5:20"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:20","nodeType":"YulIdentifier","src":"1161:6:20"},"nativeSrc":"1161:13:20","nodeType":"YulFunctionCall","src":"1161:13:20"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:20","nodeType":"YulIdentifier","src":"1154:6:20"},"nativeSrc":"1154:21:20","nodeType":"YulFunctionCall","src":"1154:21:20"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:20","nodeType":"YulIdentifier","src":"1143:7:20"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:20","nodeType":"YulTypedName","src":"1115:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:20","nodeType":"YulTypedName","src":"1125:7:20","type":""}],"src":"1091:90:20"},{"body":{"nativeSrc":"1246:50:20","nodeType":"YulBlock","src":"1246:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:20","nodeType":"YulIdentifier","src":"1263:3:20"},{"arguments":[{"name":"value","nativeSrc":"1283:5:20","nodeType":"YulIdentifier","src":"1283:5:20"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:20","nodeType":"YulIdentifier","src":"1268:14:20"},"nativeSrc":"1268:21:20","nodeType":"YulFunctionCall","src":"1268:21:20"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:20","nodeType":"YulIdentifier","src":"1256:6:20"},"nativeSrc":"1256:34:20","nodeType":"YulFunctionCall","src":"1256:34:20"},"nativeSrc":"1256:34:20","nodeType":"YulExpressionStatement","src":"1256:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:20","nodeType":"YulTypedName","src":"1234:5:20","type":""},{"name":"pos","nativeSrc":"1241:3:20","nodeType":"YulTypedName","src":"1241:3:20","type":""}],"src":"1187:109:20"},{"body":{"nativeSrc":"1394:118:20","nodeType":"YulBlock","src":"1394:118:20","statements":[{"nativeSrc":"1404:26:20","nodeType":"YulAssignment","src":"1404:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:20","nodeType":"YulIdentifier","src":"1416:9:20"},{"kind":"number","nativeSrc":"1427:2:20","nodeType":"YulLiteral","src":"1427:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:20","nodeType":"YulIdentifier","src":"1412:3:20"},"nativeSrc":"1412:18:20","nodeType":"YulFunctionCall","src":"1412:18:20"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:20","nodeType":"YulIdentifier","src":"1404:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:20","nodeType":"YulIdentifier","src":"1478:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:20","nodeType":"YulIdentifier","src":"1491:9:20"},{"kind":"number","nativeSrc":"1502:1:20","nodeType":"YulLiteral","src":"1502:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:20","nodeType":"YulIdentifier","src":"1487:3:20"},"nativeSrc":"1487:17:20","nodeType":"YulFunctionCall","src":"1487:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:20","nodeType":"YulIdentifier","src":"1440:37:20"},"nativeSrc":"1440:65:20","nodeType":"YulFunctionCall","src":"1440:65:20"},"nativeSrc":"1440:65:20","nodeType":"YulExpressionStatement","src":"1440:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:20","nodeType":"YulTypedName","src":"1366:9:20","type":""},{"name":"value0","nativeSrc":"1378:6:20","nodeType":"YulTypedName","src":"1378:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:20","nodeType":"YulTypedName","src":"1389:4:20","type":""}],"src":"1302:210:20"},{"body":{"nativeSrc":"1577:40:20","nodeType":"YulBlock","src":"1577:40:20","statements":[{"nativeSrc":"1588:22:20","nodeType":"YulAssignment","src":"1588:22:20","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:20","nodeType":"YulIdentifier","src":"1604:5:20"}],"functionName":{"name":"mload","nativeSrc":"1598:5:20","nodeType":"YulIdentifier","src":"1598:5:20"},"nativeSrc":"1598:12:20","nodeType":"YulFunctionCall","src":"1598:12:20"},"variableNames":[{"name":"length","nativeSrc":"1588:6:20","nodeType":"YulIdentifier","src":"1588:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:20","nodeType":"YulTypedName","src":"1560:5:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:20","nodeType":"YulTypedName","src":"1570:6:20","type":""}],"src":"1518:99:20"},{"body":{"nativeSrc":"1719:73:20","nodeType":"YulBlock","src":"1719:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:20","nodeType":"YulIdentifier","src":"1736:3:20"},{"name":"length","nativeSrc":"1741:6:20","nodeType":"YulIdentifier","src":"1741:6:20"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:20","nodeType":"YulIdentifier","src":"1729:6:20"},"nativeSrc":"1729:19:20","nodeType":"YulFunctionCall","src":"1729:19:20"},"nativeSrc":"1729:19:20","nodeType":"YulExpressionStatement","src":"1729:19:20"},{"nativeSrc":"1757:29:20","nodeType":"YulAssignment","src":"1757:29:20","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:20","nodeType":"YulIdentifier","src":"1776:3:20"},{"kind":"number","nativeSrc":"1781:4:20","nodeType":"YulLiteral","src":"1781:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:20","nodeType":"YulIdentifier","src":"1772:3:20"},"nativeSrc":"1772:14:20","nodeType":"YulFunctionCall","src":"1772:14:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:20","nodeType":"YulIdentifier","src":"1757:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:20","nodeType":"YulTypedName","src":"1691:3:20","type":""},{"name":"length","nativeSrc":"1696:6:20","nodeType":"YulTypedName","src":"1696:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:20","nodeType":"YulTypedName","src":"1707:11:20","type":""}],"src":"1623:169:20"},{"body":{"nativeSrc":"1860:186:20","nodeType":"YulBlock","src":"1860:186:20","statements":[{"nativeSrc":"1871:10:20","nodeType":"YulVariableDeclaration","src":"1871:10:20","value":{"kind":"number","nativeSrc":"1880:1:20","nodeType":"YulLiteral","src":"1880:1:20","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1875:1:20","nodeType":"YulTypedName","src":"1875:1:20","type":""}]},{"body":{"nativeSrc":"1940:63:20","nodeType":"YulBlock","src":"1940:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1965:3:20","nodeType":"YulIdentifier","src":"1965:3:20"},{"name":"i","nativeSrc":"1970:1:20","nodeType":"YulIdentifier","src":"1970:1:20"}],"functionName":{"name":"add","nativeSrc":"1961:3:20","nodeType":"YulIdentifier","src":"1961:3:20"},"nativeSrc":"1961:11:20","nodeType":"YulFunctionCall","src":"1961:11:20"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1984:3:20","nodeType":"YulIdentifier","src":"1984:3:20"},{"name":"i","nativeSrc":"1989:1:20","nodeType":"YulIdentifier","src":"1989:1:20"}],"functionName":{"name":"add","nativeSrc":"1980:3:20","nodeType":"YulIdentifier","src":"1980:3:20"},"nativeSrc":"1980:11:20","nodeType":"YulFunctionCall","src":"1980:11:20"}],"functionName":{"name":"mload","nativeSrc":"1974:5:20","nodeType":"YulIdentifier","src":"1974:5:20"},"nativeSrc":"1974:18:20","nodeType":"YulFunctionCall","src":"1974:18:20"}],"functionName":{"name":"mstore","nativeSrc":"1954:6:20","nodeType":"YulIdentifier","src":"1954:6:20"},"nativeSrc":"1954:39:20","nodeType":"YulFunctionCall","src":"1954:39:20"},"nativeSrc":"1954:39:20","nodeType":"YulExpressionStatement","src":"1954:39:20"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1901:1:20","nodeType":"YulIdentifier","src":"1901:1:20"},{"name":"length","nativeSrc":"1904:6:20","nodeType":"YulIdentifier","src":"1904:6:20"}],"functionName":{"name":"lt","nativeSrc":"1898:2:20","nodeType":"YulIdentifier","src":"1898:2:20"},"nativeSrc":"1898:13:20","nodeType":"YulFunctionCall","src":"1898:13:20"},"nativeSrc":"1890:113:20","nodeType":"YulForLoop","post":{"nativeSrc":"1912:19:20","nodeType":"YulBlock","src":"1912:19:20","statements":[{"nativeSrc":"1914:15:20","nodeType":"YulAssignment","src":"1914:15:20","value":{"arguments":[{"name":"i","nativeSrc":"1923:1:20","nodeType":"YulIdentifier","src":"1923:1:20"},{"kind":"number","nativeSrc":"1926:2:20","nodeType":"YulLiteral","src":"1926:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1919:3:20","nodeType":"YulIdentifier","src":"1919:3:20"},"nativeSrc":"1919:10:20","nodeType":"YulFunctionCall","src":"1919:10:20"},"variableNames":[{"name":"i","nativeSrc":"1914:1:20","nodeType":"YulIdentifier","src":"1914:1:20"}]}]},"pre":{"nativeSrc":"1894:3:20","nodeType":"YulBlock","src":"1894:3:20","statements":[]},"src":"1890:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2023:3:20","nodeType":"YulIdentifier","src":"2023:3:20"},{"name":"length","nativeSrc":"2028:6:20","nodeType":"YulIdentifier","src":"2028:6:20"}],"functionName":{"name":"add","nativeSrc":"2019:3:20","nodeType":"YulIdentifier","src":"2019:3:20"},"nativeSrc":"2019:16:20","nodeType":"YulFunctionCall","src":"2019:16:20"},{"kind":"number","nativeSrc":"2037:1:20","nodeType":"YulLiteral","src":"2037:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2012:6:20","nodeType":"YulIdentifier","src":"2012:6:20"},"nativeSrc":"2012:27:20","nodeType":"YulFunctionCall","src":"2012:27:20"},"nativeSrc":"2012:27:20","nodeType":"YulExpressionStatement","src":"2012:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:248:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:20","nodeType":"YulTypedName","src":"1842:3:20","type":""},{"name":"dst","nativeSrc":"1847:3:20","nodeType":"YulTypedName","src":"1847:3:20","type":""},{"name":"length","nativeSrc":"1852:6:20","nodeType":"YulTypedName","src":"1852:6:20","type":""}],"src":"1798:248:20"},{"body":{"nativeSrc":"2100:54:20","nodeType":"YulBlock","src":"2100:54:20","statements":[{"nativeSrc":"2110:38:20","nodeType":"YulAssignment","src":"2110:38:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2128:5:20","nodeType":"YulIdentifier","src":"2128:5:20"},{"kind":"number","nativeSrc":"2135:2:20","nodeType":"YulLiteral","src":"2135:2:20","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2124:3:20","nodeType":"YulIdentifier","src":"2124:3:20"},"nativeSrc":"2124:14:20","nodeType":"YulFunctionCall","src":"2124:14:20"},{"arguments":[{"kind":"number","nativeSrc":"2144:2:20","nodeType":"YulLiteral","src":"2144:2:20","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2140:3:20","nodeType":"YulIdentifier","src":"2140:3:20"},"nativeSrc":"2140:7:20","nodeType":"YulFunctionCall","src":"2140:7:20"}],"functionName":{"name":"and","nativeSrc":"2120:3:20","nodeType":"YulIdentifier","src":"2120:3:20"},"nativeSrc":"2120:28:20","nodeType":"YulFunctionCall","src":"2120:28:20"},"variableNames":[{"name":"result","nativeSrc":"2110:6:20","nodeType":"YulIdentifier","src":"2110:6:20"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2052:102:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2083:5:20","nodeType":"YulTypedName","src":"2083:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2093:6:20","nodeType":"YulTypedName","src":"2093:6:20","type":""}],"src":"2052:102:20"},{"body":{"nativeSrc":"2252:285:20","nodeType":"YulBlock","src":"2252:285:20","statements":[{"nativeSrc":"2262:53:20","nodeType":"YulVariableDeclaration","src":"2262:53:20","value":{"arguments":[{"name":"value","nativeSrc":"2309:5:20","nodeType":"YulIdentifier","src":"2309:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2276:32:20","nodeType":"YulIdentifier","src":"2276:32:20"},"nativeSrc":"2276:39:20","nodeType":"YulFunctionCall","src":"2276:39:20"},"variables":[{"name":"length","nativeSrc":"2266:6:20","nodeType":"YulTypedName","src":"2266:6:20","type":""}]},{"nativeSrc":"2324:78:20","nodeType":"YulAssignment","src":"2324:78:20","value":{"arguments":[{"name":"pos","nativeSrc":"2390:3:20","nodeType":"YulIdentifier","src":"2390:3:20"},{"name":"length","nativeSrc":"2395:6:20","nodeType":"YulIdentifier","src":"2395:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2331:58:20","nodeType":"YulIdentifier","src":"2331:58:20"},"nativeSrc":"2331:71:20","nodeType":"YulFunctionCall","src":"2331:71:20"},"variableNames":[{"name":"pos","nativeSrc":"2324:3:20","nodeType":"YulIdentifier","src":"2324:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2450:5:20","nodeType":"YulIdentifier","src":"2450:5:20"},{"kind":"number","nativeSrc":"2457:4:20","nodeType":"YulLiteral","src":"2457:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2446:3:20","nodeType":"YulIdentifier","src":"2446:3:20"},"nativeSrc":"2446:16:20","nodeType":"YulFunctionCall","src":"2446:16:20"},{"name":"pos","nativeSrc":"2464:3:20","nodeType":"YulIdentifier","src":"2464:3:20"},{"name":"length","nativeSrc":"2469:6:20","nodeType":"YulIdentifier","src":"2469:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2411:34:20","nodeType":"YulIdentifier","src":"2411:34:20"},"nativeSrc":"2411:65:20","nodeType":"YulFunctionCall","src":"2411:65:20"},"nativeSrc":"2411:65:20","nodeType":"YulExpressionStatement","src":"2411:65:20"},{"nativeSrc":"2485:46:20","nodeType":"YulAssignment","src":"2485:46:20","value":{"arguments":[{"name":"pos","nativeSrc":"2496:3:20","nodeType":"YulIdentifier","src":"2496:3:20"},{"arguments":[{"name":"length","nativeSrc":"2523:6:20","nodeType":"YulIdentifier","src":"2523:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2501:21:20","nodeType":"YulIdentifier","src":"2501:21:20"},"nativeSrc":"2501:29:20","nodeType":"YulFunctionCall","src":"2501:29:20"}],"functionName":{"name":"add","nativeSrc":"2492:3:20","nodeType":"YulIdentifier","src":"2492:3:20"},"nativeSrc":"2492:39:20","nodeType":"YulFunctionCall","src":"2492:39:20"},"variableNames":[{"name":"end","nativeSrc":"2485:3:20","nodeType":"YulIdentifier","src":"2485:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2160:377:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2233:5:20","nodeType":"YulTypedName","src":"2233:5:20","type":""},{"name":"pos","nativeSrc":"2240:3:20","nodeType":"YulTypedName","src":"2240:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2248:3:20","nodeType":"YulTypedName","src":"2248:3:20","type":""}],"src":"2160:377:20"},{"body":{"nativeSrc":"2661:195:20","nodeType":"YulBlock","src":"2661:195:20","statements":[{"nativeSrc":"2671:26:20","nodeType":"YulAssignment","src":"2671:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2683:9:20","nodeType":"YulIdentifier","src":"2683:9:20"},{"kind":"number","nativeSrc":"2694:2:20","nodeType":"YulLiteral","src":"2694:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2679:3:20","nodeType":"YulIdentifier","src":"2679:3:20"},"nativeSrc":"2679:18:20","nodeType":"YulFunctionCall","src":"2679:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2671:4:20","nodeType":"YulIdentifier","src":"2671:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2718:9:20","nodeType":"YulIdentifier","src":"2718:9:20"},{"kind":"number","nativeSrc":"2729:1:20","nodeType":"YulLiteral","src":"2729:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2714:3:20","nodeType":"YulIdentifier","src":"2714:3:20"},"nativeSrc":"2714:17:20","nodeType":"YulFunctionCall","src":"2714:17:20"},{"arguments":[{"name":"tail","nativeSrc":"2737:4:20","nodeType":"YulIdentifier","src":"2737:4:20"},{"name":"headStart","nativeSrc":"2743:9:20","nodeType":"YulIdentifier","src":"2743:9:20"}],"functionName":{"name":"sub","nativeSrc":"2733:3:20","nodeType":"YulIdentifier","src":"2733:3:20"},"nativeSrc":"2733:20:20","nodeType":"YulFunctionCall","src":"2733:20:20"}],"functionName":{"name":"mstore","nativeSrc":"2707:6:20","nodeType":"YulIdentifier","src":"2707:6:20"},"nativeSrc":"2707:47:20","nodeType":"YulFunctionCall","src":"2707:47:20"},"nativeSrc":"2707:47:20","nodeType":"YulExpressionStatement","src":"2707:47:20"},{"nativeSrc":"2763:86:20","nodeType":"YulAssignment","src":"2763:86:20","value":{"arguments":[{"name":"value0","nativeSrc":"2835:6:20","nodeType":"YulIdentifier","src":"2835:6:20"},{"name":"tail","nativeSrc":"2844:4:20","nodeType":"YulIdentifier","src":"2844:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2771:63:20","nodeType":"YulIdentifier","src":"2771:63:20"},"nativeSrc":"2771:78:20","nodeType":"YulFunctionCall","src":"2771:78:20"},"variableNames":[{"name":"tail","nativeSrc":"2763:4:20","nodeType":"YulIdentifier","src":"2763:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2543:313:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2633:9:20","nodeType":"YulTypedName","src":"2633:9:20","type":""},{"name":"value0","nativeSrc":"2645:6:20","nodeType":"YulTypedName","src":"2645:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2656:4:20","nodeType":"YulTypedName","src":"2656:4:20","type":""}],"src":"2543:313:20"},{"body":{"nativeSrc":"2907:32:20","nodeType":"YulBlock","src":"2907:32:20","statements":[{"nativeSrc":"2917:16:20","nodeType":"YulAssignment","src":"2917:16:20","value":{"name":"value","nativeSrc":"2928:5:20","nodeType":"YulIdentifier","src":"2928:5:20"},"variableNames":[{"name":"cleaned","nativeSrc":"2917:7:20","nodeType":"YulIdentifier","src":"2917:7:20"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2862:77:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2889:5:20","nodeType":"YulTypedName","src":"2889:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2899:7:20","nodeType":"YulTypedName","src":"2899:7:20","type":""}],"src":"2862:77:20"},{"body":{"nativeSrc":"2988:79:20","nodeType":"YulBlock","src":"2988:79:20","statements":[{"body":{"nativeSrc":"3045:16:20","nodeType":"YulBlock","src":"3045:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3054:1:20","nodeType":"YulLiteral","src":"3054:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3057:1:20","nodeType":"YulLiteral","src":"3057:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3047:6:20","nodeType":"YulIdentifier","src":"3047:6:20"},"nativeSrc":"3047:12:20","nodeType":"YulFunctionCall","src":"3047:12:20"},"nativeSrc":"3047:12:20","nodeType":"YulExpressionStatement","src":"3047:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3011:5:20","nodeType":"YulIdentifier","src":"3011:5:20"},{"arguments":[{"name":"value","nativeSrc":"3036:5:20","nodeType":"YulIdentifier","src":"3036:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3018:17:20","nodeType":"YulIdentifier","src":"3018:17:20"},"nativeSrc":"3018:24:20","nodeType":"YulFunctionCall","src":"3018:24:20"}],"functionName":{"name":"eq","nativeSrc":"3008:2:20","nodeType":"YulIdentifier","src":"3008:2:20"},"nativeSrc":"3008:35:20","nodeType":"YulFunctionCall","src":"3008:35:20"}],"functionName":{"name":"iszero","nativeSrc":"3001:6:20","nodeType":"YulIdentifier","src":"3001:6:20"},"nativeSrc":"3001:43:20","nodeType":"YulFunctionCall","src":"3001:43:20"},"nativeSrc":"2998:63:20","nodeType":"YulIf","src":"2998:63:20"}]},"name":"validator_revert_t_uint256","nativeSrc":"2945:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2981:5:20","nodeType":"YulTypedName","src":"2981:5:20","type":""}],"src":"2945:122:20"},{"body":{"nativeSrc":"3125:87:20","nodeType":"YulBlock","src":"3125:87:20","statements":[{"nativeSrc":"3135:29:20","nodeType":"YulAssignment","src":"3135:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"3157:6:20","nodeType":"YulIdentifier","src":"3157:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"3144:12:20","nodeType":"YulIdentifier","src":"3144:12:20"},"nativeSrc":"3144:20:20","nodeType":"YulFunctionCall","src":"3144:20:20"},"variableNames":[{"name":"value","nativeSrc":"3135:5:20","nodeType":"YulIdentifier","src":"3135:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3200:5:20","nodeType":"YulIdentifier","src":"3200:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3173:26:20","nodeType":"YulIdentifier","src":"3173:26:20"},"nativeSrc":"3173:33:20","nodeType":"YulFunctionCall","src":"3173:33:20"},"nativeSrc":"3173:33:20","nodeType":"YulExpressionStatement","src":"3173:33:20"}]},"name":"abi_decode_t_uint256","nativeSrc":"3073:139:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3103:6:20","nodeType":"YulTypedName","src":"3103:6:20","type":""},{"name":"end","nativeSrc":"3111:3:20","nodeType":"YulTypedName","src":"3111:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3119:5:20","nodeType":"YulTypedName","src":"3119:5:20","type":""}],"src":"3073:139:20"},{"body":{"nativeSrc":"3284:263:20","nodeType":"YulBlock","src":"3284:263:20","statements":[{"body":{"nativeSrc":"3330:83:20","nodeType":"YulBlock","src":"3330:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3332:77:20","nodeType":"YulIdentifier","src":"3332:77:20"},"nativeSrc":"3332:79:20","nodeType":"YulFunctionCall","src":"3332:79:20"},"nativeSrc":"3332:79:20","nodeType":"YulExpressionStatement","src":"3332:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3305:7:20","nodeType":"YulIdentifier","src":"3305:7:20"},{"name":"headStart","nativeSrc":"3314:9:20","nodeType":"YulIdentifier","src":"3314:9:20"}],"functionName":{"name":"sub","nativeSrc":"3301:3:20","nodeType":"YulIdentifier","src":"3301:3:20"},"nativeSrc":"3301:23:20","nodeType":"YulFunctionCall","src":"3301:23:20"},{"kind":"number","nativeSrc":"3326:2:20","nodeType":"YulLiteral","src":"3326:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3297:3:20","nodeType":"YulIdentifier","src":"3297:3:20"},"nativeSrc":"3297:32:20","nodeType":"YulFunctionCall","src":"3297:32:20"},"nativeSrc":"3294:119:20","nodeType":"YulIf","src":"3294:119:20"},{"nativeSrc":"3423:117:20","nodeType":"YulBlock","src":"3423:117:20","statements":[{"nativeSrc":"3438:15:20","nodeType":"YulVariableDeclaration","src":"3438:15:20","value":{"kind":"number","nativeSrc":"3452:1:20","nodeType":"YulLiteral","src":"3452:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3442:6:20","nodeType":"YulTypedName","src":"3442:6:20","type":""}]},{"nativeSrc":"3467:63:20","nodeType":"YulAssignment","src":"3467:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3502:9:20","nodeType":"YulIdentifier","src":"3502:9:20"},{"name":"offset","nativeSrc":"3513:6:20","nodeType":"YulIdentifier","src":"3513:6:20"}],"functionName":{"name":"add","nativeSrc":"3498:3:20","nodeType":"YulIdentifier","src":"3498:3:20"},"nativeSrc":"3498:22:20","nodeType":"YulFunctionCall","src":"3498:22:20"},{"name":"dataEnd","nativeSrc":"3522:7:20","nodeType":"YulIdentifier","src":"3522:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3477:20:20","nodeType":"YulIdentifier","src":"3477:20:20"},"nativeSrc":"3477:53:20","nodeType":"YulFunctionCall","src":"3477:53:20"},"variableNames":[{"name":"value0","nativeSrc":"3467:6:20","nodeType":"YulIdentifier","src":"3467:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3218:329:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3254:9:20","nodeType":"YulTypedName","src":"3254:9:20","type":""},{"name":"dataEnd","nativeSrc":"3265:7:20","nodeType":"YulTypedName","src":"3265:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3277:6:20","nodeType":"YulTypedName","src":"3277:6:20","type":""}],"src":"3218:329:20"},{"body":{"nativeSrc":"3598:81:20","nodeType":"YulBlock","src":"3598:81:20","statements":[{"nativeSrc":"3608:65:20","nodeType":"YulAssignment","src":"3608:65:20","value":{"arguments":[{"name":"value","nativeSrc":"3623:5:20","nodeType":"YulIdentifier","src":"3623:5:20"},{"kind":"number","nativeSrc":"3630:42:20","nodeType":"YulLiteral","src":"3630:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3619:3:20","nodeType":"YulIdentifier","src":"3619:3:20"},"nativeSrc":"3619:54:20","nodeType":"YulFunctionCall","src":"3619:54:20"},"variableNames":[{"name":"cleaned","nativeSrc":"3608:7:20","nodeType":"YulIdentifier","src":"3608:7:20"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3553:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3580:5:20","nodeType":"YulTypedName","src":"3580:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3590:7:20","nodeType":"YulTypedName","src":"3590:7:20","type":""}],"src":"3553:126:20"},{"body":{"nativeSrc":"3730:51:20","nodeType":"YulBlock","src":"3730:51:20","statements":[{"nativeSrc":"3740:35:20","nodeType":"YulAssignment","src":"3740:35:20","value":{"arguments":[{"name":"value","nativeSrc":"3769:5:20","nodeType":"YulIdentifier","src":"3769:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3751:17:20","nodeType":"YulIdentifier","src":"3751:17:20"},"nativeSrc":"3751:24:20","nodeType":"YulFunctionCall","src":"3751:24:20"},"variableNames":[{"name":"cleaned","nativeSrc":"3740:7:20","nodeType":"YulIdentifier","src":"3740:7:20"}]}]},"name":"cleanup_t_address","nativeSrc":"3685:96:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3712:5:20","nodeType":"YulTypedName","src":"3712:5:20","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3722:7:20","nodeType":"YulTypedName","src":"3722:7:20","type":""}],"src":"3685:96:20"},{"body":{"nativeSrc":"3852:53:20","nodeType":"YulBlock","src":"3852:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3869:3:20","nodeType":"YulIdentifier","src":"3869:3:20"},{"arguments":[{"name":"value","nativeSrc":"3892:5:20","nodeType":"YulIdentifier","src":"3892:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3874:17:20","nodeType":"YulIdentifier","src":"3874:17:20"},"nativeSrc":"3874:24:20","nodeType":"YulFunctionCall","src":"3874:24:20"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:20","nodeType":"YulIdentifier","src":"3862:6:20"},"nativeSrc":"3862:37:20","nodeType":"YulFunctionCall","src":"3862:37:20"},"nativeSrc":"3862:37:20","nodeType":"YulExpressionStatement","src":"3862:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3787:118:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3840:5:20","nodeType":"YulTypedName","src":"3840:5:20","type":""},{"name":"pos","nativeSrc":"3847:3:20","nodeType":"YulTypedName","src":"3847:3:20","type":""}],"src":"3787:118:20"},{"body":{"nativeSrc":"4009:124:20","nodeType":"YulBlock","src":"4009:124:20","statements":[{"nativeSrc":"4019:26:20","nodeType":"YulAssignment","src":"4019:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4031:9:20","nodeType":"YulIdentifier","src":"4031:9:20"},{"kind":"number","nativeSrc":"4042:2:20","nodeType":"YulLiteral","src":"4042:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4027:3:20","nodeType":"YulIdentifier","src":"4027:3:20"},"nativeSrc":"4027:18:20","nodeType":"YulFunctionCall","src":"4027:18:20"},"variableNames":[{"name":"tail","nativeSrc":"4019:4:20","nodeType":"YulIdentifier","src":"4019:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4099:6:20","nodeType":"YulIdentifier","src":"4099:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"4112:9:20","nodeType":"YulIdentifier","src":"4112:9:20"},{"kind":"number","nativeSrc":"4123:1:20","nodeType":"YulLiteral","src":"4123:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4108:3:20","nodeType":"YulIdentifier","src":"4108:3:20"},"nativeSrc":"4108:17:20","nodeType":"YulFunctionCall","src":"4108:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4055:43:20","nodeType":"YulIdentifier","src":"4055:43:20"},"nativeSrc":"4055:71:20","nodeType":"YulFunctionCall","src":"4055:71:20"},"nativeSrc":"4055:71:20","nodeType":"YulExpressionStatement","src":"4055:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3911:222:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3981:9:20","nodeType":"YulTypedName","src":"3981:9:20","type":""},{"name":"value0","nativeSrc":"3993:6:20","nodeType":"YulTypedName","src":"3993:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4004:4:20","nodeType":"YulTypedName","src":"4004:4:20","type":""}],"src":"3911:222:20"},{"body":{"nativeSrc":"4182:79:20","nodeType":"YulBlock","src":"4182:79:20","statements":[{"body":{"nativeSrc":"4239:16:20","nodeType":"YulBlock","src":"4239:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4248:1:20","nodeType":"YulLiteral","src":"4248:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4251:1:20","nodeType":"YulLiteral","src":"4251:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4241:6:20","nodeType":"YulIdentifier","src":"4241:6:20"},"nativeSrc":"4241:12:20","nodeType":"YulFunctionCall","src":"4241:12:20"},"nativeSrc":"4241:12:20","nodeType":"YulExpressionStatement","src":"4241:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4205:5:20","nodeType":"YulIdentifier","src":"4205:5:20"},{"arguments":[{"name":"value","nativeSrc":"4230:5:20","nodeType":"YulIdentifier","src":"4230:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4212:17:20","nodeType":"YulIdentifier","src":"4212:17:20"},"nativeSrc":"4212:24:20","nodeType":"YulFunctionCall","src":"4212:24:20"}],"functionName":{"name":"eq","nativeSrc":"4202:2:20","nodeType":"YulIdentifier","src":"4202:2:20"},"nativeSrc":"4202:35:20","nodeType":"YulFunctionCall","src":"4202:35:20"}],"functionName":{"name":"iszero","nativeSrc":"4195:6:20","nodeType":"YulIdentifier","src":"4195:6:20"},"nativeSrc":"4195:43:20","nodeType":"YulFunctionCall","src":"4195:43:20"},"nativeSrc":"4192:63:20","nodeType":"YulIf","src":"4192:63:20"}]},"name":"validator_revert_t_address","nativeSrc":"4139:122:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4175:5:20","nodeType":"YulTypedName","src":"4175:5:20","type":""}],"src":"4139:122:20"},{"body":{"nativeSrc":"4319:87:20","nodeType":"YulBlock","src":"4319:87:20","statements":[{"nativeSrc":"4329:29:20","nodeType":"YulAssignment","src":"4329:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"4351:6:20","nodeType":"YulIdentifier","src":"4351:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"4338:12:20","nodeType":"YulIdentifier","src":"4338:12:20"},"nativeSrc":"4338:20:20","nodeType":"YulFunctionCall","src":"4338:20:20"},"variableNames":[{"name":"value","nativeSrc":"4329:5:20","nodeType":"YulIdentifier","src":"4329:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4394:5:20","nodeType":"YulIdentifier","src":"4394:5:20"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4367:26:20","nodeType":"YulIdentifier","src":"4367:26:20"},"nativeSrc":"4367:33:20","nodeType":"YulFunctionCall","src":"4367:33:20"},"nativeSrc":"4367:33:20","nodeType":"YulExpressionStatement","src":"4367:33:20"}]},"name":"abi_decode_t_address","nativeSrc":"4267:139:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4297:6:20","nodeType":"YulTypedName","src":"4297:6:20","type":""},{"name":"end","nativeSrc":"4305:3:20","nodeType":"YulTypedName","src":"4305:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4313:5:20","nodeType":"YulTypedName","src":"4313:5:20","type":""}],"src":"4267:139:20"},{"body":{"nativeSrc":"4495:391:20","nodeType":"YulBlock","src":"4495:391:20","statements":[{"body":{"nativeSrc":"4541:83:20","nodeType":"YulBlock","src":"4541:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4543:77:20","nodeType":"YulIdentifier","src":"4543:77:20"},"nativeSrc":"4543:79:20","nodeType":"YulFunctionCall","src":"4543:79:20"},"nativeSrc":"4543:79:20","nodeType":"YulExpressionStatement","src":"4543:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4516:7:20","nodeType":"YulIdentifier","src":"4516:7:20"},{"name":"headStart","nativeSrc":"4525:9:20","nodeType":"YulIdentifier","src":"4525:9:20"}],"functionName":{"name":"sub","nativeSrc":"4512:3:20","nodeType":"YulIdentifier","src":"4512:3:20"},"nativeSrc":"4512:23:20","nodeType":"YulFunctionCall","src":"4512:23:20"},{"kind":"number","nativeSrc":"4537:2:20","nodeType":"YulLiteral","src":"4537:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4508:3:20","nodeType":"YulIdentifier","src":"4508:3:20"},"nativeSrc":"4508:32:20","nodeType":"YulFunctionCall","src":"4508:32:20"},"nativeSrc":"4505:119:20","nodeType":"YulIf","src":"4505:119:20"},{"nativeSrc":"4634:117:20","nodeType":"YulBlock","src":"4634:117:20","statements":[{"nativeSrc":"4649:15:20","nodeType":"YulVariableDeclaration","src":"4649:15:20","value":{"kind":"number","nativeSrc":"4663:1:20","nodeType":"YulLiteral","src":"4663:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4653:6:20","nodeType":"YulTypedName","src":"4653:6:20","type":""}]},{"nativeSrc":"4678:63:20","nodeType":"YulAssignment","src":"4678:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4713:9:20","nodeType":"YulIdentifier","src":"4713:9:20"},{"name":"offset","nativeSrc":"4724:6:20","nodeType":"YulIdentifier","src":"4724:6:20"}],"functionName":{"name":"add","nativeSrc":"4709:3:20","nodeType":"YulIdentifier","src":"4709:3:20"},"nativeSrc":"4709:22:20","nodeType":"YulFunctionCall","src":"4709:22:20"},{"name":"dataEnd","nativeSrc":"4733:7:20","nodeType":"YulIdentifier","src":"4733:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4688:20:20","nodeType":"YulIdentifier","src":"4688:20:20"},"nativeSrc":"4688:53:20","nodeType":"YulFunctionCall","src":"4688:53:20"},"variableNames":[{"name":"value0","nativeSrc":"4678:6:20","nodeType":"YulIdentifier","src":"4678:6:20"}]}]},{"nativeSrc":"4761:118:20","nodeType":"YulBlock","src":"4761:118:20","statements":[{"nativeSrc":"4776:16:20","nodeType":"YulVariableDeclaration","src":"4776:16:20","value":{"kind":"number","nativeSrc":"4790:2:20","nodeType":"YulLiteral","src":"4790:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4780:6:20","nodeType":"YulTypedName","src":"4780:6:20","type":""}]},{"nativeSrc":"4806:63:20","nodeType":"YulAssignment","src":"4806:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4841:9:20","nodeType":"YulIdentifier","src":"4841:9:20"},{"name":"offset","nativeSrc":"4852:6:20","nodeType":"YulIdentifier","src":"4852:6:20"}],"functionName":{"name":"add","nativeSrc":"4837:3:20","nodeType":"YulIdentifier","src":"4837:3:20"},"nativeSrc":"4837:22:20","nodeType":"YulFunctionCall","src":"4837:22:20"},{"name":"dataEnd","nativeSrc":"4861:7:20","nodeType":"YulIdentifier","src":"4861:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4816:20:20","nodeType":"YulIdentifier","src":"4816:20:20"},"nativeSrc":"4816:53:20","nodeType":"YulFunctionCall","src":"4816:53:20"},"variableNames":[{"name":"value1","nativeSrc":"4806:6:20","nodeType":"YulIdentifier","src":"4806:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4412:474:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4457:9:20","nodeType":"YulTypedName","src":"4457:9:20","type":""},{"name":"dataEnd","nativeSrc":"4468:7:20","nodeType":"YulTypedName","src":"4468:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4480:6:20","nodeType":"YulTypedName","src":"4480:6:20","type":""},{"name":"value1","nativeSrc":"4488:6:20","nodeType":"YulTypedName","src":"4488:6:20","type":""}],"src":"4412:474:20"},{"body":{"nativeSrc":"4992:519:20","nodeType":"YulBlock","src":"4992:519:20","statements":[{"body":{"nativeSrc":"5038:83:20","nodeType":"YulBlock","src":"5038:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5040:77:20","nodeType":"YulIdentifier","src":"5040:77:20"},"nativeSrc":"5040:79:20","nodeType":"YulFunctionCall","src":"5040:79:20"},"nativeSrc":"5040:79:20","nodeType":"YulExpressionStatement","src":"5040:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5013:7:20","nodeType":"YulIdentifier","src":"5013:7:20"},{"name":"headStart","nativeSrc":"5022:9:20","nodeType":"YulIdentifier","src":"5022:9:20"}],"functionName":{"name":"sub","nativeSrc":"5009:3:20","nodeType":"YulIdentifier","src":"5009:3:20"},"nativeSrc":"5009:23:20","nodeType":"YulFunctionCall","src":"5009:23:20"},{"kind":"number","nativeSrc":"5034:2:20","nodeType":"YulLiteral","src":"5034:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5005:3:20","nodeType":"YulIdentifier","src":"5005:3:20"},"nativeSrc":"5005:32:20","nodeType":"YulFunctionCall","src":"5005:32:20"},"nativeSrc":"5002:119:20","nodeType":"YulIf","src":"5002:119:20"},{"nativeSrc":"5131:117:20","nodeType":"YulBlock","src":"5131:117:20","statements":[{"nativeSrc":"5146:15:20","nodeType":"YulVariableDeclaration","src":"5146:15:20","value":{"kind":"number","nativeSrc":"5160:1:20","nodeType":"YulLiteral","src":"5160:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5150:6:20","nodeType":"YulTypedName","src":"5150:6:20","type":""}]},{"nativeSrc":"5175:63:20","nodeType":"YulAssignment","src":"5175:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5210:9:20","nodeType":"YulIdentifier","src":"5210:9:20"},{"name":"offset","nativeSrc":"5221:6:20","nodeType":"YulIdentifier","src":"5221:6:20"}],"functionName":{"name":"add","nativeSrc":"5206:3:20","nodeType":"YulIdentifier","src":"5206:3:20"},"nativeSrc":"5206:22:20","nodeType":"YulFunctionCall","src":"5206:22:20"},{"name":"dataEnd","nativeSrc":"5230:7:20","nodeType":"YulIdentifier","src":"5230:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5185:20:20","nodeType":"YulIdentifier","src":"5185:20:20"},"nativeSrc":"5185:53:20","nodeType":"YulFunctionCall","src":"5185:53:20"},"variableNames":[{"name":"value0","nativeSrc":"5175:6:20","nodeType":"YulIdentifier","src":"5175:6:20"}]}]},{"nativeSrc":"5258:118:20","nodeType":"YulBlock","src":"5258:118:20","statements":[{"nativeSrc":"5273:16:20","nodeType":"YulVariableDeclaration","src":"5273:16:20","value":{"kind":"number","nativeSrc":"5287:2:20","nodeType":"YulLiteral","src":"5287:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5277:6:20","nodeType":"YulTypedName","src":"5277:6:20","type":""}]},{"nativeSrc":"5303:63:20","nodeType":"YulAssignment","src":"5303:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5338:9:20","nodeType":"YulIdentifier","src":"5338:9:20"},{"name":"offset","nativeSrc":"5349:6:20","nodeType":"YulIdentifier","src":"5349:6:20"}],"functionName":{"name":"add","nativeSrc":"5334:3:20","nodeType":"YulIdentifier","src":"5334:3:20"},"nativeSrc":"5334:22:20","nodeType":"YulFunctionCall","src":"5334:22:20"},{"name":"dataEnd","nativeSrc":"5358:7:20","nodeType":"YulIdentifier","src":"5358:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5313:20:20","nodeType":"YulIdentifier","src":"5313:20:20"},"nativeSrc":"5313:53:20","nodeType":"YulFunctionCall","src":"5313:53:20"},"variableNames":[{"name":"value1","nativeSrc":"5303:6:20","nodeType":"YulIdentifier","src":"5303:6:20"}]}]},{"nativeSrc":"5386:118:20","nodeType":"YulBlock","src":"5386:118:20","statements":[{"nativeSrc":"5401:16:20","nodeType":"YulVariableDeclaration","src":"5401:16:20","value":{"kind":"number","nativeSrc":"5415:2:20","nodeType":"YulLiteral","src":"5415:2:20","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5405:6:20","nodeType":"YulTypedName","src":"5405:6:20","type":""}]},{"nativeSrc":"5431:63:20","nodeType":"YulAssignment","src":"5431:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5466:9:20","nodeType":"YulIdentifier","src":"5466:9:20"},{"name":"offset","nativeSrc":"5477:6:20","nodeType":"YulIdentifier","src":"5477:6:20"}],"functionName":{"name":"add","nativeSrc":"5462:3:20","nodeType":"YulIdentifier","src":"5462:3:20"},"nativeSrc":"5462:22:20","nodeType":"YulFunctionCall","src":"5462:22:20"},{"name":"dataEnd","nativeSrc":"5486:7:20","nodeType":"YulIdentifier","src":"5486:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5441:20:20","nodeType":"YulIdentifier","src":"5441:20:20"},"nativeSrc":"5441:53:20","nodeType":"YulFunctionCall","src":"5441:53:20"},"variableNames":[{"name":"value2","nativeSrc":"5431:6:20","nodeType":"YulIdentifier","src":"5431:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"4892:619:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4946:9:20","nodeType":"YulTypedName","src":"4946:9:20","type":""},{"name":"dataEnd","nativeSrc":"4957:7:20","nodeType":"YulTypedName","src":"4957:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4969:6:20","nodeType":"YulTypedName","src":"4969:6:20","type":""},{"name":"value1","nativeSrc":"4977:6:20","nodeType":"YulTypedName","src":"4977:6:20","type":""},{"name":"value2","nativeSrc":"4985:6:20","nodeType":"YulTypedName","src":"4985:6:20","type":""}],"src":"4892:619:20"},{"body":{"nativeSrc":"5549:28:20","nodeType":"YulBlock","src":"5549:28:20","statements":[{"nativeSrc":"5559:12:20","nodeType":"YulAssignment","src":"5559:12:20","value":{"name":"value","nativeSrc":"5566:5:20","nodeType":"YulIdentifier","src":"5566:5:20"},"variableNames":[{"name":"ret","nativeSrc":"5559:3:20","nodeType":"YulIdentifier","src":"5559:3:20"}]}]},"name":"identity","nativeSrc":"5517:60:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5535:5:20","nodeType":"YulTypedName","src":"5535:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5545:3:20","nodeType":"YulTypedName","src":"5545:3:20","type":""}],"src":"5517:60:20"},{"body":{"nativeSrc":"5643:82:20","nodeType":"YulBlock","src":"5643:82:20","statements":[{"nativeSrc":"5653:66:20","nodeType":"YulAssignment","src":"5653:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5711:5:20","nodeType":"YulIdentifier","src":"5711:5:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"5693:17:20","nodeType":"YulIdentifier","src":"5693:17:20"},"nativeSrc":"5693:24:20","nodeType":"YulFunctionCall","src":"5693:24:20"}],"functionName":{"name":"identity","nativeSrc":"5684:8:20","nodeType":"YulIdentifier","src":"5684:8:20"},"nativeSrc":"5684:34:20","nodeType":"YulFunctionCall","src":"5684:34:20"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"5666:17:20","nodeType":"YulIdentifier","src":"5666:17:20"},"nativeSrc":"5666:53:20","nodeType":"YulFunctionCall","src":"5666:53:20"},"variableNames":[{"name":"converted","nativeSrc":"5653:9:20","nodeType":"YulIdentifier","src":"5653:9:20"}]}]},"name":"convert_t_uint160_to_t_uint160","nativeSrc":"5583:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5623:5:20","nodeType":"YulTypedName","src":"5623:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5633:9:20","nodeType":"YulTypedName","src":"5633:9:20","type":""}],"src":"5583:142:20"},{"body":{"nativeSrc":"5791:66:20","nodeType":"YulBlock","src":"5791:66:20","statements":[{"nativeSrc":"5801:50:20","nodeType":"YulAssignment","src":"5801:50:20","value":{"arguments":[{"name":"value","nativeSrc":"5845:5:20","nodeType":"YulIdentifier","src":"5845:5:20"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nativeSrc":"5814:30:20","nodeType":"YulIdentifier","src":"5814:30:20"},"nativeSrc":"5814:37:20","nodeType":"YulFunctionCall","src":"5814:37:20"},"variableNames":[{"name":"converted","nativeSrc":"5801:9:20","nodeType":"YulIdentifier","src":"5801:9:20"}]}]},"name":"convert_t_uint160_to_t_address","nativeSrc":"5731:126:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5771:5:20","nodeType":"YulTypedName","src":"5771:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5781:9:20","nodeType":"YulTypedName","src":"5781:9:20","type":""}],"src":"5731:126:20"},{"body":{"nativeSrc":"5939:66:20","nodeType":"YulBlock","src":"5939:66:20","statements":[{"nativeSrc":"5949:50:20","nodeType":"YulAssignment","src":"5949:50:20","value":{"arguments":[{"name":"value","nativeSrc":"5993:5:20","nodeType":"YulIdentifier","src":"5993:5:20"}],"functionName":{"name":"convert_t_uint160_to_t_address","nativeSrc":"5962:30:20","nodeType":"YulIdentifier","src":"5962:30:20"},"nativeSrc":"5962:37:20","nodeType":"YulFunctionCall","src":"5962:37:20"},"variableNames":[{"name":"converted","nativeSrc":"5949:9:20","nodeType":"YulIdentifier","src":"5949:9:20"}]}]},"name":"convert_t_contract$_Content_$3373_to_t_address","nativeSrc":"5863:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5919:5:20","nodeType":"YulTypedName","src":"5919:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"5929:9:20","nodeType":"YulTypedName","src":"5929:9:20","type":""}],"src":"5863:142:20"},{"body":{"nativeSrc":"6092:82:20","nodeType":"YulBlock","src":"6092:82:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6109:3:20","nodeType":"YulIdentifier","src":"6109:3:20"},{"arguments":[{"name":"value","nativeSrc":"6161:5:20","nodeType":"YulIdentifier","src":"6161:5:20"}],"functionName":{"name":"convert_t_contract$_Content_$3373_to_t_address","nativeSrc":"6114:46:20","nodeType":"YulIdentifier","src":"6114:46:20"},"nativeSrc":"6114:53:20","nodeType":"YulFunctionCall","src":"6114:53:20"}],"functionName":{"name":"mstore","nativeSrc":"6102:6:20","nodeType":"YulIdentifier","src":"6102:6:20"},"nativeSrc":"6102:66:20","nodeType":"YulFunctionCall","src":"6102:66:20"},"nativeSrc":"6102:66:20","nodeType":"YulExpressionStatement","src":"6102:66:20"}]},"name":"abi_encode_t_contract$_Content_$3373_to_t_address_fromStack","nativeSrc":"6011:163:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6080:5:20","nodeType":"YulTypedName","src":"6080:5:20","type":""},{"name":"pos","nativeSrc":"6087:3:20","nodeType":"YulTypedName","src":"6087:3:20","type":""}],"src":"6011:163:20"},{"body":{"nativeSrc":"6294:140:20","nodeType":"YulBlock","src":"6294:140:20","statements":[{"nativeSrc":"6304:26:20","nodeType":"YulAssignment","src":"6304:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"6316:9:20","nodeType":"YulIdentifier","src":"6316:9:20"},{"kind":"number","nativeSrc":"6327:2:20","nodeType":"YulLiteral","src":"6327:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6312:3:20","nodeType":"YulIdentifier","src":"6312:3:20"},"nativeSrc":"6312:18:20","nodeType":"YulFunctionCall","src":"6312:18:20"},"variableNames":[{"name":"tail","nativeSrc":"6304:4:20","nodeType":"YulIdentifier","src":"6304:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"6400:6:20","nodeType":"YulIdentifier","src":"6400:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"6413:9:20","nodeType":"YulIdentifier","src":"6413:9:20"},{"kind":"number","nativeSrc":"6424:1:20","nodeType":"YulLiteral","src":"6424:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6409:3:20","nodeType":"YulIdentifier","src":"6409:3:20"},"nativeSrc":"6409:17:20","nodeType":"YulFunctionCall","src":"6409:17:20"}],"functionName":{"name":"abi_encode_t_contract$_Content_$3373_to_t_address_fromStack","nativeSrc":"6340:59:20","nodeType":"YulIdentifier","src":"6340:59:20"},"nativeSrc":"6340:87:20","nodeType":"YulFunctionCall","src":"6340:87:20"},"nativeSrc":"6340:87:20","nodeType":"YulExpressionStatement","src":"6340:87:20"}]},"name":"abi_encode_tuple_t_contract$_Content_$3373__to_t_address__fromStack_reversed","nativeSrc":"6180:254:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6266:9:20","nodeType":"YulTypedName","src":"6266:9:20","type":""},{"name":"value0","nativeSrc":"6278:6:20","nodeType":"YulTypedName","src":"6278:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6289:4:20","nodeType":"YulTypedName","src":"6289:4:20","type":""}],"src":"6180:254:20"},{"body":{"nativeSrc":"6505:53:20","nodeType":"YulBlock","src":"6505:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6522:3:20","nodeType":"YulIdentifier","src":"6522:3:20"},{"arguments":[{"name":"value","nativeSrc":"6545:5:20","nodeType":"YulIdentifier","src":"6545:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6527:17:20","nodeType":"YulIdentifier","src":"6527:17:20"},"nativeSrc":"6527:24:20","nodeType":"YulFunctionCall","src":"6527:24:20"}],"functionName":{"name":"mstore","nativeSrc":"6515:6:20","nodeType":"YulIdentifier","src":"6515:6:20"},"nativeSrc":"6515:37:20","nodeType":"YulFunctionCall","src":"6515:37:20"},"nativeSrc":"6515:37:20","nodeType":"YulExpressionStatement","src":"6515:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"6440:118:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6493:5:20","nodeType":"YulTypedName","src":"6493:5:20","type":""},{"name":"pos","nativeSrc":"6500:3:20","nodeType":"YulTypedName","src":"6500:3:20","type":""}],"src":"6440:118:20"},{"body":{"nativeSrc":"6662:124:20","nodeType":"YulBlock","src":"6662:124:20","statements":[{"nativeSrc":"6672:26:20","nodeType":"YulAssignment","src":"6672:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"6684:9:20","nodeType":"YulIdentifier","src":"6684:9:20"},{"kind":"number","nativeSrc":"6695:2:20","nodeType":"YulLiteral","src":"6695:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6680:3:20","nodeType":"YulIdentifier","src":"6680:3:20"},"nativeSrc":"6680:18:20","nodeType":"YulFunctionCall","src":"6680:18:20"},"variableNames":[{"name":"tail","nativeSrc":"6672:4:20","nodeType":"YulIdentifier","src":"6672:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"6752:6:20","nodeType":"YulIdentifier","src":"6752:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"6765:9:20","nodeType":"YulIdentifier","src":"6765:9:20"},{"kind":"number","nativeSrc":"6776:1:20","nodeType":"YulLiteral","src":"6776:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6761:3:20","nodeType":"YulIdentifier","src":"6761:3:20"},"nativeSrc":"6761:17:20","nodeType":"YulFunctionCall","src":"6761:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"6708:43:20","nodeType":"YulIdentifier","src":"6708:43:20"},"nativeSrc":"6708:71:20","nodeType":"YulFunctionCall","src":"6708:71:20"},"nativeSrc":"6708:71:20","nodeType":"YulExpressionStatement","src":"6708:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"6564:222:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6634:9:20","nodeType":"YulTypedName","src":"6634:9:20","type":""},{"name":"value0","nativeSrc":"6646:6:20","nodeType":"YulTypedName","src":"6646:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6657:4:20","nodeType":"YulTypedName","src":"6657:4:20","type":""}],"src":"6564:222:20"},{"body":{"nativeSrc":"6858:263:20","nodeType":"YulBlock","src":"6858:263:20","statements":[{"body":{"nativeSrc":"6904:83:20","nodeType":"YulBlock","src":"6904:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"6906:77:20","nodeType":"YulIdentifier","src":"6906:77:20"},"nativeSrc":"6906:79:20","nodeType":"YulFunctionCall","src":"6906:79:20"},"nativeSrc":"6906:79:20","nodeType":"YulExpressionStatement","src":"6906:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6879:7:20","nodeType":"YulIdentifier","src":"6879:7:20"},{"name":"headStart","nativeSrc":"6888:9:20","nodeType":"YulIdentifier","src":"6888:9:20"}],"functionName":{"name":"sub","nativeSrc":"6875:3:20","nodeType":"YulIdentifier","src":"6875:3:20"},"nativeSrc":"6875:23:20","nodeType":"YulFunctionCall","src":"6875:23:20"},{"kind":"number","nativeSrc":"6900:2:20","nodeType":"YulLiteral","src":"6900:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6871:3:20","nodeType":"YulIdentifier","src":"6871:3:20"},"nativeSrc":"6871:32:20","nodeType":"YulFunctionCall","src":"6871:32:20"},"nativeSrc":"6868:119:20","nodeType":"YulIf","src":"6868:119:20"},{"nativeSrc":"6997:117:20","nodeType":"YulBlock","src":"6997:117:20","statements":[{"nativeSrc":"7012:15:20","nodeType":"YulVariableDeclaration","src":"7012:15:20","value":{"kind":"number","nativeSrc":"7026:1:20","nodeType":"YulLiteral","src":"7026:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"7016:6:20","nodeType":"YulTypedName","src":"7016:6:20","type":""}]},{"nativeSrc":"7041:63:20","nodeType":"YulAssignment","src":"7041:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7076:9:20","nodeType":"YulIdentifier","src":"7076:9:20"},{"name":"offset","nativeSrc":"7087:6:20","nodeType":"YulIdentifier","src":"7087:6:20"}],"functionName":{"name":"add","nativeSrc":"7072:3:20","nodeType":"YulIdentifier","src":"7072:3:20"},"nativeSrc":"7072:22:20","nodeType":"YulFunctionCall","src":"7072:22:20"},{"name":"dataEnd","nativeSrc":"7096:7:20","nodeType":"YulIdentifier","src":"7096:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"7051:20:20","nodeType":"YulIdentifier","src":"7051:20:20"},"nativeSrc":"7051:53:20","nodeType":"YulFunctionCall","src":"7051:53:20"},"variableNames":[{"name":"value0","nativeSrc":"7041:6:20","nodeType":"YulIdentifier","src":"7041:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"6792:329:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6828:9:20","nodeType":"YulTypedName","src":"6828:9:20","type":""},{"name":"dataEnd","nativeSrc":"6839:7:20","nodeType":"YulTypedName","src":"6839:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6851:6:20","nodeType":"YulTypedName","src":"6851:6:20","type":""}],"src":"6792:329:20"},{"body":{"nativeSrc":"7210:391:20","nodeType":"YulBlock","src":"7210:391:20","statements":[{"body":{"nativeSrc":"7256:83:20","nodeType":"YulBlock","src":"7256:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"7258:77:20","nodeType":"YulIdentifier","src":"7258:77:20"},"nativeSrc":"7258:79:20","nodeType":"YulFunctionCall","src":"7258:79:20"},"nativeSrc":"7258:79:20","nodeType":"YulExpressionStatement","src":"7258:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7231:7:20","nodeType":"YulIdentifier","src":"7231:7:20"},{"name":"headStart","nativeSrc":"7240:9:20","nodeType":"YulIdentifier","src":"7240:9:20"}],"functionName":{"name":"sub","nativeSrc":"7227:3:20","nodeType":"YulIdentifier","src":"7227:3:20"},"nativeSrc":"7227:23:20","nodeType":"YulFunctionCall","src":"7227:23:20"},{"kind":"number","nativeSrc":"7252:2:20","nodeType":"YulLiteral","src":"7252:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7223:3:20","nodeType":"YulIdentifier","src":"7223:3:20"},"nativeSrc":"7223:32:20","nodeType":"YulFunctionCall","src":"7223:32:20"},"nativeSrc":"7220:119:20","nodeType":"YulIf","src":"7220:119:20"},{"nativeSrc":"7349:117:20","nodeType":"YulBlock","src":"7349:117:20","statements":[{"nativeSrc":"7364:15:20","nodeType":"YulVariableDeclaration","src":"7364:15:20","value":{"kind":"number","nativeSrc":"7378:1:20","nodeType":"YulLiteral","src":"7378:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"7368:6:20","nodeType":"YulTypedName","src":"7368:6:20","type":""}]},{"nativeSrc":"7393:63:20","nodeType":"YulAssignment","src":"7393:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7428:9:20","nodeType":"YulIdentifier","src":"7428:9:20"},{"name":"offset","nativeSrc":"7439:6:20","nodeType":"YulIdentifier","src":"7439:6:20"}],"functionName":{"name":"add","nativeSrc":"7424:3:20","nodeType":"YulIdentifier","src":"7424:3:20"},"nativeSrc":"7424:22:20","nodeType":"YulFunctionCall","src":"7424:22:20"},{"name":"dataEnd","nativeSrc":"7448:7:20","nodeType":"YulIdentifier","src":"7448:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"7403:20:20","nodeType":"YulIdentifier","src":"7403:20:20"},"nativeSrc":"7403:53:20","nodeType":"YulFunctionCall","src":"7403:53:20"},"variableNames":[{"name":"value0","nativeSrc":"7393:6:20","nodeType":"YulIdentifier","src":"7393:6:20"}]}]},{"nativeSrc":"7476:118:20","nodeType":"YulBlock","src":"7476:118:20","statements":[{"nativeSrc":"7491:16:20","nodeType":"YulVariableDeclaration","src":"7491:16:20","value":{"kind":"number","nativeSrc":"7505:2:20","nodeType":"YulLiteral","src":"7505:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"7495:6:20","nodeType":"YulTypedName","src":"7495:6:20","type":""}]},{"nativeSrc":"7521:63:20","nodeType":"YulAssignment","src":"7521:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7556:9:20","nodeType":"YulIdentifier","src":"7556:9:20"},{"name":"offset","nativeSrc":"7567:6:20","nodeType":"YulIdentifier","src":"7567:6:20"}],"functionName":{"name":"add","nativeSrc":"7552:3:20","nodeType":"YulIdentifier","src":"7552:3:20"},"nativeSrc":"7552:22:20","nodeType":"YulFunctionCall","src":"7552:22:20"},{"name":"dataEnd","nativeSrc":"7576:7:20","nodeType":"YulIdentifier","src":"7576:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"7531:20:20","nodeType":"YulIdentifier","src":"7531:20:20"},"nativeSrc":"7531:53:20","nodeType":"YulFunctionCall","src":"7531:53:20"},"variableNames":[{"name":"value1","nativeSrc":"7521:6:20","nodeType":"YulIdentifier","src":"7521:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"7127:474:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7172:9:20","nodeType":"YulTypedName","src":"7172:9:20","type":""},{"name":"dataEnd","nativeSrc":"7183:7:20","nodeType":"YulTypedName","src":"7183:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7195:6:20","nodeType":"YulTypedName","src":"7195:6:20","type":""},{"name":"value1","nativeSrc":"7203:6:20","nodeType":"YulTypedName","src":"7203:6:20","type":""}],"src":"7127:474:20"},{"body":{"nativeSrc":"7877:667:20","nodeType":"YulBlock","src":"7877:667:20","statements":[{"nativeSrc":"7887:27:20","nodeType":"YulAssignment","src":"7887:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"7899:9:20","nodeType":"YulIdentifier","src":"7899:9:20"},{"kind":"number","nativeSrc":"7910:3:20","nodeType":"YulLiteral","src":"7910:3:20","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7895:3:20","nodeType":"YulIdentifier","src":"7895:3:20"},"nativeSrc":"7895:19:20","nodeType":"YulFunctionCall","src":"7895:19:20"},"variableNames":[{"name":"tail","nativeSrc":"7887:4:20","nodeType":"YulIdentifier","src":"7887:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"7968:6:20","nodeType":"YulIdentifier","src":"7968:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"7981:9:20","nodeType":"YulIdentifier","src":"7981:9:20"},{"kind":"number","nativeSrc":"7992:1:20","nodeType":"YulLiteral","src":"7992:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7977:3:20","nodeType":"YulIdentifier","src":"7977:3:20"},"nativeSrc":"7977:17:20","nodeType":"YulFunctionCall","src":"7977:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"7924:43:20","nodeType":"YulIdentifier","src":"7924:43:20"},"nativeSrc":"7924:71:20","nodeType":"YulFunctionCall","src":"7924:71:20"},"nativeSrc":"7924:71:20","nodeType":"YulExpressionStatement","src":"7924:71:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8016:9:20","nodeType":"YulIdentifier","src":"8016:9:20"},{"kind":"number","nativeSrc":"8027:2:20","nodeType":"YulLiteral","src":"8027:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8012:3:20","nodeType":"YulIdentifier","src":"8012:3:20"},"nativeSrc":"8012:18:20","nodeType":"YulFunctionCall","src":"8012:18:20"},{"arguments":[{"name":"tail","nativeSrc":"8036:4:20","nodeType":"YulIdentifier","src":"8036:4:20"},{"name":"headStart","nativeSrc":"8042:9:20","nodeType":"YulIdentifier","src":"8042:9:20"}],"functionName":{"name":"sub","nativeSrc":"8032:3:20","nodeType":"YulIdentifier","src":"8032:3:20"},"nativeSrc":"8032:20:20","nodeType":"YulFunctionCall","src":"8032:20:20"}],"functionName":{"name":"mstore","nativeSrc":"8005:6:20","nodeType":"YulIdentifier","src":"8005:6:20"},"nativeSrc":"8005:48:20","nodeType":"YulFunctionCall","src":"8005:48:20"},"nativeSrc":"8005:48:20","nodeType":"YulExpressionStatement","src":"8005:48:20"},{"nativeSrc":"8062:86:20","nodeType":"YulAssignment","src":"8062:86:20","value":{"arguments":[{"name":"value1","nativeSrc":"8134:6:20","nodeType":"YulIdentifier","src":"8134:6:20"},{"name":"tail","nativeSrc":"8143:4:20","nodeType":"YulIdentifier","src":"8143:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8070:63:20","nodeType":"YulIdentifier","src":"8070:63:20"},"nativeSrc":"8070:78:20","nodeType":"YulFunctionCall","src":"8070:78:20"},"variableNames":[{"name":"tail","nativeSrc":"8062:4:20","nodeType":"YulIdentifier","src":"8062:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8169:9:20","nodeType":"YulIdentifier","src":"8169:9:20"},{"kind":"number","nativeSrc":"8180:2:20","nodeType":"YulLiteral","src":"8180:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8165:3:20","nodeType":"YulIdentifier","src":"8165:3:20"},"nativeSrc":"8165:18:20","nodeType":"YulFunctionCall","src":"8165:18:20"},{"arguments":[{"name":"tail","nativeSrc":"8189:4:20","nodeType":"YulIdentifier","src":"8189:4:20"},{"name":"headStart","nativeSrc":"8195:9:20","nodeType":"YulIdentifier","src":"8195:9:20"}],"functionName":{"name":"sub","nativeSrc":"8185:3:20","nodeType":"YulIdentifier","src":"8185:3:20"},"nativeSrc":"8185:20:20","nodeType":"YulFunctionCall","src":"8185:20:20"}],"functionName":{"name":"mstore","nativeSrc":"8158:6:20","nodeType":"YulIdentifier","src":"8158:6:20"},"nativeSrc":"8158:48:20","nodeType":"YulFunctionCall","src":"8158:48:20"},"nativeSrc":"8158:48:20","nodeType":"YulExpressionStatement","src":"8158:48:20"},{"nativeSrc":"8215:86:20","nodeType":"YulAssignment","src":"8215:86:20","value":{"arguments":[{"name":"value2","nativeSrc":"8287:6:20","nodeType":"YulIdentifier","src":"8287:6:20"},{"name":"tail","nativeSrc":"8296:4:20","nodeType":"YulIdentifier","src":"8296:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8223:63:20","nodeType":"YulIdentifier","src":"8223:63:20"},"nativeSrc":"8223:78:20","nodeType":"YulFunctionCall","src":"8223:78:20"},"variableNames":[{"name":"tail","nativeSrc":"8215:4:20","nodeType":"YulIdentifier","src":"8215:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8322:9:20","nodeType":"YulIdentifier","src":"8322:9:20"},{"kind":"number","nativeSrc":"8333:2:20","nodeType":"YulLiteral","src":"8333:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8318:3:20","nodeType":"YulIdentifier","src":"8318:3:20"},"nativeSrc":"8318:18:20","nodeType":"YulFunctionCall","src":"8318:18:20"},{"arguments":[{"name":"tail","nativeSrc":"8342:4:20","nodeType":"YulIdentifier","src":"8342:4:20"},{"name":"headStart","nativeSrc":"8348:9:20","nodeType":"YulIdentifier","src":"8348:9:20"}],"functionName":{"name":"sub","nativeSrc":"8338:3:20","nodeType":"YulIdentifier","src":"8338:3:20"},"nativeSrc":"8338:20:20","nodeType":"YulFunctionCall","src":"8338:20:20"}],"functionName":{"name":"mstore","nativeSrc":"8311:6:20","nodeType":"YulIdentifier","src":"8311:6:20"},"nativeSrc":"8311:48:20","nodeType":"YulFunctionCall","src":"8311:48:20"},"nativeSrc":"8311:48:20","nodeType":"YulExpressionStatement","src":"8311:48:20"},{"nativeSrc":"8368:86:20","nodeType":"YulAssignment","src":"8368:86:20","value":{"arguments":[{"name":"value3","nativeSrc":"8440:6:20","nodeType":"YulIdentifier","src":"8440:6:20"},{"name":"tail","nativeSrc":"8449:4:20","nodeType":"YulIdentifier","src":"8449:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8376:63:20","nodeType":"YulIdentifier","src":"8376:63:20"},"nativeSrc":"8376:78:20","nodeType":"YulFunctionCall","src":"8376:78:20"},"variableNames":[{"name":"tail","nativeSrc":"8368:4:20","nodeType":"YulIdentifier","src":"8368:4:20"}]},{"expression":{"arguments":[{"name":"value4","nativeSrc":"8508:6:20","nodeType":"YulIdentifier","src":"8508:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"8521:9:20","nodeType":"YulIdentifier","src":"8521:9:20"},{"kind":"number","nativeSrc":"8532:3:20","nodeType":"YulLiteral","src":"8532:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8517:3:20","nodeType":"YulIdentifier","src":"8517:3:20"},"nativeSrc":"8517:19:20","nodeType":"YulFunctionCall","src":"8517:19:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"8464:43:20","nodeType":"YulIdentifier","src":"8464:43:20"},"nativeSrc":"8464:73:20","nodeType":"YulFunctionCall","src":"8464:73:20"},"nativeSrc":"8464:73:20","nodeType":"YulExpressionStatement","src":"8464:73:20"}]},"name":"abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed","nativeSrc":"7607:937:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7817:9:20","nodeType":"YulTypedName","src":"7817:9:20","type":""},{"name":"value4","nativeSrc":"7829:6:20","nodeType":"YulTypedName","src":"7829:6:20","type":""},{"name":"value3","nativeSrc":"7837:6:20","nodeType":"YulTypedName","src":"7837:6:20","type":""},{"name":"value2","nativeSrc":"7845:6:20","nodeType":"YulTypedName","src":"7845:6:20","type":""},{"name":"value1","nativeSrc":"7853:6:20","nodeType":"YulTypedName","src":"7853:6:20","type":""},{"name":"value0","nativeSrc":"7861:6:20","nodeType":"YulTypedName","src":"7861:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7872:4:20","nodeType":"YulTypedName","src":"7872:4:20","type":""}],"src":"7607:937:20"},{"body":{"nativeSrc":"8590:76:20","nodeType":"YulBlock","src":"8590:76:20","statements":[{"body":{"nativeSrc":"8644:16:20","nodeType":"YulBlock","src":"8644:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8653:1:20","nodeType":"YulLiteral","src":"8653:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"8656:1:20","nodeType":"YulLiteral","src":"8656:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8646:6:20","nodeType":"YulIdentifier","src":"8646:6:20"},"nativeSrc":"8646:12:20","nodeType":"YulFunctionCall","src":"8646:12:20"},"nativeSrc":"8646:12:20","nodeType":"YulExpressionStatement","src":"8646:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8613:5:20","nodeType":"YulIdentifier","src":"8613:5:20"},{"arguments":[{"name":"value","nativeSrc":"8635:5:20","nodeType":"YulIdentifier","src":"8635:5:20"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"8620:14:20","nodeType":"YulIdentifier","src":"8620:14:20"},"nativeSrc":"8620:21:20","nodeType":"YulFunctionCall","src":"8620:21:20"}],"functionName":{"name":"eq","nativeSrc":"8610:2:20","nodeType":"YulIdentifier","src":"8610:2:20"},"nativeSrc":"8610:32:20","nodeType":"YulFunctionCall","src":"8610:32:20"}],"functionName":{"name":"iszero","nativeSrc":"8603:6:20","nodeType":"YulIdentifier","src":"8603:6:20"},"nativeSrc":"8603:40:20","nodeType":"YulFunctionCall","src":"8603:40:20"},"nativeSrc":"8600:60:20","nodeType":"YulIf","src":"8600:60:20"}]},"name":"validator_revert_t_bool","nativeSrc":"8550:116:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8583:5:20","nodeType":"YulTypedName","src":"8583:5:20","type":""}],"src":"8550:116:20"},{"body":{"nativeSrc":"8721:84:20","nodeType":"YulBlock","src":"8721:84:20","statements":[{"nativeSrc":"8731:29:20","nodeType":"YulAssignment","src":"8731:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"8753:6:20","nodeType":"YulIdentifier","src":"8753:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"8740:12:20","nodeType":"YulIdentifier","src":"8740:12:20"},"nativeSrc":"8740:20:20","nodeType":"YulFunctionCall","src":"8740:20:20"},"variableNames":[{"name":"value","nativeSrc":"8731:5:20","nodeType":"YulIdentifier","src":"8731:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8793:5:20","nodeType":"YulIdentifier","src":"8793:5:20"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"8769:23:20","nodeType":"YulIdentifier","src":"8769:23:20"},"nativeSrc":"8769:30:20","nodeType":"YulFunctionCall","src":"8769:30:20"},"nativeSrc":"8769:30:20","nodeType":"YulExpressionStatement","src":"8769:30:20"}]},"name":"abi_decode_t_bool","nativeSrc":"8672:133:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8699:6:20","nodeType":"YulTypedName","src":"8699:6:20","type":""},{"name":"end","nativeSrc":"8707:3:20","nodeType":"YulTypedName","src":"8707:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"8715:5:20","nodeType":"YulTypedName","src":"8715:5:20","type":""}],"src":"8672:133:20"},{"body":{"nativeSrc":"8891:388:20","nodeType":"YulBlock","src":"8891:388:20","statements":[{"body":{"nativeSrc":"8937:83:20","nodeType":"YulBlock","src":"8937:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"8939:77:20","nodeType":"YulIdentifier","src":"8939:77:20"},"nativeSrc":"8939:79:20","nodeType":"YulFunctionCall","src":"8939:79:20"},"nativeSrc":"8939:79:20","nodeType":"YulExpressionStatement","src":"8939:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8912:7:20","nodeType":"YulIdentifier","src":"8912:7:20"},{"name":"headStart","nativeSrc":"8921:9:20","nodeType":"YulIdentifier","src":"8921:9:20"}],"functionName":{"name":"sub","nativeSrc":"8908:3:20","nodeType":"YulIdentifier","src":"8908:3:20"},"nativeSrc":"8908:23:20","nodeType":"YulFunctionCall","src":"8908:23:20"},{"kind":"number","nativeSrc":"8933:2:20","nodeType":"YulLiteral","src":"8933:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8904:3:20","nodeType":"YulIdentifier","src":"8904:3:20"},"nativeSrc":"8904:32:20","nodeType":"YulFunctionCall","src":"8904:32:20"},"nativeSrc":"8901:119:20","nodeType":"YulIf","src":"8901:119:20"},{"nativeSrc":"9030:117:20","nodeType":"YulBlock","src":"9030:117:20","statements":[{"nativeSrc":"9045:15:20","nodeType":"YulVariableDeclaration","src":"9045:15:20","value":{"kind":"number","nativeSrc":"9059:1:20","nodeType":"YulLiteral","src":"9059:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"9049:6:20","nodeType":"YulTypedName","src":"9049:6:20","type":""}]},{"nativeSrc":"9074:63:20","nodeType":"YulAssignment","src":"9074:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9109:9:20","nodeType":"YulIdentifier","src":"9109:9:20"},{"name":"offset","nativeSrc":"9120:6:20","nodeType":"YulIdentifier","src":"9120:6:20"}],"functionName":{"name":"add","nativeSrc":"9105:3:20","nodeType":"YulIdentifier","src":"9105:3:20"},"nativeSrc":"9105:22:20","nodeType":"YulFunctionCall","src":"9105:22:20"},{"name":"dataEnd","nativeSrc":"9129:7:20","nodeType":"YulIdentifier","src":"9129:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9084:20:20","nodeType":"YulIdentifier","src":"9084:20:20"},"nativeSrc":"9084:53:20","nodeType":"YulFunctionCall","src":"9084:53:20"},"variableNames":[{"name":"value0","nativeSrc":"9074:6:20","nodeType":"YulIdentifier","src":"9074:6:20"}]}]},{"nativeSrc":"9157:115:20","nodeType":"YulBlock","src":"9157:115:20","statements":[{"nativeSrc":"9172:16:20","nodeType":"YulVariableDeclaration","src":"9172:16:20","value":{"kind":"number","nativeSrc":"9186:2:20","nodeType":"YulLiteral","src":"9186:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9176:6:20","nodeType":"YulTypedName","src":"9176:6:20","type":""}]},{"nativeSrc":"9202:60:20","nodeType":"YulAssignment","src":"9202:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9234:9:20","nodeType":"YulIdentifier","src":"9234:9:20"},{"name":"offset","nativeSrc":"9245:6:20","nodeType":"YulIdentifier","src":"9245:6:20"}],"functionName":{"name":"add","nativeSrc":"9230:3:20","nodeType":"YulIdentifier","src":"9230:3:20"},"nativeSrc":"9230:22:20","nodeType":"YulFunctionCall","src":"9230:22:20"},{"name":"dataEnd","nativeSrc":"9254:7:20","nodeType":"YulIdentifier","src":"9254:7:20"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"9212:17:20","nodeType":"YulIdentifier","src":"9212:17:20"},"nativeSrc":"9212:50:20","nodeType":"YulFunctionCall","src":"9212:50:20"},"variableNames":[{"name":"value1","nativeSrc":"9202:6:20","nodeType":"YulIdentifier","src":"9202:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"8811:468:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8853:9:20","nodeType":"YulTypedName","src":"8853:9:20","type":""},{"name":"dataEnd","nativeSrc":"8864:7:20","nodeType":"YulTypedName","src":"8864:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8876:6:20","nodeType":"YulTypedName","src":"8876:6:20","type":""},{"name":"value1","nativeSrc":"8884:6:20","nodeType":"YulTypedName","src":"8884:6:20","type":""}],"src":"8811:468:20"},{"body":{"nativeSrc":"9384:40:20","nodeType":"YulBlock","src":"9384:40:20","statements":[{"nativeSrc":"9395:22:20","nodeType":"YulAssignment","src":"9395:22:20","value":{"arguments":[{"name":"value","nativeSrc":"9411:5:20","nodeType":"YulIdentifier","src":"9411:5:20"}],"functionName":{"name":"mload","nativeSrc":"9405:5:20","nodeType":"YulIdentifier","src":"9405:5:20"},"nativeSrc":"9405:12:20","nodeType":"YulFunctionCall","src":"9405:12:20"},"variableNames":[{"name":"length","nativeSrc":"9395:6:20","nodeType":"YulIdentifier","src":"9395:6:20"}]}]},"name":"array_length_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"9285:139:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9367:5:20","nodeType":"YulTypedName","src":"9367:5:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"9377:6:20","nodeType":"YulTypedName","src":"9377:6:20","type":""}],"src":"9285:139:20"},{"body":{"nativeSrc":"9566:73:20","nodeType":"YulBlock","src":"9566:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9583:3:20","nodeType":"YulIdentifier","src":"9583:3:20"},{"name":"length","nativeSrc":"9588:6:20","nodeType":"YulIdentifier","src":"9588:6:20"}],"functionName":{"name":"mstore","nativeSrc":"9576:6:20","nodeType":"YulIdentifier","src":"9576:6:20"},"nativeSrc":"9576:19:20","nodeType":"YulFunctionCall","src":"9576:19:20"},"nativeSrc":"9576:19:20","nodeType":"YulExpressionStatement","src":"9576:19:20"},{"nativeSrc":"9604:29:20","nodeType":"YulAssignment","src":"9604:29:20","value":{"arguments":[{"name":"pos","nativeSrc":"9623:3:20","nodeType":"YulIdentifier","src":"9623:3:20"},{"kind":"number","nativeSrc":"9628:4:20","nodeType":"YulLiteral","src":"9628:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9619:3:20","nodeType":"YulIdentifier","src":"9619:3:20"},"nativeSrc":"9619:14:20","nodeType":"YulFunctionCall","src":"9619:14:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"9604:11:20","nodeType":"YulIdentifier","src":"9604:11:20"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack","nativeSrc":"9430:209:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9538:3:20","nodeType":"YulTypedName","src":"9538:3:20","type":""},{"name":"length","nativeSrc":"9543:6:20","nodeType":"YulTypedName","src":"9543:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"9554:11:20","nodeType":"YulTypedName","src":"9554:11:20","type":""}],"src":"9430:209:20"},{"body":{"nativeSrc":"9742:60:20","nodeType":"YulBlock","src":"9742:60:20","statements":[{"nativeSrc":"9752:11:20","nodeType":"YulAssignment","src":"9752:11:20","value":{"name":"ptr","nativeSrc":"9760:3:20","nodeType":"YulIdentifier","src":"9760:3:20"},"variableNames":[{"name":"data","nativeSrc":"9752:4:20","nodeType":"YulIdentifier","src":"9752:4:20"}]},{"nativeSrc":"9773:22:20","nodeType":"YulAssignment","src":"9773:22:20","value":{"arguments":[{"name":"ptr","nativeSrc":"9785:3:20","nodeType":"YulIdentifier","src":"9785:3:20"},{"kind":"number","nativeSrc":"9790:4:20","nodeType":"YulLiteral","src":"9790:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9781:3:20","nodeType":"YulIdentifier","src":"9781:3:20"},"nativeSrc":"9781:14:20","nodeType":"YulFunctionCall","src":"9781:14:20"},"variableNames":[{"name":"data","nativeSrc":"9773:4:20","nodeType":"YulIdentifier","src":"9773:4:20"}]}]},"name":"array_dataslot_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"9645:157:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"9729:3:20","nodeType":"YulTypedName","src":"9729:3:20","type":""}],"returnVariables":[{"name":"data","nativeSrc":"9737:4:20","nodeType":"YulTypedName","src":"9737:4:20","type":""}],"src":"9645:157:20"},{"body":{"nativeSrc":"9863:53:20","nodeType":"YulBlock","src":"9863:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9880:3:20","nodeType":"YulIdentifier","src":"9880:3:20"},{"arguments":[{"name":"value","nativeSrc":"9903:5:20","nodeType":"YulIdentifier","src":"9903:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"9885:17:20","nodeType":"YulIdentifier","src":"9885:17:20"},"nativeSrc":"9885:24:20","nodeType":"YulFunctionCall","src":"9885:24:20"}],"functionName":{"name":"mstore","nativeSrc":"9873:6:20","nodeType":"YulIdentifier","src":"9873:6:20"},"nativeSrc":"9873:37:20","nodeType":"YulFunctionCall","src":"9873:37:20"},"nativeSrc":"9873:37:20","nodeType":"YulExpressionStatement","src":"9873:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256","nativeSrc":"9808:108:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9851:5:20","nodeType":"YulTypedName","src":"9851:5:20","type":""},{"name":"pos","nativeSrc":"9858:3:20","nodeType":"YulTypedName","src":"9858:3:20","type":""}],"src":"9808:108:20"},{"body":{"nativeSrc":"10008:73:20","nodeType":"YulBlock","src":"10008:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10025:3:20","nodeType":"YulIdentifier","src":"10025:3:20"},{"name":"length","nativeSrc":"10030:6:20","nodeType":"YulIdentifier","src":"10030:6:20"}],"functionName":{"name":"mstore","nativeSrc":"10018:6:20","nodeType":"YulIdentifier","src":"10018:6:20"},"nativeSrc":"10018:19:20","nodeType":"YulFunctionCall","src":"10018:19:20"},"nativeSrc":"10018:19:20","nodeType":"YulExpressionStatement","src":"10018:19:20"},{"nativeSrc":"10046:29:20","nodeType":"YulAssignment","src":"10046:29:20","value":{"arguments":[{"name":"pos","nativeSrc":"10065:3:20","nodeType":"YulIdentifier","src":"10065:3:20"},{"kind":"number","nativeSrc":"10070:4:20","nodeType":"YulLiteral","src":"10070:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10061:3:20","nodeType":"YulIdentifier","src":"10061:3:20"},"nativeSrc":"10061:14:20","nodeType":"YulFunctionCall","src":"10061:14:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"10046:11:20","nodeType":"YulIdentifier","src":"10046:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nativeSrc":"9922:159:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9980:3:20","nodeType":"YulTypedName","src":"9980:3:20","type":""},{"name":"length","nativeSrc":"9985:6:20","nodeType":"YulTypedName","src":"9985:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"9996:11:20","nodeType":"YulTypedName","src":"9996:11:20","type":""}],"src":"9922:159:20"},{"body":{"nativeSrc":"10169:275:20","nodeType":"YulBlock","src":"10169:275:20","statements":[{"nativeSrc":"10179:53:20","nodeType":"YulVariableDeclaration","src":"10179:53:20","value":{"arguments":[{"name":"value","nativeSrc":"10226:5:20","nodeType":"YulIdentifier","src":"10226:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"10193:32:20","nodeType":"YulIdentifier","src":"10193:32:20"},"nativeSrc":"10193:39:20","nodeType":"YulFunctionCall","src":"10193:39:20"},"variables":[{"name":"length","nativeSrc":"10183:6:20","nodeType":"YulTypedName","src":"10183:6:20","type":""}]},{"nativeSrc":"10241:68:20","nodeType":"YulAssignment","src":"10241:68:20","value":{"arguments":[{"name":"pos","nativeSrc":"10297:3:20","nodeType":"YulIdentifier","src":"10297:3:20"},{"name":"length","nativeSrc":"10302:6:20","nodeType":"YulIdentifier","src":"10302:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nativeSrc":"10248:48:20","nodeType":"YulIdentifier","src":"10248:48:20"},"nativeSrc":"10248:61:20","nodeType":"YulFunctionCall","src":"10248:61:20"},"variableNames":[{"name":"pos","nativeSrc":"10241:3:20","nodeType":"YulIdentifier","src":"10241:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10357:5:20","nodeType":"YulIdentifier","src":"10357:5:20"},{"kind":"number","nativeSrc":"10364:4:20","nodeType":"YulLiteral","src":"10364:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10353:3:20","nodeType":"YulIdentifier","src":"10353:3:20"},"nativeSrc":"10353:16:20","nodeType":"YulFunctionCall","src":"10353:16:20"},{"name":"pos","nativeSrc":"10371:3:20","nodeType":"YulIdentifier","src":"10371:3:20"},{"name":"length","nativeSrc":"10376:6:20","nodeType":"YulIdentifier","src":"10376:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10318:34:20","nodeType":"YulIdentifier","src":"10318:34:20"},"nativeSrc":"10318:65:20","nodeType":"YulFunctionCall","src":"10318:65:20"},"nativeSrc":"10318:65:20","nodeType":"YulExpressionStatement","src":"10318:65:20"},{"nativeSrc":"10392:46:20","nodeType":"YulAssignment","src":"10392:46:20","value":{"arguments":[{"name":"pos","nativeSrc":"10403:3:20","nodeType":"YulIdentifier","src":"10403:3:20"},{"arguments":[{"name":"length","nativeSrc":"10430:6:20","nodeType":"YulIdentifier","src":"10430:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"10408:21:20","nodeType":"YulIdentifier","src":"10408:21:20"},"nativeSrc":"10408:29:20","nodeType":"YulFunctionCall","src":"10408:29:20"}],"functionName":{"name":"add","nativeSrc":"10399:3:20","nodeType":"YulIdentifier","src":"10399:3:20"},"nativeSrc":"10399:39:20","nodeType":"YulFunctionCall","src":"10399:39:20"},"variableNames":[{"name":"end","nativeSrc":"10392:3:20","nodeType":"YulIdentifier","src":"10392:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nativeSrc":"10087:357:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10150:5:20","nodeType":"YulTypedName","src":"10150:5:20","type":""},{"name":"pos","nativeSrc":"10157:3:20","nodeType":"YulTypedName","src":"10157:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10165:3:20","nodeType":"YulTypedName","src":"10165:3:20","type":""}],"src":"10087:357:20"},{"body":{"nativeSrc":"10505:53:20","nodeType":"YulBlock","src":"10505:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10522:3:20","nodeType":"YulIdentifier","src":"10522:3:20"},{"arguments":[{"name":"value","nativeSrc":"10545:5:20","nodeType":"YulIdentifier","src":"10545:5:20"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"10527:17:20","nodeType":"YulIdentifier","src":"10527:17:20"},"nativeSrc":"10527:24:20","nodeType":"YulFunctionCall","src":"10527:24:20"}],"functionName":{"name":"mstore","nativeSrc":"10515:6:20","nodeType":"YulIdentifier","src":"10515:6:20"},"nativeSrc":"10515:37:20","nodeType":"YulFunctionCall","src":"10515:37:20"},"nativeSrc":"10515:37:20","nodeType":"YulExpressionStatement","src":"10515:37:20"}]},"name":"abi_encode_t_address_to_t_address","nativeSrc":"10450:108:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10493:5:20","nodeType":"YulTypedName","src":"10493:5:20","type":""},{"name":"pos","nativeSrc":"10500:3:20","nodeType":"YulTypedName","src":"10500:3:20","type":""}],"src":"10450:108:20"},{"body":{"nativeSrc":"10726:1160:20","nodeType":"YulBlock","src":"10726:1160:20","statements":[{"nativeSrc":"10736:26:20","nodeType":"YulVariableDeclaration","src":"10736:26:20","value":{"arguments":[{"name":"pos","nativeSrc":"10752:3:20","nodeType":"YulIdentifier","src":"10752:3:20"},{"kind":"number","nativeSrc":"10757:4:20","nodeType":"YulLiteral","src":"10757:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nativeSrc":"10748:3:20","nodeType":"YulIdentifier","src":"10748:3:20"},"nativeSrc":"10748:14:20","nodeType":"YulFunctionCall","src":"10748:14:20"},"variables":[{"name":"tail","nativeSrc":"10740:4:20","nodeType":"YulTypedName","src":"10740:4:20","type":""}]},{"nativeSrc":"10772:167:20","nodeType":"YulBlock","src":"10772:167:20","statements":[{"nativeSrc":"10810:43:20","nodeType":"YulVariableDeclaration","src":"10810:43:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10840:5:20","nodeType":"YulIdentifier","src":"10840:5:20"},{"kind":"number","nativeSrc":"10847:4:20","nodeType":"YulLiteral","src":"10847:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nativeSrc":"10836:3:20","nodeType":"YulIdentifier","src":"10836:3:20"},"nativeSrc":"10836:16:20","nodeType":"YulFunctionCall","src":"10836:16:20"}],"functionName":{"name":"mload","nativeSrc":"10830:5:20","nodeType":"YulIdentifier","src":"10830:5:20"},"nativeSrc":"10830:23:20","nodeType":"YulFunctionCall","src":"10830:23:20"},"variables":[{"name":"memberValue0","nativeSrc":"10814:12:20","nodeType":"YulTypedName","src":"10814:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"10900:12:20","nodeType":"YulIdentifier","src":"10900:12:20"},{"arguments":[{"name":"pos","nativeSrc":"10918:3:20","nodeType":"YulIdentifier","src":"10918:3:20"},{"kind":"number","nativeSrc":"10923:4:20","nodeType":"YulLiteral","src":"10923:4:20","type":"","value":"0x00"}],"functionName":{"name":"add","nativeSrc":"10914:3:20","nodeType":"YulIdentifier","src":"10914:3:20"},"nativeSrc":"10914:14:20","nodeType":"YulFunctionCall","src":"10914:14:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nativeSrc":"10866:33:20","nodeType":"YulIdentifier","src":"10866:33:20"},"nativeSrc":"10866:63:20","nodeType":"YulFunctionCall","src":"10866:63:20"},"nativeSrc":"10866:63:20","nodeType":"YulExpressionStatement","src":"10866:63:20"}]},{"nativeSrc":"10949:235:20","nodeType":"YulBlock","src":"10949:235:20","statements":[{"nativeSrc":"10984:43:20","nodeType":"YulVariableDeclaration","src":"10984:43:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11014:5:20","nodeType":"YulIdentifier","src":"11014:5:20"},{"kind":"number","nativeSrc":"11021:4:20","nodeType":"YulLiteral","src":"11021:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11010:3:20","nodeType":"YulIdentifier","src":"11010:3:20"},"nativeSrc":"11010:16:20","nodeType":"YulFunctionCall","src":"11010:16:20"}],"functionName":{"name":"mload","nativeSrc":"11004:5:20","nodeType":"YulIdentifier","src":"11004:5:20"},"nativeSrc":"11004:23:20","nodeType":"YulFunctionCall","src":"11004:23:20"},"variables":[{"name":"memberValue0","nativeSrc":"10988:12:20","nodeType":"YulTypedName","src":"10988:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"11052:3:20","nodeType":"YulIdentifier","src":"11052:3:20"},{"kind":"number","nativeSrc":"11057:4:20","nodeType":"YulLiteral","src":"11057:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11048:3:20","nodeType":"YulIdentifier","src":"11048:3:20"},"nativeSrc":"11048:14:20","nodeType":"YulFunctionCall","src":"11048:14:20"},{"arguments":[{"name":"tail","nativeSrc":"11068:4:20","nodeType":"YulIdentifier","src":"11068:4:20"},{"name":"pos","nativeSrc":"11074:3:20","nodeType":"YulIdentifier","src":"11074:3:20"}],"functionName":{"name":"sub","nativeSrc":"11064:3:20","nodeType":"YulIdentifier","src":"11064:3:20"},"nativeSrc":"11064:14:20","nodeType":"YulFunctionCall","src":"11064:14:20"}],"functionName":{"name":"mstore","nativeSrc":"11041:6:20","nodeType":"YulIdentifier","src":"11041:6:20"},"nativeSrc":"11041:38:20","nodeType":"YulFunctionCall","src":"11041:38:20"},"nativeSrc":"11041:38:20","nodeType":"YulExpressionStatement","src":"11041:38:20"},{"nativeSrc":"11092:81:20","nodeType":"YulAssignment","src":"11092:81:20","value":{"arguments":[{"name":"memberValue0","nativeSrc":"11154:12:20","nodeType":"YulIdentifier","src":"11154:12:20"},{"name":"tail","nativeSrc":"11168:4:20","nodeType":"YulIdentifier","src":"11168:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nativeSrc":"11100:53:20","nodeType":"YulIdentifier","src":"11100:53:20"},"nativeSrc":"11100:73:20","nodeType":"YulFunctionCall","src":"11100:73:20"},"variableNames":[{"name":"tail","nativeSrc":"11092:4:20","nodeType":"YulIdentifier","src":"11092:4:20"}]}]},{"nativeSrc":"11194:242:20","nodeType":"YulBlock","src":"11194:242:20","statements":[{"nativeSrc":"11236:43:20","nodeType":"YulVariableDeclaration","src":"11236:43:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11266:5:20","nodeType":"YulIdentifier","src":"11266:5:20"},{"kind":"number","nativeSrc":"11273:4:20","nodeType":"YulLiteral","src":"11273:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"11262:3:20","nodeType":"YulIdentifier","src":"11262:3:20"},"nativeSrc":"11262:16:20","nodeType":"YulFunctionCall","src":"11262:16:20"}],"functionName":{"name":"mload","nativeSrc":"11256:5:20","nodeType":"YulIdentifier","src":"11256:5:20"},"nativeSrc":"11256:23:20","nodeType":"YulFunctionCall","src":"11256:23:20"},"variables":[{"name":"memberValue0","nativeSrc":"11240:12:20","nodeType":"YulTypedName","src":"11240:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"11304:3:20","nodeType":"YulIdentifier","src":"11304:3:20"},{"kind":"number","nativeSrc":"11309:4:20","nodeType":"YulLiteral","src":"11309:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"11300:3:20","nodeType":"YulIdentifier","src":"11300:3:20"},"nativeSrc":"11300:14:20","nodeType":"YulFunctionCall","src":"11300:14:20"},{"arguments":[{"name":"tail","nativeSrc":"11320:4:20","nodeType":"YulIdentifier","src":"11320:4:20"},{"name":"pos","nativeSrc":"11326:3:20","nodeType":"YulIdentifier","src":"11326:3:20"}],"functionName":{"name":"sub","nativeSrc":"11316:3:20","nodeType":"YulIdentifier","src":"11316:3:20"},"nativeSrc":"11316:14:20","nodeType":"YulFunctionCall","src":"11316:14:20"}],"functionName":{"name":"mstore","nativeSrc":"11293:6:20","nodeType":"YulIdentifier","src":"11293:6:20"},"nativeSrc":"11293:38:20","nodeType":"YulFunctionCall","src":"11293:38:20"},"nativeSrc":"11293:38:20","nodeType":"YulExpressionStatement","src":"11293:38:20"},{"nativeSrc":"11344:81:20","nodeType":"YulAssignment","src":"11344:81:20","value":{"arguments":[{"name":"memberValue0","nativeSrc":"11406:12:20","nodeType":"YulIdentifier","src":"11406:12:20"},{"name":"tail","nativeSrc":"11420:4:20","nodeType":"YulIdentifier","src":"11420:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nativeSrc":"11352:53:20","nodeType":"YulIdentifier","src":"11352:53:20"},"nativeSrc":"11352:73:20","nodeType":"YulFunctionCall","src":"11352:73:20"},"variableNames":[{"name":"tail","nativeSrc":"11344:4:20","nodeType":"YulIdentifier","src":"11344:4:20"}]}]},{"nativeSrc":"11446:236:20","nodeType":"YulBlock","src":"11446:236:20","statements":[{"nativeSrc":"11482:43:20","nodeType":"YulVariableDeclaration","src":"11482:43:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11512:5:20","nodeType":"YulIdentifier","src":"11512:5:20"},{"kind":"number","nativeSrc":"11519:4:20","nodeType":"YulLiteral","src":"11519:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"11508:3:20","nodeType":"YulIdentifier","src":"11508:3:20"},"nativeSrc":"11508:16:20","nodeType":"YulFunctionCall","src":"11508:16:20"}],"functionName":{"name":"mload","nativeSrc":"11502:5:20","nodeType":"YulIdentifier","src":"11502:5:20"},"nativeSrc":"11502:23:20","nodeType":"YulFunctionCall","src":"11502:23:20"},"variables":[{"name":"memberValue0","nativeSrc":"11486:12:20","nodeType":"YulTypedName","src":"11486:12:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"11550:3:20","nodeType":"YulIdentifier","src":"11550:3:20"},{"kind":"number","nativeSrc":"11555:4:20","nodeType":"YulLiteral","src":"11555:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"11546:3:20","nodeType":"YulIdentifier","src":"11546:3:20"},"nativeSrc":"11546:14:20","nodeType":"YulFunctionCall","src":"11546:14:20"},{"arguments":[{"name":"tail","nativeSrc":"11566:4:20","nodeType":"YulIdentifier","src":"11566:4:20"},{"name":"pos","nativeSrc":"11572:3:20","nodeType":"YulIdentifier","src":"11572:3:20"}],"functionName":{"name":"sub","nativeSrc":"11562:3:20","nodeType":"YulIdentifier","src":"11562:3:20"},"nativeSrc":"11562:14:20","nodeType":"YulFunctionCall","src":"11562:14:20"}],"functionName":{"name":"mstore","nativeSrc":"11539:6:20","nodeType":"YulIdentifier","src":"11539:6:20"},"nativeSrc":"11539:38:20","nodeType":"YulFunctionCall","src":"11539:38:20"},"nativeSrc":"11539:38:20","nodeType":"YulExpressionStatement","src":"11539:38:20"},{"nativeSrc":"11590:81:20","nodeType":"YulAssignment","src":"11590:81:20","value":{"arguments":[{"name":"memberValue0","nativeSrc":"11652:12:20","nodeType":"YulIdentifier","src":"11652:12:20"},{"name":"tail","nativeSrc":"11666:4:20","nodeType":"YulIdentifier","src":"11666:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nativeSrc":"11598:53:20","nodeType":"YulIdentifier","src":"11598:53:20"},"nativeSrc":"11598:73:20","nodeType":"YulFunctionCall","src":"11598:73:20"},"variableNames":[{"name":"tail","nativeSrc":"11590:4:20","nodeType":"YulIdentifier","src":"11590:4:20"}]}]},{"nativeSrc":"11692:167:20","nodeType":"YulBlock","src":"11692:167:20","statements":[{"nativeSrc":"11730:43:20","nodeType":"YulVariableDeclaration","src":"11730:43:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11760:5:20","nodeType":"YulIdentifier","src":"11760:5:20"},{"kind":"number","nativeSrc":"11767:4:20","nodeType":"YulLiteral","src":"11767:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"11756:3:20","nodeType":"YulIdentifier","src":"11756:3:20"},"nativeSrc":"11756:16:20","nodeType":"YulFunctionCall","src":"11756:16:20"}],"functionName":{"name":"mload","nativeSrc":"11750:5:20","nodeType":"YulIdentifier","src":"11750:5:20"},"nativeSrc":"11750:23:20","nodeType":"YulFunctionCall","src":"11750:23:20"},"variables":[{"name":"memberValue0","nativeSrc":"11734:12:20","nodeType":"YulTypedName","src":"11734:12:20","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"11820:12:20","nodeType":"YulIdentifier","src":"11820:12:20"},{"arguments":[{"name":"pos","nativeSrc":"11838:3:20","nodeType":"YulIdentifier","src":"11838:3:20"},{"kind":"number","nativeSrc":"11843:4:20","nodeType":"YulLiteral","src":"11843:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"11834:3:20","nodeType":"YulIdentifier","src":"11834:3:20"},"nativeSrc":"11834:14:20","nodeType":"YulFunctionCall","src":"11834:14:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nativeSrc":"11786:33:20","nodeType":"YulIdentifier","src":"11786:33:20"},"nativeSrc":"11786:63:20","nodeType":"YulFunctionCall","src":"11786:63:20"},"nativeSrc":"11786:63:20","nodeType":"YulExpressionStatement","src":"11786:63:20"}]},{"nativeSrc":"11869:11:20","nodeType":"YulAssignment","src":"11869:11:20","value":{"name":"tail","nativeSrc":"11876:4:20","nodeType":"YulIdentifier","src":"11876:4:20"},"variableNames":[{"name":"end","nativeSrc":"11869:3:20","nodeType":"YulIdentifier","src":"11869:3:20"}]}]},"name":"abi_encode_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr","nativeSrc":"10612:1274:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10705:5:20","nodeType":"YulTypedName","src":"10705:5:20","type":""},{"name":"pos","nativeSrc":"10712:3:20","nodeType":"YulTypedName","src":"10712:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10721:3:20","nodeType":"YulTypedName","src":"10721:3:20","type":""}],"src":"10612:1274:20"},{"body":{"nativeSrc":"12022:126:20","nodeType":"YulBlock","src":"12022:126:20","statements":[{"nativeSrc":"12032:110:20","nodeType":"YulAssignment","src":"12032:110:20","value":{"arguments":[{"name":"value0","nativeSrc":"12130:6:20","nodeType":"YulIdentifier","src":"12130:6:20"},{"name":"pos","nativeSrc":"12138:3:20","nodeType":"YulIdentifier","src":"12138:3:20"}],"functionName":{"name":"abi_encode_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr","nativeSrc":"12046:83:20","nodeType":"YulIdentifier","src":"12046:83:20"},"nativeSrc":"12046:96:20","nodeType":"YulFunctionCall","src":"12046:96:20"},"variableNames":[{"name":"updatedPos","nativeSrc":"12032:10:20","nodeType":"YulIdentifier","src":"12032:10:20"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr","nativeSrc":"11892:256:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nativeSrc":"11995:6:20","nodeType":"YulTypedName","src":"11995:6:20","type":""},{"name":"pos","nativeSrc":"12003:3:20","nodeType":"YulTypedName","src":"12003:3:20","type":""}],"returnVariables":[{"name":"updatedPos","nativeSrc":"12011:10:20","nodeType":"YulTypedName","src":"12011:10:20","type":""}],"src":"11892:256:20"},{"body":{"nativeSrc":"12254:38:20","nodeType":"YulBlock","src":"12254:38:20","statements":[{"nativeSrc":"12264:22:20","nodeType":"YulAssignment","src":"12264:22:20","value":{"arguments":[{"name":"ptr","nativeSrc":"12276:3:20","nodeType":"YulIdentifier","src":"12276:3:20"},{"kind":"number","nativeSrc":"12281:4:20","nodeType":"YulLiteral","src":"12281:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"12272:3:20","nodeType":"YulIdentifier","src":"12272:3:20"},"nativeSrc":"12272:14:20","nodeType":"YulFunctionCall","src":"12272:14:20"},"variableNames":[{"name":"next","nativeSrc":"12264:4:20","nodeType":"YulIdentifier","src":"12264:4:20"}]}]},"name":"array_nextElement_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"12154:138:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"12241:3:20","nodeType":"YulTypedName","src":"12241:3:20","type":""}],"returnVariables":[{"name":"next","nativeSrc":"12249:4:20","nodeType":"YulTypedName","src":"12249:4:20","type":""}],"src":"12154:138:20"},{"body":{"nativeSrc":"12524:937:20","nodeType":"YulBlock","src":"12524:937:20","statements":[{"nativeSrc":"12534:93:20","nodeType":"YulVariableDeclaration","src":"12534:93:20","value":{"arguments":[{"name":"value","nativeSrc":"12621:5:20","nodeType":"YulIdentifier","src":"12621:5:20"}],"functionName":{"name":"array_length_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"12548:72:20","nodeType":"YulIdentifier","src":"12548:72:20"},"nativeSrc":"12548:79:20","nodeType":"YulFunctionCall","src":"12548:79:20"},"variables":[{"name":"length","nativeSrc":"12538:6:20","nodeType":"YulTypedName","src":"12538:6:20","type":""}]},{"nativeSrc":"12636:118:20","nodeType":"YulAssignment","src":"12636:118:20","value":{"arguments":[{"name":"pos","nativeSrc":"12742:3:20","nodeType":"YulIdentifier","src":"12742:3:20"},{"name":"length","nativeSrc":"12747:6:20","nodeType":"YulIdentifier","src":"12747:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack","nativeSrc":"12643:98:20","nodeType":"YulIdentifier","src":"12643:98:20"},"nativeSrc":"12643:111:20","nodeType":"YulFunctionCall","src":"12643:111:20"},"variableNames":[{"name":"pos","nativeSrc":"12636:3:20","nodeType":"YulIdentifier","src":"12636:3:20"}]},{"nativeSrc":"12763:20:20","nodeType":"YulVariableDeclaration","src":"12763:20:20","value":{"name":"pos","nativeSrc":"12780:3:20","nodeType":"YulIdentifier","src":"12780:3:20"},"variables":[{"name":"headStart","nativeSrc":"12767:9:20","nodeType":"YulTypedName","src":"12767:9:20","type":""}]},{"nativeSrc":"12792:39:20","nodeType":"YulVariableDeclaration","src":"12792:39:20","value":{"arguments":[{"name":"pos","nativeSrc":"12808:3:20","nodeType":"YulIdentifier","src":"12808:3:20"},{"arguments":[{"name":"length","nativeSrc":"12817:6:20","nodeType":"YulIdentifier","src":"12817:6:20"},{"kind":"number","nativeSrc":"12825:4:20","nodeType":"YulLiteral","src":"12825:4:20","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"12813:3:20","nodeType":"YulIdentifier","src":"12813:3:20"},"nativeSrc":"12813:17:20","nodeType":"YulFunctionCall","src":"12813:17:20"}],"functionName":{"name":"add","nativeSrc":"12804:3:20","nodeType":"YulIdentifier","src":"12804:3:20"},"nativeSrc":"12804:27:20","nodeType":"YulFunctionCall","src":"12804:27:20"},"variables":[{"name":"tail","nativeSrc":"12796:4:20","nodeType":"YulTypedName","src":"12796:4:20","type":""}]},{"nativeSrc":"12840:96:20","nodeType":"YulVariableDeclaration","src":"12840:96:20","value":{"arguments":[{"name":"value","nativeSrc":"12930:5:20","nodeType":"YulIdentifier","src":"12930:5:20"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"12855:74:20","nodeType":"YulIdentifier","src":"12855:74:20"},"nativeSrc":"12855:81:20","nodeType":"YulFunctionCall","src":"12855:81:20"},"variables":[{"name":"baseRef","nativeSrc":"12844:7:20","nodeType":"YulTypedName","src":"12844:7:20","type":""}]},{"nativeSrc":"12945:21:20","nodeType":"YulVariableDeclaration","src":"12945:21:20","value":{"name":"baseRef","nativeSrc":"12959:7:20","nodeType":"YulIdentifier","src":"12959:7:20"},"variables":[{"name":"srcPtr","nativeSrc":"12949:6:20","nodeType":"YulTypedName","src":"12949:6:20","type":""}]},{"body":{"nativeSrc":"13035:381:20","nodeType":"YulBlock","src":"13035:381:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"13056:3:20","nodeType":"YulIdentifier","src":"13056:3:20"},{"arguments":[{"name":"tail","nativeSrc":"13065:4:20","nodeType":"YulIdentifier","src":"13065:4:20"},{"name":"headStart","nativeSrc":"13071:9:20","nodeType":"YulIdentifier","src":"13071:9:20"}],"functionName":{"name":"sub","nativeSrc":"13061:3:20","nodeType":"YulIdentifier","src":"13061:3:20"},"nativeSrc":"13061:20:20","nodeType":"YulFunctionCall","src":"13061:20:20"}],"functionName":{"name":"mstore","nativeSrc":"13049:6:20","nodeType":"YulIdentifier","src":"13049:6:20"},"nativeSrc":"13049:33:20","nodeType":"YulFunctionCall","src":"13049:33:20"},"nativeSrc":"13049:33:20","nodeType":"YulExpressionStatement","src":"13049:33:20"},{"nativeSrc":"13095:34:20","nodeType":"YulVariableDeclaration","src":"13095:34:20","value":{"arguments":[{"name":"srcPtr","nativeSrc":"13122:6:20","nodeType":"YulIdentifier","src":"13122:6:20"}],"functionName":{"name":"mload","nativeSrc":"13116:5:20","nodeType":"YulIdentifier","src":"13116:5:20"},"nativeSrc":"13116:13:20","nodeType":"YulFunctionCall","src":"13116:13:20"},"variables":[{"name":"elementValue0","nativeSrc":"13099:13:20","nodeType":"YulTypedName","src":"13099:13:20","type":""}]},{"nativeSrc":"13142:122:20","nodeType":"YulAssignment","src":"13142:122:20","value":{"arguments":[{"name":"elementValue0","nativeSrc":"13244:13:20","nodeType":"YulIdentifier","src":"13244:13:20"},{"name":"tail","nativeSrc":"13259:4:20","nodeType":"YulIdentifier","src":"13259:4:20"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr","nativeSrc":"13150:93:20","nodeType":"YulIdentifier","src":"13150:93:20"},"nativeSrc":"13150:114:20","nodeType":"YulFunctionCall","src":"13150:114:20"},"variableNames":[{"name":"tail","nativeSrc":"13142:4:20","nodeType":"YulIdentifier","src":"13142:4:20"}]},{"nativeSrc":"13277:95:20","nodeType":"YulAssignment","src":"13277:95:20","value":{"arguments":[{"name":"srcPtr","nativeSrc":"13365:6:20","nodeType":"YulIdentifier","src":"13365:6:20"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr","nativeSrc":"13287:77:20","nodeType":"YulIdentifier","src":"13287:77:20"},"nativeSrc":"13287:85:20","nodeType":"YulFunctionCall","src":"13287:85:20"},"variableNames":[{"name":"srcPtr","nativeSrc":"13277:6:20","nodeType":"YulIdentifier","src":"13277:6:20"}]},{"nativeSrc":"13385:21:20","nodeType":"YulAssignment","src":"13385:21:20","value":{"arguments":[{"name":"pos","nativeSrc":"13396:3:20","nodeType":"YulIdentifier","src":"13396:3:20"},{"kind":"number","nativeSrc":"13401:4:20","nodeType":"YulLiteral","src":"13401:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13392:3:20","nodeType":"YulIdentifier","src":"13392:3:20"},"nativeSrc":"13392:14:20","nodeType":"YulFunctionCall","src":"13392:14:20"},"variableNames":[{"name":"pos","nativeSrc":"13385:3:20","nodeType":"YulIdentifier","src":"13385:3:20"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"12997:1:20","nodeType":"YulIdentifier","src":"12997:1:20"},{"name":"length","nativeSrc":"13000:6:20","nodeType":"YulIdentifier","src":"13000:6:20"}],"functionName":{"name":"lt","nativeSrc":"12994:2:20","nodeType":"YulIdentifier","src":"12994:2:20"},"nativeSrc":"12994:13:20","nodeType":"YulFunctionCall","src":"12994:13:20"},"nativeSrc":"12975:441:20","nodeType":"YulForLoop","post":{"nativeSrc":"13008:18:20","nodeType":"YulBlock","src":"13008:18:20","statements":[{"nativeSrc":"13010:14:20","nodeType":"YulAssignment","src":"13010:14:20","value":{"arguments":[{"name":"i","nativeSrc":"13019:1:20","nodeType":"YulIdentifier","src":"13019:1:20"},{"kind":"number","nativeSrc":"13022:1:20","nodeType":"YulLiteral","src":"13022:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13015:3:20","nodeType":"YulIdentifier","src":"13015:3:20"},"nativeSrc":"13015:9:20","nodeType":"YulFunctionCall","src":"13015:9:20"},"variableNames":[{"name":"i","nativeSrc":"13010:1:20","nodeType":"YulIdentifier","src":"13010:1:20"}]}]},"pre":{"nativeSrc":"12979:14:20","nodeType":"YulBlock","src":"12979:14:20","statements":[{"nativeSrc":"12981:10:20","nodeType":"YulVariableDeclaration","src":"12981:10:20","value":{"kind":"number","nativeSrc":"12990:1:20","nodeType":"YulLiteral","src":"12990:1:20","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"12985:1:20","nodeType":"YulTypedName","src":"12985:1:20","type":""}]}]},"src":"12975:441:20"},{"nativeSrc":"13425:11:20","nodeType":"YulAssignment","src":"13425:11:20","value":{"name":"tail","nativeSrc":"13432:4:20","nodeType":"YulIdentifier","src":"13432:4:20"},"variableNames":[{"name":"pos","nativeSrc":"13425:3:20","nodeType":"YulIdentifier","src":"13425:3:20"}]},{"nativeSrc":"13445:10:20","nodeType":"YulAssignment","src":"13445:10:20","value":{"name":"pos","nativeSrc":"13452:3:20","nodeType":"YulIdentifier","src":"13452:3:20"},"variableNames":[{"name":"end","nativeSrc":"13445:3:20","nodeType":"YulIdentifier","src":"13445:3:20"}]}]},"name":"abi_encode_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack","nativeSrc":"12350:1111:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12503:5:20","nodeType":"YulTypedName","src":"12503:5:20","type":""},{"name":"pos","nativeSrc":"12510:3:20","nodeType":"YulTypedName","src":"12510:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12519:3:20","nodeType":"YulTypedName","src":"12519:3:20","type":""}],"src":"12350:1111:20"},{"body":{"nativeSrc":"13665:275:20","nodeType":"YulBlock","src":"13665:275:20","statements":[{"nativeSrc":"13675:26:20","nodeType":"YulAssignment","src":"13675:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"13687:9:20","nodeType":"YulIdentifier","src":"13687:9:20"},{"kind":"number","nativeSrc":"13698:2:20","nodeType":"YulLiteral","src":"13698:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13683:3:20","nodeType":"YulIdentifier","src":"13683:3:20"},"nativeSrc":"13683:18:20","nodeType":"YulFunctionCall","src":"13683:18:20"},"variableNames":[{"name":"tail","nativeSrc":"13675:4:20","nodeType":"YulIdentifier","src":"13675:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13722:9:20","nodeType":"YulIdentifier","src":"13722:9:20"},{"kind":"number","nativeSrc":"13733:1:20","nodeType":"YulLiteral","src":"13733:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13718:3:20","nodeType":"YulIdentifier","src":"13718:3:20"},"nativeSrc":"13718:17:20","nodeType":"YulFunctionCall","src":"13718:17:20"},{"arguments":[{"name":"tail","nativeSrc":"13741:4:20","nodeType":"YulIdentifier","src":"13741:4:20"},{"name":"headStart","nativeSrc":"13747:9:20","nodeType":"YulIdentifier","src":"13747:9:20"}],"functionName":{"name":"sub","nativeSrc":"13737:3:20","nodeType":"YulIdentifier","src":"13737:3:20"},"nativeSrc":"13737:20:20","nodeType":"YulFunctionCall","src":"13737:20:20"}],"functionName":{"name":"mstore","nativeSrc":"13711:6:20","nodeType":"YulIdentifier","src":"13711:6:20"},"nativeSrc":"13711:47:20","nodeType":"YulFunctionCall","src":"13711:47:20"},"nativeSrc":"13711:47:20","nodeType":"YulExpressionStatement","src":"13711:47:20"},{"nativeSrc":"13767:166:20","nodeType":"YulAssignment","src":"13767:166:20","value":{"arguments":[{"name":"value0","nativeSrc":"13919:6:20","nodeType":"YulIdentifier","src":"13919:6:20"},{"name":"tail","nativeSrc":"13928:4:20","nodeType":"YulIdentifier","src":"13928:4:20"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack","nativeSrc":"13775:143:20","nodeType":"YulIdentifier","src":"13775:143:20"},"nativeSrc":"13775:158:20","nodeType":"YulFunctionCall","src":"13775:158:20"},"variableNames":[{"name":"tail","nativeSrc":"13767:4:20","nodeType":"YulIdentifier","src":"13767:4:20"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"13467:473:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13637:9:20","nodeType":"YulTypedName","src":"13637:9:20","type":""},{"name":"value0","nativeSrc":"13649:6:20","nodeType":"YulTypedName","src":"13649:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13660:4:20","nodeType":"YulTypedName","src":"13660:4:20","type":""}],"src":"13467:473:20"},{"body":{"nativeSrc":"14035:28:20","nodeType":"YulBlock","src":"14035:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14052:1:20","nodeType":"YulLiteral","src":"14052:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"14055:1:20","nodeType":"YulLiteral","src":"14055:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14045:6:20","nodeType":"YulIdentifier","src":"14045:6:20"},"nativeSrc":"14045:12:20","nodeType":"YulFunctionCall","src":"14045:12:20"},"nativeSrc":"14045:12:20","nodeType":"YulExpressionStatement","src":"14045:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"13946:117:20","nodeType":"YulFunctionDefinition","src":"13946:117:20"},{"body":{"nativeSrc":"14158:28:20","nodeType":"YulBlock","src":"14158:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14175:1:20","nodeType":"YulLiteral","src":"14175:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"14178:1:20","nodeType":"YulLiteral","src":"14178:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14168:6:20","nodeType":"YulIdentifier","src":"14168:6:20"},"nativeSrc":"14168:12:20","nodeType":"YulFunctionCall","src":"14168:12:20"},"nativeSrc":"14168:12:20","nodeType":"YulExpressionStatement","src":"14168:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"14069:117:20","nodeType":"YulFunctionDefinition","src":"14069:117:20"},{"body":{"nativeSrc":"14220:152:20","nodeType":"YulBlock","src":"14220:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14237:1:20","nodeType":"YulLiteral","src":"14237:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"14240:77:20","nodeType":"YulLiteral","src":"14240:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"14230:6:20","nodeType":"YulIdentifier","src":"14230:6:20"},"nativeSrc":"14230:88:20","nodeType":"YulFunctionCall","src":"14230:88:20"},"nativeSrc":"14230:88:20","nodeType":"YulExpressionStatement","src":"14230:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14334:1:20","nodeType":"YulLiteral","src":"14334:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"14337:4:20","nodeType":"YulLiteral","src":"14337:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"14327:6:20","nodeType":"YulIdentifier","src":"14327:6:20"},"nativeSrc":"14327:15:20","nodeType":"YulFunctionCall","src":"14327:15:20"},"nativeSrc":"14327:15:20","nodeType":"YulExpressionStatement","src":"14327:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14358:1:20","nodeType":"YulLiteral","src":"14358:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"14361:4:20","nodeType":"YulLiteral","src":"14361:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14351:6:20","nodeType":"YulIdentifier","src":"14351:6:20"},"nativeSrc":"14351:15:20","nodeType":"YulFunctionCall","src":"14351:15:20"},"nativeSrc":"14351:15:20","nodeType":"YulExpressionStatement","src":"14351:15:20"}]},"name":"panic_error_0x41","nativeSrc":"14192:180:20","nodeType":"YulFunctionDefinition","src":"14192:180:20"},{"body":{"nativeSrc":"14421:238:20","nodeType":"YulBlock","src":"14421:238:20","statements":[{"nativeSrc":"14431:58:20","nodeType":"YulVariableDeclaration","src":"14431:58:20","value":{"arguments":[{"name":"memPtr","nativeSrc":"14453:6:20","nodeType":"YulIdentifier","src":"14453:6:20"},{"arguments":[{"name":"size","nativeSrc":"14483:4:20","nodeType":"YulIdentifier","src":"14483:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"14461:21:20","nodeType":"YulIdentifier","src":"14461:21:20"},"nativeSrc":"14461:27:20","nodeType":"YulFunctionCall","src":"14461:27:20"}],"functionName":{"name":"add","nativeSrc":"14449:3:20","nodeType":"YulIdentifier","src":"14449:3:20"},"nativeSrc":"14449:40:20","nodeType":"YulFunctionCall","src":"14449:40:20"},"variables":[{"name":"newFreePtr","nativeSrc":"14435:10:20","nodeType":"YulTypedName","src":"14435:10:20","type":""}]},{"body":{"nativeSrc":"14600:22:20","nodeType":"YulBlock","src":"14600:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"14602:16:20","nodeType":"YulIdentifier","src":"14602:16:20"},"nativeSrc":"14602:18:20","nodeType":"YulFunctionCall","src":"14602:18:20"},"nativeSrc":"14602:18:20","nodeType":"YulExpressionStatement","src":"14602:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"14543:10:20","nodeType":"YulIdentifier","src":"14543:10:20"},{"kind":"number","nativeSrc":"14555:18:20","nodeType":"YulLiteral","src":"14555:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"14540:2:20","nodeType":"YulIdentifier","src":"14540:2:20"},"nativeSrc":"14540:34:20","nodeType":"YulFunctionCall","src":"14540:34:20"},{"arguments":[{"name":"newFreePtr","nativeSrc":"14579:10:20","nodeType":"YulIdentifier","src":"14579:10:20"},{"name":"memPtr","nativeSrc":"14591:6:20","nodeType":"YulIdentifier","src":"14591:6:20"}],"functionName":{"name":"lt","nativeSrc":"14576:2:20","nodeType":"YulIdentifier","src":"14576:2:20"},"nativeSrc":"14576:22:20","nodeType":"YulFunctionCall","src":"14576:22:20"}],"functionName":{"name":"or","nativeSrc":"14537:2:20","nodeType":"YulIdentifier","src":"14537:2:20"},"nativeSrc":"14537:62:20","nodeType":"YulFunctionCall","src":"14537:62:20"},"nativeSrc":"14534:88:20","nodeType":"YulIf","src":"14534:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14638:2:20","nodeType":"YulLiteral","src":"14638:2:20","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"14642:10:20","nodeType":"YulIdentifier","src":"14642:10:20"}],"functionName":{"name":"mstore","nativeSrc":"14631:6:20","nodeType":"YulIdentifier","src":"14631:6:20"},"nativeSrc":"14631:22:20","nodeType":"YulFunctionCall","src":"14631:22:20"},"nativeSrc":"14631:22:20","nodeType":"YulExpressionStatement","src":"14631:22:20"}]},"name":"finalize_allocation","nativeSrc":"14378:281:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"14407:6:20","nodeType":"YulTypedName","src":"14407:6:20","type":""},{"name":"size","nativeSrc":"14415:4:20","nodeType":"YulTypedName","src":"14415:4:20","type":""}],"src":"14378:281:20"},{"body":{"nativeSrc":"14706:88:20","nodeType":"YulBlock","src":"14706:88:20","statements":[{"nativeSrc":"14716:30:20","nodeType":"YulAssignment","src":"14716:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"14726:18:20","nodeType":"YulIdentifier","src":"14726:18:20"},"nativeSrc":"14726:20:20","nodeType":"YulFunctionCall","src":"14726:20:20"},"variableNames":[{"name":"memPtr","nativeSrc":"14716:6:20","nodeType":"YulIdentifier","src":"14716:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"14775:6:20","nodeType":"YulIdentifier","src":"14775:6:20"},{"name":"size","nativeSrc":"14783:4:20","nodeType":"YulIdentifier","src":"14783:4:20"}],"functionName":{"name":"finalize_allocation","nativeSrc":"14755:19:20","nodeType":"YulIdentifier","src":"14755:19:20"},"nativeSrc":"14755:33:20","nodeType":"YulFunctionCall","src":"14755:33:20"},"nativeSrc":"14755:33:20","nodeType":"YulExpressionStatement","src":"14755:33:20"}]},"name":"allocate_memory","nativeSrc":"14665:129:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"14690:4:20","nodeType":"YulTypedName","src":"14690:4:20","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"14699:6:20","nodeType":"YulTypedName","src":"14699:6:20","type":""}],"src":"14665:129:20"},{"body":{"nativeSrc":"14866:241:20","nodeType":"YulBlock","src":"14866:241:20","statements":[{"body":{"nativeSrc":"14971:22:20","nodeType":"YulBlock","src":"14971:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"14973:16:20","nodeType":"YulIdentifier","src":"14973:16:20"},"nativeSrc":"14973:18:20","nodeType":"YulFunctionCall","src":"14973:18:20"},"nativeSrc":"14973:18:20","nodeType":"YulExpressionStatement","src":"14973:18:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"14943:6:20","nodeType":"YulIdentifier","src":"14943:6:20"},{"kind":"number","nativeSrc":"14951:18:20","nodeType":"YulLiteral","src":"14951:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"14940:2:20","nodeType":"YulIdentifier","src":"14940:2:20"},"nativeSrc":"14940:30:20","nodeType":"YulFunctionCall","src":"14940:30:20"},"nativeSrc":"14937:56:20","nodeType":"YulIf","src":"14937:56:20"},{"nativeSrc":"15003:37:20","nodeType":"YulAssignment","src":"15003:37:20","value":{"arguments":[{"name":"length","nativeSrc":"15033:6:20","nodeType":"YulIdentifier","src":"15033:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"15011:21:20","nodeType":"YulIdentifier","src":"15011:21:20"},"nativeSrc":"15011:29:20","nodeType":"YulFunctionCall","src":"15011:29:20"},"variableNames":[{"name":"size","nativeSrc":"15003:4:20","nodeType":"YulIdentifier","src":"15003:4:20"}]},{"nativeSrc":"15077:23:20","nodeType":"YulAssignment","src":"15077:23:20","value":{"arguments":[{"name":"size","nativeSrc":"15089:4:20","nodeType":"YulIdentifier","src":"15089:4:20"},{"kind":"number","nativeSrc":"15095:4:20","nodeType":"YulLiteral","src":"15095:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15085:3:20","nodeType":"YulIdentifier","src":"15085:3:20"},"nativeSrc":"15085:15:20","nodeType":"YulFunctionCall","src":"15085:15:20"},"variableNames":[{"name":"size","nativeSrc":"15077:4:20","nodeType":"YulIdentifier","src":"15077:4:20"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"14800:307:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"14850:6:20","nodeType":"YulTypedName","src":"14850:6:20","type":""}],"returnVariables":[{"name":"size","nativeSrc":"14861:4:20","nodeType":"YulTypedName","src":"14861:4:20","type":""}],"src":"14800:307:20"},{"body":{"nativeSrc":"15177:84:20","nodeType":"YulBlock","src":"15177:84:20","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"15201:3:20","nodeType":"YulIdentifier","src":"15201:3:20"},{"name":"src","nativeSrc":"15206:3:20","nodeType":"YulIdentifier","src":"15206:3:20"},{"name":"length","nativeSrc":"15211:6:20","nodeType":"YulIdentifier","src":"15211:6:20"}],"functionName":{"name":"calldatacopy","nativeSrc":"15188:12:20","nodeType":"YulIdentifier","src":"15188:12:20"},"nativeSrc":"15188:30:20","nodeType":"YulFunctionCall","src":"15188:30:20"},"nativeSrc":"15188:30:20","nodeType":"YulExpressionStatement","src":"15188:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"15238:3:20","nodeType":"YulIdentifier","src":"15238:3:20"},{"name":"length","nativeSrc":"15243:6:20","nodeType":"YulIdentifier","src":"15243:6:20"}],"functionName":{"name":"add","nativeSrc":"15234:3:20","nodeType":"YulIdentifier","src":"15234:3:20"},"nativeSrc":"15234:16:20","nodeType":"YulFunctionCall","src":"15234:16:20"},{"kind":"number","nativeSrc":"15252:1:20","nodeType":"YulLiteral","src":"15252:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"15227:6:20","nodeType":"YulIdentifier","src":"15227:6:20"},"nativeSrc":"15227:27:20","nodeType":"YulFunctionCall","src":"15227:27:20"},"nativeSrc":"15227:27:20","nodeType":"YulExpressionStatement","src":"15227:27:20"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"15113:148:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"15159:3:20","nodeType":"YulTypedName","src":"15159:3:20","type":""},{"name":"dst","nativeSrc":"15164:3:20","nodeType":"YulTypedName","src":"15164:3:20","type":""},{"name":"length","nativeSrc":"15169:6:20","nodeType":"YulTypedName","src":"15169:6:20","type":""}],"src":"15113:148:20"},{"body":{"nativeSrc":"15350:340:20","nodeType":"YulBlock","src":"15350:340:20","statements":[{"nativeSrc":"15360:74:20","nodeType":"YulAssignment","src":"15360:74:20","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"15426:6:20","nodeType":"YulIdentifier","src":"15426:6:20"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"15385:40:20","nodeType":"YulIdentifier","src":"15385:40:20"},"nativeSrc":"15385:48:20","nodeType":"YulFunctionCall","src":"15385:48:20"}],"functionName":{"name":"allocate_memory","nativeSrc":"15369:15:20","nodeType":"YulIdentifier","src":"15369:15:20"},"nativeSrc":"15369:65:20","nodeType":"YulFunctionCall","src":"15369:65:20"},"variableNames":[{"name":"array","nativeSrc":"15360:5:20","nodeType":"YulIdentifier","src":"15360:5:20"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"15450:5:20","nodeType":"YulIdentifier","src":"15450:5:20"},{"name":"length","nativeSrc":"15457:6:20","nodeType":"YulIdentifier","src":"15457:6:20"}],"functionName":{"name":"mstore","nativeSrc":"15443:6:20","nodeType":"YulIdentifier","src":"15443:6:20"},"nativeSrc":"15443:21:20","nodeType":"YulFunctionCall","src":"15443:21:20"},"nativeSrc":"15443:21:20","nodeType":"YulExpressionStatement","src":"15443:21:20"},{"nativeSrc":"15473:27:20","nodeType":"YulVariableDeclaration","src":"15473:27:20","value":{"arguments":[{"name":"array","nativeSrc":"15488:5:20","nodeType":"YulIdentifier","src":"15488:5:20"},{"kind":"number","nativeSrc":"15495:4:20","nodeType":"YulLiteral","src":"15495:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15484:3:20","nodeType":"YulIdentifier","src":"15484:3:20"},"nativeSrc":"15484:16:20","nodeType":"YulFunctionCall","src":"15484:16:20"},"variables":[{"name":"dst","nativeSrc":"15477:3:20","nodeType":"YulTypedName","src":"15477:3:20","type":""}]},{"body":{"nativeSrc":"15538:83:20","nodeType":"YulBlock","src":"15538:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"15540:77:20","nodeType":"YulIdentifier","src":"15540:77:20"},"nativeSrc":"15540:79:20","nodeType":"YulFunctionCall","src":"15540:79:20"},"nativeSrc":"15540:79:20","nodeType":"YulExpressionStatement","src":"15540:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"15519:3:20","nodeType":"YulIdentifier","src":"15519:3:20"},{"name":"length","nativeSrc":"15524:6:20","nodeType":"YulIdentifier","src":"15524:6:20"}],"functionName":{"name":"add","nativeSrc":"15515:3:20","nodeType":"YulIdentifier","src":"15515:3:20"},"nativeSrc":"15515:16:20","nodeType":"YulFunctionCall","src":"15515:16:20"},{"name":"end","nativeSrc":"15533:3:20","nodeType":"YulIdentifier","src":"15533:3:20"}],"functionName":{"name":"gt","nativeSrc":"15512:2:20","nodeType":"YulIdentifier","src":"15512:2:20"},"nativeSrc":"15512:25:20","nodeType":"YulFunctionCall","src":"15512:25:20"},"nativeSrc":"15509:112:20","nodeType":"YulIf","src":"15509:112:20"},{"expression":{"arguments":[{"name":"src","nativeSrc":"15667:3:20","nodeType":"YulIdentifier","src":"15667:3:20"},{"name":"dst","nativeSrc":"15672:3:20","nodeType":"YulIdentifier","src":"15672:3:20"},{"name":"length","nativeSrc":"15677:6:20","nodeType":"YulIdentifier","src":"15677:6:20"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"15630:36:20","nodeType":"YulIdentifier","src":"15630:36:20"},"nativeSrc":"15630:54:20","nodeType":"YulFunctionCall","src":"15630:54:20"},"nativeSrc":"15630:54:20","nodeType":"YulExpressionStatement","src":"15630:54:20"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"15267:423:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"15323:3:20","nodeType":"YulTypedName","src":"15323:3:20","type":""},{"name":"length","nativeSrc":"15328:6:20","nodeType":"YulTypedName","src":"15328:6:20","type":""},{"name":"end","nativeSrc":"15336:3:20","nodeType":"YulTypedName","src":"15336:3:20","type":""}],"returnVariables":[{"name":"array","nativeSrc":"15344:5:20","nodeType":"YulTypedName","src":"15344:5:20","type":""}],"src":"15267:423:20"},{"body":{"nativeSrc":"15770:277:20","nodeType":"YulBlock","src":"15770:277:20","statements":[{"body":{"nativeSrc":"15819:83:20","nodeType":"YulBlock","src":"15819:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"15821:77:20","nodeType":"YulIdentifier","src":"15821:77:20"},"nativeSrc":"15821:79:20","nodeType":"YulFunctionCall","src":"15821:79:20"},"nativeSrc":"15821:79:20","nodeType":"YulExpressionStatement","src":"15821:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"15798:6:20","nodeType":"YulIdentifier","src":"15798:6:20"},{"kind":"number","nativeSrc":"15806:4:20","nodeType":"YulLiteral","src":"15806:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"15794:3:20","nodeType":"YulIdentifier","src":"15794:3:20"},"nativeSrc":"15794:17:20","nodeType":"YulFunctionCall","src":"15794:17:20"},{"name":"end","nativeSrc":"15813:3:20","nodeType":"YulIdentifier","src":"15813:3:20"}],"functionName":{"name":"slt","nativeSrc":"15790:3:20","nodeType":"YulIdentifier","src":"15790:3:20"},"nativeSrc":"15790:27:20","nodeType":"YulFunctionCall","src":"15790:27:20"}],"functionName":{"name":"iszero","nativeSrc":"15783:6:20","nodeType":"YulIdentifier","src":"15783:6:20"},"nativeSrc":"15783:35:20","nodeType":"YulFunctionCall","src":"15783:35:20"},"nativeSrc":"15780:122:20","nodeType":"YulIf","src":"15780:122:20"},{"nativeSrc":"15911:34:20","nodeType":"YulVariableDeclaration","src":"15911:34:20","value":{"arguments":[{"name":"offset","nativeSrc":"15938:6:20","nodeType":"YulIdentifier","src":"15938:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"15925:12:20","nodeType":"YulIdentifier","src":"15925:12:20"},"nativeSrc":"15925:20:20","nodeType":"YulFunctionCall","src":"15925:20:20"},"variables":[{"name":"length","nativeSrc":"15915:6:20","nodeType":"YulTypedName","src":"15915:6:20","type":""}]},{"nativeSrc":"15954:87:20","nodeType":"YulAssignment","src":"15954:87:20","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"16014:6:20","nodeType":"YulIdentifier","src":"16014:6:20"},{"kind":"number","nativeSrc":"16022:4:20","nodeType":"YulLiteral","src":"16022:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16010:3:20","nodeType":"YulIdentifier","src":"16010:3:20"},"nativeSrc":"16010:17:20","nodeType":"YulFunctionCall","src":"16010:17:20"},{"name":"length","nativeSrc":"16029:6:20","nodeType":"YulIdentifier","src":"16029:6:20"},{"name":"end","nativeSrc":"16037:3:20","nodeType":"YulIdentifier","src":"16037:3:20"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"15963:46:20","nodeType":"YulIdentifier","src":"15963:46:20"},"nativeSrc":"15963:78:20","nodeType":"YulFunctionCall","src":"15963:78:20"},"variableNames":[{"name":"array","nativeSrc":"15954:5:20","nodeType":"YulIdentifier","src":"15954:5:20"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"15709:338:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"15748:6:20","nodeType":"YulTypedName","src":"15748:6:20","type":""},{"name":"end","nativeSrc":"15756:3:20","nodeType":"YulTypedName","src":"15756:3:20","type":""}],"returnVariables":[{"name":"array","nativeSrc":"15764:5:20","nodeType":"YulTypedName","src":"15764:5:20","type":""}],"src":"15709:338:20"},{"body":{"nativeSrc":"16179:817:20","nodeType":"YulBlock","src":"16179:817:20","statements":[{"body":{"nativeSrc":"16226:83:20","nodeType":"YulBlock","src":"16226:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"16228:77:20","nodeType":"YulIdentifier","src":"16228:77:20"},"nativeSrc":"16228:79:20","nodeType":"YulFunctionCall","src":"16228:79:20"},"nativeSrc":"16228:79:20","nodeType":"YulExpressionStatement","src":"16228:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"16200:7:20","nodeType":"YulIdentifier","src":"16200:7:20"},{"name":"headStart","nativeSrc":"16209:9:20","nodeType":"YulIdentifier","src":"16209:9:20"}],"functionName":{"name":"sub","nativeSrc":"16196:3:20","nodeType":"YulIdentifier","src":"16196:3:20"},"nativeSrc":"16196:23:20","nodeType":"YulFunctionCall","src":"16196:23:20"},{"kind":"number","nativeSrc":"16221:3:20","nodeType":"YulLiteral","src":"16221:3:20","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"16192:3:20","nodeType":"YulIdentifier","src":"16192:3:20"},"nativeSrc":"16192:33:20","nodeType":"YulFunctionCall","src":"16192:33:20"},"nativeSrc":"16189:120:20","nodeType":"YulIf","src":"16189:120:20"},{"nativeSrc":"16319:117:20","nodeType":"YulBlock","src":"16319:117:20","statements":[{"nativeSrc":"16334:15:20","nodeType":"YulVariableDeclaration","src":"16334:15:20","value":{"kind":"number","nativeSrc":"16348:1:20","nodeType":"YulLiteral","src":"16348:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"16338:6:20","nodeType":"YulTypedName","src":"16338:6:20","type":""}]},{"nativeSrc":"16363:63:20","nodeType":"YulAssignment","src":"16363:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16398:9:20","nodeType":"YulIdentifier","src":"16398:9:20"},{"name":"offset","nativeSrc":"16409:6:20","nodeType":"YulIdentifier","src":"16409:6:20"}],"functionName":{"name":"add","nativeSrc":"16394:3:20","nodeType":"YulIdentifier","src":"16394:3:20"},"nativeSrc":"16394:22:20","nodeType":"YulFunctionCall","src":"16394:22:20"},{"name":"dataEnd","nativeSrc":"16418:7:20","nodeType":"YulIdentifier","src":"16418:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"16373:20:20","nodeType":"YulIdentifier","src":"16373:20:20"},"nativeSrc":"16373:53:20","nodeType":"YulFunctionCall","src":"16373:53:20"},"variableNames":[{"name":"value0","nativeSrc":"16363:6:20","nodeType":"YulIdentifier","src":"16363:6:20"}]}]},{"nativeSrc":"16446:118:20","nodeType":"YulBlock","src":"16446:118:20","statements":[{"nativeSrc":"16461:16:20","nodeType":"YulVariableDeclaration","src":"16461:16:20","value":{"kind":"number","nativeSrc":"16475:2:20","nodeType":"YulLiteral","src":"16475:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"16465:6:20","nodeType":"YulTypedName","src":"16465:6:20","type":""}]},{"nativeSrc":"16491:63:20","nodeType":"YulAssignment","src":"16491:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16526:9:20","nodeType":"YulIdentifier","src":"16526:9:20"},{"name":"offset","nativeSrc":"16537:6:20","nodeType":"YulIdentifier","src":"16537:6:20"}],"functionName":{"name":"add","nativeSrc":"16522:3:20","nodeType":"YulIdentifier","src":"16522:3:20"},"nativeSrc":"16522:22:20","nodeType":"YulFunctionCall","src":"16522:22:20"},{"name":"dataEnd","nativeSrc":"16546:7:20","nodeType":"YulIdentifier","src":"16546:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"16501:20:20","nodeType":"YulIdentifier","src":"16501:20:20"},"nativeSrc":"16501:53:20","nodeType":"YulFunctionCall","src":"16501:53:20"},"variableNames":[{"name":"value1","nativeSrc":"16491:6:20","nodeType":"YulIdentifier","src":"16491:6:20"}]}]},{"nativeSrc":"16574:118:20","nodeType":"YulBlock","src":"16574:118:20","statements":[{"nativeSrc":"16589:16:20","nodeType":"YulVariableDeclaration","src":"16589:16:20","value":{"kind":"number","nativeSrc":"16603:2:20","nodeType":"YulLiteral","src":"16603:2:20","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"16593:6:20","nodeType":"YulTypedName","src":"16593:6:20","type":""}]},{"nativeSrc":"16619:63:20","nodeType":"YulAssignment","src":"16619:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16654:9:20","nodeType":"YulIdentifier","src":"16654:9:20"},{"name":"offset","nativeSrc":"16665:6:20","nodeType":"YulIdentifier","src":"16665:6:20"}],"functionName":{"name":"add","nativeSrc":"16650:3:20","nodeType":"YulIdentifier","src":"16650:3:20"},"nativeSrc":"16650:22:20","nodeType":"YulFunctionCall","src":"16650:22:20"},{"name":"dataEnd","nativeSrc":"16674:7:20","nodeType":"YulIdentifier","src":"16674:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"16629:20:20","nodeType":"YulIdentifier","src":"16629:20:20"},"nativeSrc":"16629:53:20","nodeType":"YulFunctionCall","src":"16629:53:20"},"variableNames":[{"name":"value2","nativeSrc":"16619:6:20","nodeType":"YulIdentifier","src":"16619:6:20"}]}]},{"nativeSrc":"16702:287:20","nodeType":"YulBlock","src":"16702:287:20","statements":[{"nativeSrc":"16717:46:20","nodeType":"YulVariableDeclaration","src":"16717:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16748:9:20","nodeType":"YulIdentifier","src":"16748:9:20"},{"kind":"number","nativeSrc":"16759:2:20","nodeType":"YulLiteral","src":"16759:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16744:3:20","nodeType":"YulIdentifier","src":"16744:3:20"},"nativeSrc":"16744:18:20","nodeType":"YulFunctionCall","src":"16744:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"16731:12:20","nodeType":"YulIdentifier","src":"16731:12:20"},"nativeSrc":"16731:32:20","nodeType":"YulFunctionCall","src":"16731:32:20"},"variables":[{"name":"offset","nativeSrc":"16721:6:20","nodeType":"YulTypedName","src":"16721:6:20","type":""}]},{"body":{"nativeSrc":"16810:83:20","nodeType":"YulBlock","src":"16810:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"16812:77:20","nodeType":"YulIdentifier","src":"16812:77:20"},"nativeSrc":"16812:79:20","nodeType":"YulFunctionCall","src":"16812:79:20"},"nativeSrc":"16812:79:20","nodeType":"YulExpressionStatement","src":"16812:79:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"16782:6:20","nodeType":"YulIdentifier","src":"16782:6:20"},{"kind":"number","nativeSrc":"16790:18:20","nodeType":"YulLiteral","src":"16790:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"16779:2:20","nodeType":"YulIdentifier","src":"16779:2:20"},"nativeSrc":"16779:30:20","nodeType":"YulFunctionCall","src":"16779:30:20"},"nativeSrc":"16776:117:20","nodeType":"YulIf","src":"16776:117:20"},{"nativeSrc":"16907:72:20","nodeType":"YulAssignment","src":"16907:72:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16951:9:20","nodeType":"YulIdentifier","src":"16951:9:20"},{"name":"offset","nativeSrc":"16962:6:20","nodeType":"YulIdentifier","src":"16962:6:20"}],"functionName":{"name":"add","nativeSrc":"16947:3:20","nodeType":"YulIdentifier","src":"16947:3:20"},"nativeSrc":"16947:22:20","nodeType":"YulFunctionCall","src":"16947:22:20"},{"name":"dataEnd","nativeSrc":"16971:7:20","nodeType":"YulIdentifier","src":"16971:7:20"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"16917:29:20","nodeType":"YulIdentifier","src":"16917:29:20"},"nativeSrc":"16917:62:20","nodeType":"YulFunctionCall","src":"16917:62:20"},"variableNames":[{"name":"value3","nativeSrc":"16907:6:20","nodeType":"YulIdentifier","src":"16907:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"16053:943:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16125:9:20","nodeType":"YulTypedName","src":"16125:9:20","type":""},{"name":"dataEnd","nativeSrc":"16136:7:20","nodeType":"YulTypedName","src":"16136:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"16148:6:20","nodeType":"YulTypedName","src":"16148:6:20","type":""},{"name":"value1","nativeSrc":"16156:6:20","nodeType":"YulTypedName","src":"16156:6:20","type":""},{"name":"value2","nativeSrc":"16164:6:20","nodeType":"YulTypedName","src":"16164:6:20","type":""},{"name":"value3","nativeSrc":"16172:6:20","nodeType":"YulTypedName","src":"16172:6:20","type":""}],"src":"16053:943:20"},{"body":{"nativeSrc":"17091:28:20","nodeType":"YulBlock","src":"17091:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17108:1:20","nodeType":"YulLiteral","src":"17108:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"17111:1:20","nodeType":"YulLiteral","src":"17111:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17101:6:20","nodeType":"YulIdentifier","src":"17101:6:20"},"nativeSrc":"17101:12:20","nodeType":"YulFunctionCall","src":"17101:12:20"},"nativeSrc":"17101:12:20","nodeType":"YulExpressionStatement","src":"17101:12:20"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"17002:117:20","nodeType":"YulFunctionDefinition","src":"17002:117:20"},{"body":{"nativeSrc":"17214:28:20","nodeType":"YulBlock","src":"17214:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17231:1:20","nodeType":"YulLiteral","src":"17231:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"17234:1:20","nodeType":"YulLiteral","src":"17234:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17224:6:20","nodeType":"YulIdentifier","src":"17224:6:20"},"nativeSrc":"17224:12:20","nodeType":"YulFunctionCall","src":"17224:12:20"},"nativeSrc":"17224:12:20","nodeType":"YulExpressionStatement","src":"17224:12:20"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"17125:117:20","nodeType":"YulFunctionDefinition","src":"17125:117:20"},{"body":{"nativeSrc":"17337:478:20","nodeType":"YulBlock","src":"17337:478:20","statements":[{"body":{"nativeSrc":"17386:83:20","nodeType":"YulBlock","src":"17386:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"17388:77:20","nodeType":"YulIdentifier","src":"17388:77:20"},"nativeSrc":"17388:79:20","nodeType":"YulFunctionCall","src":"17388:79:20"},"nativeSrc":"17388:79:20","nodeType":"YulExpressionStatement","src":"17388:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"17365:6:20","nodeType":"YulIdentifier","src":"17365:6:20"},{"kind":"number","nativeSrc":"17373:4:20","nodeType":"YulLiteral","src":"17373:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"17361:3:20","nodeType":"YulIdentifier","src":"17361:3:20"},"nativeSrc":"17361:17:20","nodeType":"YulFunctionCall","src":"17361:17:20"},{"name":"end","nativeSrc":"17380:3:20","nodeType":"YulIdentifier","src":"17380:3:20"}],"functionName":{"name":"slt","nativeSrc":"17357:3:20","nodeType":"YulIdentifier","src":"17357:3:20"},"nativeSrc":"17357:27:20","nodeType":"YulFunctionCall","src":"17357:27:20"}],"functionName":{"name":"iszero","nativeSrc":"17350:6:20","nodeType":"YulIdentifier","src":"17350:6:20"},"nativeSrc":"17350:35:20","nodeType":"YulFunctionCall","src":"17350:35:20"},"nativeSrc":"17347:122:20","nodeType":"YulIf","src":"17347:122:20"},{"nativeSrc":"17478:30:20","nodeType":"YulAssignment","src":"17478:30:20","value":{"arguments":[{"name":"offset","nativeSrc":"17501:6:20","nodeType":"YulIdentifier","src":"17501:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"17488:12:20","nodeType":"YulIdentifier","src":"17488:12:20"},"nativeSrc":"17488:20:20","nodeType":"YulFunctionCall","src":"17488:20:20"},"variableNames":[{"name":"length","nativeSrc":"17478:6:20","nodeType":"YulIdentifier","src":"17478:6:20"}]},{"body":{"nativeSrc":"17551:83:20","nodeType":"YulBlock","src":"17551:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"17553:77:20","nodeType":"YulIdentifier","src":"17553:77:20"},"nativeSrc":"17553:79:20","nodeType":"YulFunctionCall","src":"17553:79:20"},"nativeSrc":"17553:79:20","nodeType":"YulExpressionStatement","src":"17553:79:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"17523:6:20","nodeType":"YulIdentifier","src":"17523:6:20"},{"kind":"number","nativeSrc":"17531:18:20","nodeType":"YulLiteral","src":"17531:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"17520:2:20","nodeType":"YulIdentifier","src":"17520:2:20"},"nativeSrc":"17520:30:20","nodeType":"YulFunctionCall","src":"17520:30:20"},"nativeSrc":"17517:117:20","nodeType":"YulIf","src":"17517:117:20"},{"nativeSrc":"17643:29:20","nodeType":"YulAssignment","src":"17643:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"17659:6:20","nodeType":"YulIdentifier","src":"17659:6:20"},{"kind":"number","nativeSrc":"17667:4:20","nodeType":"YulLiteral","src":"17667:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"17655:3:20","nodeType":"YulIdentifier","src":"17655:3:20"},"nativeSrc":"17655:17:20","nodeType":"YulFunctionCall","src":"17655:17:20"},"variableNames":[{"name":"arrayPos","nativeSrc":"17643:8:20","nodeType":"YulIdentifier","src":"17643:8:20"}]},{"body":{"nativeSrc":"17726:83:20","nodeType":"YulBlock","src":"17726:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"17728:77:20","nodeType":"YulIdentifier","src":"17728:77:20"},"nativeSrc":"17728:79:20","nodeType":"YulFunctionCall","src":"17728:79:20"},"nativeSrc":"17728:79:20","nodeType":"YulExpressionStatement","src":"17728:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"17691:8:20","nodeType":"YulIdentifier","src":"17691:8:20"},{"arguments":[{"name":"length","nativeSrc":"17705:6:20","nodeType":"YulIdentifier","src":"17705:6:20"},{"kind":"number","nativeSrc":"17713:4:20","nodeType":"YulLiteral","src":"17713:4:20","type":"","value":"0x01"}],"functionName":{"name":"mul","nativeSrc":"17701:3:20","nodeType":"YulIdentifier","src":"17701:3:20"},"nativeSrc":"17701:17:20","nodeType":"YulFunctionCall","src":"17701:17:20"}],"functionName":{"name":"add","nativeSrc":"17687:3:20","nodeType":"YulIdentifier","src":"17687:3:20"},"nativeSrc":"17687:32:20","nodeType":"YulFunctionCall","src":"17687:32:20"},{"name":"end","nativeSrc":"17721:3:20","nodeType":"YulIdentifier","src":"17721:3:20"}],"functionName":{"name":"gt","nativeSrc":"17684:2:20","nodeType":"YulIdentifier","src":"17684:2:20"},"nativeSrc":"17684:41:20","nodeType":"YulFunctionCall","src":"17684:41:20"},"nativeSrc":"17681:128:20","nodeType":"YulIf","src":"17681:128:20"}]},"name":"abi_decode_t_string_calldata_ptr","nativeSrc":"17262:553:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"17304:6:20","nodeType":"YulTypedName","src":"17304:6:20","type":""},{"name":"end","nativeSrc":"17312:3:20","nodeType":"YulTypedName","src":"17312:3:20","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"17320:8:20","nodeType":"YulTypedName","src":"17320:8:20","type":""},{"name":"length","nativeSrc":"17330:6:20","nodeType":"YulTypedName","src":"17330:6:20","type":""}],"src":"17262:553:20"},{"body":{"nativeSrc":"17941:699:20","nodeType":"YulBlock","src":"17941:699:20","statements":[{"body":{"nativeSrc":"17987:83:20","nodeType":"YulBlock","src":"17987:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"17989:77:20","nodeType":"YulIdentifier","src":"17989:77:20"},"nativeSrc":"17989:79:20","nodeType":"YulFunctionCall","src":"17989:79:20"},"nativeSrc":"17989:79:20","nodeType":"YulExpressionStatement","src":"17989:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17962:7:20","nodeType":"YulIdentifier","src":"17962:7:20"},{"name":"headStart","nativeSrc":"17971:9:20","nodeType":"YulIdentifier","src":"17971:9:20"}],"functionName":{"name":"sub","nativeSrc":"17958:3:20","nodeType":"YulIdentifier","src":"17958:3:20"},"nativeSrc":"17958:23:20","nodeType":"YulFunctionCall","src":"17958:23:20"},{"kind":"number","nativeSrc":"17983:2:20","nodeType":"YulLiteral","src":"17983:2:20","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"17954:3:20","nodeType":"YulIdentifier","src":"17954:3:20"},"nativeSrc":"17954:32:20","nodeType":"YulFunctionCall","src":"17954:32:20"},"nativeSrc":"17951:119:20","nodeType":"YulIf","src":"17951:119:20"},{"nativeSrc":"18080:117:20","nodeType":"YulBlock","src":"18080:117:20","statements":[{"nativeSrc":"18095:15:20","nodeType":"YulVariableDeclaration","src":"18095:15:20","value":{"kind":"number","nativeSrc":"18109:1:20","nodeType":"YulLiteral","src":"18109:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"18099:6:20","nodeType":"YulTypedName","src":"18099:6:20","type":""}]},{"nativeSrc":"18124:63:20","nodeType":"YulAssignment","src":"18124:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18159:9:20","nodeType":"YulIdentifier","src":"18159:9:20"},{"name":"offset","nativeSrc":"18170:6:20","nodeType":"YulIdentifier","src":"18170:6:20"}],"functionName":{"name":"add","nativeSrc":"18155:3:20","nodeType":"YulIdentifier","src":"18155:3:20"},"nativeSrc":"18155:22:20","nodeType":"YulFunctionCall","src":"18155:22:20"},{"name":"dataEnd","nativeSrc":"18179:7:20","nodeType":"YulIdentifier","src":"18179:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"18134:20:20","nodeType":"YulIdentifier","src":"18134:20:20"},"nativeSrc":"18134:53:20","nodeType":"YulFunctionCall","src":"18134:53:20"},"variableNames":[{"name":"value0","nativeSrc":"18124:6:20","nodeType":"YulIdentifier","src":"18124:6:20"}]}]},{"nativeSrc":"18207:118:20","nodeType":"YulBlock","src":"18207:118:20","statements":[{"nativeSrc":"18222:16:20","nodeType":"YulVariableDeclaration","src":"18222:16:20","value":{"kind":"number","nativeSrc":"18236:2:20","nodeType":"YulLiteral","src":"18236:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"18226:6:20","nodeType":"YulTypedName","src":"18226:6:20","type":""}]},{"nativeSrc":"18252:63:20","nodeType":"YulAssignment","src":"18252:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18287:9:20","nodeType":"YulIdentifier","src":"18287:9:20"},{"name":"offset","nativeSrc":"18298:6:20","nodeType":"YulIdentifier","src":"18298:6:20"}],"functionName":{"name":"add","nativeSrc":"18283:3:20","nodeType":"YulIdentifier","src":"18283:3:20"},"nativeSrc":"18283:22:20","nodeType":"YulFunctionCall","src":"18283:22:20"},{"name":"dataEnd","nativeSrc":"18307:7:20","nodeType":"YulIdentifier","src":"18307:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"18262:20:20","nodeType":"YulIdentifier","src":"18262:20:20"},"nativeSrc":"18262:53:20","nodeType":"YulFunctionCall","src":"18262:53:20"},"variableNames":[{"name":"value1","nativeSrc":"18252:6:20","nodeType":"YulIdentifier","src":"18252:6:20"}]}]},{"nativeSrc":"18335:298:20","nodeType":"YulBlock","src":"18335:298:20","statements":[{"nativeSrc":"18350:46:20","nodeType":"YulVariableDeclaration","src":"18350:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18381:9:20","nodeType":"YulIdentifier","src":"18381:9:20"},{"kind":"number","nativeSrc":"18392:2:20","nodeType":"YulLiteral","src":"18392:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18377:3:20","nodeType":"YulIdentifier","src":"18377:3:20"},"nativeSrc":"18377:18:20","nodeType":"YulFunctionCall","src":"18377:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"18364:12:20","nodeType":"YulIdentifier","src":"18364:12:20"},"nativeSrc":"18364:32:20","nodeType":"YulFunctionCall","src":"18364:32:20"},"variables":[{"name":"offset","nativeSrc":"18354:6:20","nodeType":"YulTypedName","src":"18354:6:20","type":""}]},{"body":{"nativeSrc":"18443:83:20","nodeType":"YulBlock","src":"18443:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"18445:77:20","nodeType":"YulIdentifier","src":"18445:77:20"},"nativeSrc":"18445:79:20","nodeType":"YulFunctionCall","src":"18445:79:20"},"nativeSrc":"18445:79:20","nodeType":"YulExpressionStatement","src":"18445:79:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"18415:6:20","nodeType":"YulIdentifier","src":"18415:6:20"},{"kind":"number","nativeSrc":"18423:18:20","nodeType":"YulLiteral","src":"18423:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"18412:2:20","nodeType":"YulIdentifier","src":"18412:2:20"},"nativeSrc":"18412:30:20","nodeType":"YulFunctionCall","src":"18412:30:20"},"nativeSrc":"18409:117:20","nodeType":"YulIf","src":"18409:117:20"},{"nativeSrc":"18540:83:20","nodeType":"YulAssignment","src":"18540:83:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18595:9:20","nodeType":"YulIdentifier","src":"18595:9:20"},{"name":"offset","nativeSrc":"18606:6:20","nodeType":"YulIdentifier","src":"18606:6:20"}],"functionName":{"name":"add","nativeSrc":"18591:3:20","nodeType":"YulIdentifier","src":"18591:3:20"},"nativeSrc":"18591:22:20","nodeType":"YulFunctionCall","src":"18591:22:20"},{"name":"dataEnd","nativeSrc":"18615:7:20","nodeType":"YulIdentifier","src":"18615:7:20"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nativeSrc":"18558:32:20","nodeType":"YulIdentifier","src":"18558:32:20"},"nativeSrc":"18558:65:20","nodeType":"YulFunctionCall","src":"18558:65:20"},"variableNames":[{"name":"value2","nativeSrc":"18540:6:20","nodeType":"YulIdentifier","src":"18540:6:20"},{"name":"value3","nativeSrc":"18548:6:20","nodeType":"YulIdentifier","src":"18548:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr","nativeSrc":"17821:819:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17887:9:20","nodeType":"YulTypedName","src":"17887:9:20","type":""},{"name":"dataEnd","nativeSrc":"17898:7:20","nodeType":"YulTypedName","src":"17898:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17910:6:20","nodeType":"YulTypedName","src":"17910:6:20","type":""},{"name":"value1","nativeSrc":"17918:6:20","nodeType":"YulTypedName","src":"17918:6:20","type":""},{"name":"value2","nativeSrc":"17926:6:20","nodeType":"YulTypedName","src":"17926:6:20","type":""},{"name":"value3","nativeSrc":"17934:6:20","nodeType":"YulTypedName","src":"17934:6:20","type":""}],"src":"17821:819:20"},{"body":{"nativeSrc":"18729:391:20","nodeType":"YulBlock","src":"18729:391:20","statements":[{"body":{"nativeSrc":"18775:83:20","nodeType":"YulBlock","src":"18775:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"18777:77:20","nodeType":"YulIdentifier","src":"18777:77:20"},"nativeSrc":"18777:79:20","nodeType":"YulFunctionCall","src":"18777:79:20"},"nativeSrc":"18777:79:20","nodeType":"YulExpressionStatement","src":"18777:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"18750:7:20","nodeType":"YulIdentifier","src":"18750:7:20"},{"name":"headStart","nativeSrc":"18759:9:20","nodeType":"YulIdentifier","src":"18759:9:20"}],"functionName":{"name":"sub","nativeSrc":"18746:3:20","nodeType":"YulIdentifier","src":"18746:3:20"},"nativeSrc":"18746:23:20","nodeType":"YulFunctionCall","src":"18746:23:20"},{"kind":"number","nativeSrc":"18771:2:20","nodeType":"YulLiteral","src":"18771:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"18742:3:20","nodeType":"YulIdentifier","src":"18742:3:20"},"nativeSrc":"18742:32:20","nodeType":"YulFunctionCall","src":"18742:32:20"},"nativeSrc":"18739:119:20","nodeType":"YulIf","src":"18739:119:20"},{"nativeSrc":"18868:117:20","nodeType":"YulBlock","src":"18868:117:20","statements":[{"nativeSrc":"18883:15:20","nodeType":"YulVariableDeclaration","src":"18883:15:20","value":{"kind":"number","nativeSrc":"18897:1:20","nodeType":"YulLiteral","src":"18897:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"18887:6:20","nodeType":"YulTypedName","src":"18887:6:20","type":""}]},{"nativeSrc":"18912:63:20","nodeType":"YulAssignment","src":"18912:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18947:9:20","nodeType":"YulIdentifier","src":"18947:9:20"},{"name":"offset","nativeSrc":"18958:6:20","nodeType":"YulIdentifier","src":"18958:6:20"}],"functionName":{"name":"add","nativeSrc":"18943:3:20","nodeType":"YulIdentifier","src":"18943:3:20"},"nativeSrc":"18943:22:20","nodeType":"YulFunctionCall","src":"18943:22:20"},{"name":"dataEnd","nativeSrc":"18967:7:20","nodeType":"YulIdentifier","src":"18967:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"18922:20:20","nodeType":"YulIdentifier","src":"18922:20:20"},"nativeSrc":"18922:53:20","nodeType":"YulFunctionCall","src":"18922:53:20"},"variableNames":[{"name":"value0","nativeSrc":"18912:6:20","nodeType":"YulIdentifier","src":"18912:6:20"}]}]},{"nativeSrc":"18995:118:20","nodeType":"YulBlock","src":"18995:118:20","statements":[{"nativeSrc":"19010:16:20","nodeType":"YulVariableDeclaration","src":"19010:16:20","value":{"kind":"number","nativeSrc":"19024:2:20","nodeType":"YulLiteral","src":"19024:2:20","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"19014:6:20","nodeType":"YulTypedName","src":"19014:6:20","type":""}]},{"nativeSrc":"19040:63:20","nodeType":"YulAssignment","src":"19040:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19075:9:20","nodeType":"YulIdentifier","src":"19075:9:20"},{"name":"offset","nativeSrc":"19086:6:20","nodeType":"YulIdentifier","src":"19086:6:20"}],"functionName":{"name":"add","nativeSrc":"19071:3:20","nodeType":"YulIdentifier","src":"19071:3:20"},"nativeSrc":"19071:22:20","nodeType":"YulFunctionCall","src":"19071:22:20"},{"name":"dataEnd","nativeSrc":"19095:7:20","nodeType":"YulIdentifier","src":"19095:7:20"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"19050:20:20","nodeType":"YulIdentifier","src":"19050:20:20"},"nativeSrc":"19050:53:20","nodeType":"YulFunctionCall","src":"19050:53:20"},"variableNames":[{"name":"value1","nativeSrc":"19040:6:20","nodeType":"YulIdentifier","src":"19040:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"18646:474:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18691:9:20","nodeType":"YulTypedName","src":"18691:9:20","type":""},{"name":"dataEnd","nativeSrc":"18702:7:20","nodeType":"YulTypedName","src":"18702:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"18714:6:20","nodeType":"YulTypedName","src":"18714:6:20","type":""},{"name":"value1","nativeSrc":"18722:6:20","nodeType":"YulTypedName","src":"18722:6:20","type":""}],"src":"18646:474:20"},{"body":{"nativeSrc":"19154:152:20","nodeType":"YulBlock","src":"19154:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19171:1:20","nodeType":"YulLiteral","src":"19171:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"19174:77:20","nodeType":"YulLiteral","src":"19174:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"19164:6:20","nodeType":"YulIdentifier","src":"19164:6:20"},"nativeSrc":"19164:88:20","nodeType":"YulFunctionCall","src":"19164:88:20"},"nativeSrc":"19164:88:20","nodeType":"YulExpressionStatement","src":"19164:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19268:1:20","nodeType":"YulLiteral","src":"19268:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"19271:4:20","nodeType":"YulLiteral","src":"19271:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"19261:6:20","nodeType":"YulIdentifier","src":"19261:6:20"},"nativeSrc":"19261:15:20","nodeType":"YulFunctionCall","src":"19261:15:20"},"nativeSrc":"19261:15:20","nodeType":"YulExpressionStatement","src":"19261:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19292:1:20","nodeType":"YulLiteral","src":"19292:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"19295:4:20","nodeType":"YulLiteral","src":"19295:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"19285:6:20","nodeType":"YulIdentifier","src":"19285:6:20"},"nativeSrc":"19285:15:20","nodeType":"YulFunctionCall","src":"19285:15:20"},"nativeSrc":"19285:15:20","nodeType":"YulExpressionStatement","src":"19285:15:20"}]},"name":"panic_error_0x22","nativeSrc":"19126:180:20","nodeType":"YulFunctionDefinition","src":"19126:180:20"},{"body":{"nativeSrc":"19363:269:20","nodeType":"YulBlock","src":"19363:269:20","statements":[{"nativeSrc":"19373:22:20","nodeType":"YulAssignment","src":"19373:22:20","value":{"arguments":[{"name":"data","nativeSrc":"19387:4:20","nodeType":"YulIdentifier","src":"19387:4:20"},{"kind":"number","nativeSrc":"19393:1:20","nodeType":"YulLiteral","src":"19393:1:20","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"19383:3:20","nodeType":"YulIdentifier","src":"19383:3:20"},"nativeSrc":"19383:12:20","nodeType":"YulFunctionCall","src":"19383:12:20"},"variableNames":[{"name":"length","nativeSrc":"19373:6:20","nodeType":"YulIdentifier","src":"19373:6:20"}]},{"nativeSrc":"19404:38:20","nodeType":"YulVariableDeclaration","src":"19404:38:20","value":{"arguments":[{"name":"data","nativeSrc":"19434:4:20","nodeType":"YulIdentifier","src":"19434:4:20"},{"kind":"number","nativeSrc":"19440:1:20","nodeType":"YulLiteral","src":"19440:1:20","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"19430:3:20","nodeType":"YulIdentifier","src":"19430:3:20"},"nativeSrc":"19430:12:20","nodeType":"YulFunctionCall","src":"19430:12:20"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"19408:18:20","nodeType":"YulTypedName","src":"19408:18:20","type":""}]},{"body":{"nativeSrc":"19481:51:20","nodeType":"YulBlock","src":"19481:51:20","statements":[{"nativeSrc":"19495:27:20","nodeType":"YulAssignment","src":"19495:27:20","value":{"arguments":[{"name":"length","nativeSrc":"19509:6:20","nodeType":"YulIdentifier","src":"19509:6:20"},{"kind":"number","nativeSrc":"19517:4:20","nodeType":"YulLiteral","src":"19517:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"19505:3:20","nodeType":"YulIdentifier","src":"19505:3:20"},"nativeSrc":"19505:17:20","nodeType":"YulFunctionCall","src":"19505:17:20"},"variableNames":[{"name":"length","nativeSrc":"19495:6:20","nodeType":"YulIdentifier","src":"19495:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"19461:18:20","nodeType":"YulIdentifier","src":"19461:18:20"}],"functionName":{"name":"iszero","nativeSrc":"19454:6:20","nodeType":"YulIdentifier","src":"19454:6:20"},"nativeSrc":"19454:26:20","nodeType":"YulFunctionCall","src":"19454:26:20"},"nativeSrc":"19451:81:20","nodeType":"YulIf","src":"19451:81:20"},{"body":{"nativeSrc":"19584:42:20","nodeType":"YulBlock","src":"19584:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"19598:16:20","nodeType":"YulIdentifier","src":"19598:16:20"},"nativeSrc":"19598:18:20","nodeType":"YulFunctionCall","src":"19598:18:20"},"nativeSrc":"19598:18:20","nodeType":"YulExpressionStatement","src":"19598:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"19548:18:20","nodeType":"YulIdentifier","src":"19548:18:20"},{"arguments":[{"name":"length","nativeSrc":"19571:6:20","nodeType":"YulIdentifier","src":"19571:6:20"},{"kind":"number","nativeSrc":"19579:2:20","nodeType":"YulLiteral","src":"19579:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"19568:2:20","nodeType":"YulIdentifier","src":"19568:2:20"},"nativeSrc":"19568:14:20","nodeType":"YulFunctionCall","src":"19568:14:20"}],"functionName":{"name":"eq","nativeSrc":"19545:2:20","nodeType":"YulIdentifier","src":"19545:2:20"},"nativeSrc":"19545:38:20","nodeType":"YulFunctionCall","src":"19545:38:20"},"nativeSrc":"19542:84:20","nodeType":"YulIf","src":"19542:84:20"}]},"name":"extract_byte_array_length","nativeSrc":"19312:320:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"19347:4:20","nodeType":"YulTypedName","src":"19347:4:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"19356:6:20","nodeType":"YulTypedName","src":"19356:6:20","type":""}],"src":"19312:320:20"},{"body":{"nativeSrc":"19792:288:20","nodeType":"YulBlock","src":"19792:288:20","statements":[{"nativeSrc":"19802:26:20","nodeType":"YulAssignment","src":"19802:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"19814:9:20","nodeType":"YulIdentifier","src":"19814:9:20"},{"kind":"number","nativeSrc":"19825:2:20","nodeType":"YulLiteral","src":"19825:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19810:3:20","nodeType":"YulIdentifier","src":"19810:3:20"},"nativeSrc":"19810:18:20","nodeType":"YulFunctionCall","src":"19810:18:20"},"variableNames":[{"name":"tail","nativeSrc":"19802:4:20","nodeType":"YulIdentifier","src":"19802:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"19882:6:20","nodeType":"YulIdentifier","src":"19882:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"19895:9:20","nodeType":"YulIdentifier","src":"19895:9:20"},{"kind":"number","nativeSrc":"19906:1:20","nodeType":"YulLiteral","src":"19906:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19891:3:20","nodeType":"YulIdentifier","src":"19891:3:20"},"nativeSrc":"19891:17:20","nodeType":"YulFunctionCall","src":"19891:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"19838:43:20","nodeType":"YulIdentifier","src":"19838:43:20"},"nativeSrc":"19838:71:20","nodeType":"YulFunctionCall","src":"19838:71:20"},"nativeSrc":"19838:71:20","nodeType":"YulExpressionStatement","src":"19838:71:20"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"19963:6:20","nodeType":"YulIdentifier","src":"19963:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"19976:9:20","nodeType":"YulIdentifier","src":"19976:9:20"},{"kind":"number","nativeSrc":"19987:2:20","nodeType":"YulLiteral","src":"19987:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19972:3:20","nodeType":"YulIdentifier","src":"19972:3:20"},"nativeSrc":"19972:18:20","nodeType":"YulFunctionCall","src":"19972:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"19919:43:20","nodeType":"YulIdentifier","src":"19919:43:20"},"nativeSrc":"19919:72:20","nodeType":"YulFunctionCall","src":"19919:72:20"},"nativeSrc":"19919:72:20","nodeType":"YulExpressionStatement","src":"19919:72:20"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"20045:6:20","nodeType":"YulIdentifier","src":"20045:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"20058:9:20","nodeType":"YulIdentifier","src":"20058:9:20"},{"kind":"number","nativeSrc":"20069:2:20","nodeType":"YulLiteral","src":"20069:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20054:3:20","nodeType":"YulIdentifier","src":"20054:3:20"},"nativeSrc":"20054:18:20","nodeType":"YulFunctionCall","src":"20054:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"20001:43:20","nodeType":"YulIdentifier","src":"20001:43:20"},"nativeSrc":"20001:72:20","nodeType":"YulFunctionCall","src":"20001:72:20"},"nativeSrc":"20001:72:20","nodeType":"YulExpressionStatement","src":"20001:72:20"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nativeSrc":"19638:442:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19748:9:20","nodeType":"YulTypedName","src":"19748:9:20","type":""},{"name":"value2","nativeSrc":"19760:6:20","nodeType":"YulTypedName","src":"19760:6:20","type":""},{"name":"value1","nativeSrc":"19768:6:20","nodeType":"YulTypedName","src":"19768:6:20","type":""},{"name":"value0","nativeSrc":"19776:6:20","nodeType":"YulTypedName","src":"19776:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19787:4:20","nodeType":"YulTypedName","src":"19787:4:20","type":""}],"src":"19638:442:20"},{"body":{"nativeSrc":"20212:206:20","nodeType":"YulBlock","src":"20212:206:20","statements":[{"nativeSrc":"20222:26:20","nodeType":"YulAssignment","src":"20222:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"20234:9:20","nodeType":"YulIdentifier","src":"20234:9:20"},{"kind":"number","nativeSrc":"20245:2:20","nodeType":"YulLiteral","src":"20245:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20230:3:20","nodeType":"YulIdentifier","src":"20230:3:20"},"nativeSrc":"20230:18:20","nodeType":"YulFunctionCall","src":"20230:18:20"},"variableNames":[{"name":"tail","nativeSrc":"20222:4:20","nodeType":"YulIdentifier","src":"20222:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"20302:6:20","nodeType":"YulIdentifier","src":"20302:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"20315:9:20","nodeType":"YulIdentifier","src":"20315:9:20"},{"kind":"number","nativeSrc":"20326:1:20","nodeType":"YulLiteral","src":"20326:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"20311:3:20","nodeType":"YulIdentifier","src":"20311:3:20"},"nativeSrc":"20311:17:20","nodeType":"YulFunctionCall","src":"20311:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"20258:43:20","nodeType":"YulIdentifier","src":"20258:43:20"},"nativeSrc":"20258:71:20","nodeType":"YulFunctionCall","src":"20258:71:20"},"nativeSrc":"20258:71:20","nodeType":"YulExpressionStatement","src":"20258:71:20"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"20383:6:20","nodeType":"YulIdentifier","src":"20383:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"20396:9:20","nodeType":"YulIdentifier","src":"20396:9:20"},{"kind":"number","nativeSrc":"20407:2:20","nodeType":"YulLiteral","src":"20407:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20392:3:20","nodeType":"YulIdentifier","src":"20392:3:20"},"nativeSrc":"20392:18:20","nodeType":"YulFunctionCall","src":"20392:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"20339:43:20","nodeType":"YulIdentifier","src":"20339:43:20"},"nativeSrc":"20339:72:20","nodeType":"YulFunctionCall","src":"20339:72:20"},"nativeSrc":"20339:72:20","nodeType":"YulExpressionStatement","src":"20339:72:20"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"20086:332:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20176:9:20","nodeType":"YulTypedName","src":"20176:9:20","type":""},{"name":"value1","nativeSrc":"20188:6:20","nodeType":"YulTypedName","src":"20188:6:20","type":""},{"name":"value0","nativeSrc":"20196:6:20","nodeType":"YulTypedName","src":"20196:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20207:4:20","nodeType":"YulTypedName","src":"20207:4:20","type":""}],"src":"20086:332:20"},{"body":{"nativeSrc":"20487:80:20","nodeType":"YulBlock","src":"20487:80:20","statements":[{"nativeSrc":"20497:22:20","nodeType":"YulAssignment","src":"20497:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"20512:6:20","nodeType":"YulIdentifier","src":"20512:6:20"}],"functionName":{"name":"mload","nativeSrc":"20506:5:20","nodeType":"YulIdentifier","src":"20506:5:20"},"nativeSrc":"20506:13:20","nodeType":"YulFunctionCall","src":"20506:13:20"},"variableNames":[{"name":"value","nativeSrc":"20497:5:20","nodeType":"YulIdentifier","src":"20497:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"20555:5:20","nodeType":"YulIdentifier","src":"20555:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"20528:26:20","nodeType":"YulIdentifier","src":"20528:26:20"},"nativeSrc":"20528:33:20","nodeType":"YulFunctionCall","src":"20528:33:20"},"nativeSrc":"20528:33:20","nodeType":"YulExpressionStatement","src":"20528:33:20"}]},"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"20424:143:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"20465:6:20","nodeType":"YulTypedName","src":"20465:6:20","type":""},{"name":"end","nativeSrc":"20473:3:20","nodeType":"YulTypedName","src":"20473:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"20481:5:20","nodeType":"YulTypedName","src":"20481:5:20","type":""}],"src":"20424:143:20"},{"body":{"nativeSrc":"20650:274:20","nodeType":"YulBlock","src":"20650:274:20","statements":[{"body":{"nativeSrc":"20696:83:20","nodeType":"YulBlock","src":"20696:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"20698:77:20","nodeType":"YulIdentifier","src":"20698:77:20"},"nativeSrc":"20698:79:20","nodeType":"YulFunctionCall","src":"20698:79:20"},"nativeSrc":"20698:79:20","nodeType":"YulExpressionStatement","src":"20698:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"20671:7:20","nodeType":"YulIdentifier","src":"20671:7:20"},{"name":"headStart","nativeSrc":"20680:9:20","nodeType":"YulIdentifier","src":"20680:9:20"}],"functionName":{"name":"sub","nativeSrc":"20667:3:20","nodeType":"YulIdentifier","src":"20667:3:20"},"nativeSrc":"20667:23:20","nodeType":"YulFunctionCall","src":"20667:23:20"},{"kind":"number","nativeSrc":"20692:2:20","nodeType":"YulLiteral","src":"20692:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"20663:3:20","nodeType":"YulIdentifier","src":"20663:3:20"},"nativeSrc":"20663:32:20","nodeType":"YulFunctionCall","src":"20663:32:20"},"nativeSrc":"20660:119:20","nodeType":"YulIf","src":"20660:119:20"},{"nativeSrc":"20789:128:20","nodeType":"YulBlock","src":"20789:128:20","statements":[{"nativeSrc":"20804:15:20","nodeType":"YulVariableDeclaration","src":"20804:15:20","value":{"kind":"number","nativeSrc":"20818:1:20","nodeType":"YulLiteral","src":"20818:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"20808:6:20","nodeType":"YulTypedName","src":"20808:6:20","type":""}]},{"nativeSrc":"20833:74:20","nodeType":"YulAssignment","src":"20833:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20879:9:20","nodeType":"YulIdentifier","src":"20879:9:20"},{"name":"offset","nativeSrc":"20890:6:20","nodeType":"YulIdentifier","src":"20890:6:20"}],"functionName":{"name":"add","nativeSrc":"20875:3:20","nodeType":"YulIdentifier","src":"20875:3:20"},"nativeSrc":"20875:22:20","nodeType":"YulFunctionCall","src":"20875:22:20"},{"name":"dataEnd","nativeSrc":"20899:7:20","nodeType":"YulIdentifier","src":"20899:7:20"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"20843:31:20","nodeType":"YulIdentifier","src":"20843:31:20"},"nativeSrc":"20843:64:20","nodeType":"YulFunctionCall","src":"20843:64:20"},"variableNames":[{"name":"value0","nativeSrc":"20833:6:20","nodeType":"YulIdentifier","src":"20833:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"20573:351:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20620:9:20","nodeType":"YulTypedName","src":"20620:9:20","type":""},{"name":"dataEnd","nativeSrc":"20631:7:20","nodeType":"YulTypedName","src":"20631:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"20643:6:20","nodeType":"YulTypedName","src":"20643:6:20","type":""}],"src":"20573:351:20"},{"body":{"nativeSrc":"21044:34:20","nodeType":"YulBlock","src":"21044:34:20","statements":[{"nativeSrc":"21054:18:20","nodeType":"YulAssignment","src":"21054:18:20","value":{"name":"pos","nativeSrc":"21069:3:20","nodeType":"YulIdentifier","src":"21069:3:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"21054:11:20","nodeType":"YulIdentifier","src":"21054:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"20930:148:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21016:3:20","nodeType":"YulTypedName","src":"21016:3:20","type":""},{"name":"length","nativeSrc":"21021:6:20","nodeType":"YulTypedName","src":"21021:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"21032:11:20","nodeType":"YulTypedName","src":"21032:11:20","type":""}],"src":"20930:148:20"},{"body":{"nativeSrc":"21194:280:20","nodeType":"YulBlock","src":"21194:280:20","statements":[{"nativeSrc":"21204:53:20","nodeType":"YulVariableDeclaration","src":"21204:53:20","value":{"arguments":[{"name":"value","nativeSrc":"21251:5:20","nodeType":"YulIdentifier","src":"21251:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"21218:32:20","nodeType":"YulIdentifier","src":"21218:32:20"},"nativeSrc":"21218:39:20","nodeType":"YulFunctionCall","src":"21218:39:20"},"variables":[{"name":"length","nativeSrc":"21208:6:20","nodeType":"YulTypedName","src":"21208:6:20","type":""}]},{"nativeSrc":"21266:96:20","nodeType":"YulAssignment","src":"21266:96:20","value":{"arguments":[{"name":"pos","nativeSrc":"21350:3:20","nodeType":"YulIdentifier","src":"21350:3:20"},{"name":"length","nativeSrc":"21355:6:20","nodeType":"YulIdentifier","src":"21355:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21273:76:20","nodeType":"YulIdentifier","src":"21273:76:20"},"nativeSrc":"21273:89:20","nodeType":"YulFunctionCall","src":"21273:89:20"},"variableNames":[{"name":"pos","nativeSrc":"21266:3:20","nodeType":"YulIdentifier","src":"21266:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21410:5:20","nodeType":"YulIdentifier","src":"21410:5:20"},{"kind":"number","nativeSrc":"21417:4:20","nodeType":"YulLiteral","src":"21417:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21406:3:20","nodeType":"YulIdentifier","src":"21406:3:20"},"nativeSrc":"21406:16:20","nodeType":"YulFunctionCall","src":"21406:16:20"},{"name":"pos","nativeSrc":"21424:3:20","nodeType":"YulIdentifier","src":"21424:3:20"},{"name":"length","nativeSrc":"21429:6:20","nodeType":"YulIdentifier","src":"21429:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21371:34:20","nodeType":"YulIdentifier","src":"21371:34:20"},"nativeSrc":"21371:65:20","nodeType":"YulFunctionCall","src":"21371:65:20"},"nativeSrc":"21371:65:20","nodeType":"YulExpressionStatement","src":"21371:65:20"},{"nativeSrc":"21445:23:20","nodeType":"YulAssignment","src":"21445:23:20","value":{"arguments":[{"name":"pos","nativeSrc":"21456:3:20","nodeType":"YulIdentifier","src":"21456:3:20"},{"name":"length","nativeSrc":"21461:6:20","nodeType":"YulIdentifier","src":"21461:6:20"}],"functionName":{"name":"add","nativeSrc":"21452:3:20","nodeType":"YulIdentifier","src":"21452:3:20"},"nativeSrc":"21452:16:20","nodeType":"YulFunctionCall","src":"21452:16:20"},"variableNames":[{"name":"end","nativeSrc":"21445:3:20","nodeType":"YulIdentifier","src":"21445:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21084:390:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21175:5:20","nodeType":"YulTypedName","src":"21175:5:20","type":""},{"name":"pos","nativeSrc":"21182:3:20","nodeType":"YulTypedName","src":"21182:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21190:3:20","nodeType":"YulTypedName","src":"21190:3:20","type":""}],"src":"21084:390:20"},{"body":{"nativeSrc":"21664:251:20","nodeType":"YulBlock","src":"21664:251:20","statements":[{"nativeSrc":"21675:102:20","nodeType":"YulAssignment","src":"21675:102:20","value":{"arguments":[{"name":"value0","nativeSrc":"21764:6:20","nodeType":"YulIdentifier","src":"21764:6:20"},{"name":"pos","nativeSrc":"21773:3:20","nodeType":"YulIdentifier","src":"21773:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21682:81:20","nodeType":"YulIdentifier","src":"21682:81:20"},"nativeSrc":"21682:95:20","nodeType":"YulFunctionCall","src":"21682:95:20"},"variableNames":[{"name":"pos","nativeSrc":"21675:3:20","nodeType":"YulIdentifier","src":"21675:3:20"}]},{"nativeSrc":"21787:102:20","nodeType":"YulAssignment","src":"21787:102:20","value":{"arguments":[{"name":"value1","nativeSrc":"21876:6:20","nodeType":"YulIdentifier","src":"21876:6:20"},{"name":"pos","nativeSrc":"21885:3:20","nodeType":"YulIdentifier","src":"21885:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21794:81:20","nodeType":"YulIdentifier","src":"21794:81:20"},"nativeSrc":"21794:95:20","nodeType":"YulFunctionCall","src":"21794:95:20"},"variableNames":[{"name":"pos","nativeSrc":"21787:3:20","nodeType":"YulIdentifier","src":"21787:3:20"}]},{"nativeSrc":"21899:10:20","nodeType":"YulAssignment","src":"21899:10:20","value":{"name":"pos","nativeSrc":"21906:3:20","nodeType":"YulIdentifier","src":"21906:3:20"},"variableNames":[{"name":"end","nativeSrc":"21899:3:20","nodeType":"YulIdentifier","src":"21899:3:20"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"21480:435:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21635:3:20","nodeType":"YulTypedName","src":"21635:3:20","type":""},{"name":"value1","nativeSrc":"21641:6:20","nodeType":"YulTypedName","src":"21641:6:20","type":""},{"name":"value0","nativeSrc":"21649:6:20","nodeType":"YulTypedName","src":"21649:6:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21660:3:20","nodeType":"YulTypedName","src":"21660:3:20","type":""}],"src":"21480:435:20"},{"body":{"nativeSrc":"21949:152:20","nodeType":"YulBlock","src":"21949:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"21966:1:20","nodeType":"YulLiteral","src":"21966:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"21969:77:20","nodeType":"YulLiteral","src":"21969:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"21959:6:20","nodeType":"YulIdentifier","src":"21959:6:20"},"nativeSrc":"21959:88:20","nodeType":"YulFunctionCall","src":"21959:88:20"},"nativeSrc":"21959:88:20","nodeType":"YulExpressionStatement","src":"21959:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22063:1:20","nodeType":"YulLiteral","src":"22063:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"22066:4:20","nodeType":"YulLiteral","src":"22066:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"22056:6:20","nodeType":"YulIdentifier","src":"22056:6:20"},"nativeSrc":"22056:15:20","nodeType":"YulFunctionCall","src":"22056:15:20"},"nativeSrc":"22056:15:20","nodeType":"YulExpressionStatement","src":"22056:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22087:1:20","nodeType":"YulLiteral","src":"22087:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"22090:4:20","nodeType":"YulLiteral","src":"22090:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"22080:6:20","nodeType":"YulIdentifier","src":"22080:6:20"},"nativeSrc":"22080:15:20","nodeType":"YulFunctionCall","src":"22080:15:20"},"nativeSrc":"22080:15:20","nodeType":"YulExpressionStatement","src":"22080:15:20"}]},"name":"panic_error_0x11","nativeSrc":"21921:180:20","nodeType":"YulFunctionDefinition","src":"21921:180:20"},{"body":{"nativeSrc":"22151:147:20","nodeType":"YulBlock","src":"22151:147:20","statements":[{"nativeSrc":"22161:25:20","nodeType":"YulAssignment","src":"22161:25:20","value":{"arguments":[{"name":"x","nativeSrc":"22184:1:20","nodeType":"YulIdentifier","src":"22184:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"22166:17:20","nodeType":"YulIdentifier","src":"22166:17:20"},"nativeSrc":"22166:20:20","nodeType":"YulFunctionCall","src":"22166:20:20"},"variableNames":[{"name":"x","nativeSrc":"22161:1:20","nodeType":"YulIdentifier","src":"22161:1:20"}]},{"nativeSrc":"22195:25:20","nodeType":"YulAssignment","src":"22195:25:20","value":{"arguments":[{"name":"y","nativeSrc":"22218:1:20","nodeType":"YulIdentifier","src":"22218:1:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"22200:17:20","nodeType":"YulIdentifier","src":"22200:17:20"},"nativeSrc":"22200:20:20","nodeType":"YulFunctionCall","src":"22200:20:20"},"variableNames":[{"name":"y","nativeSrc":"22195:1:20","nodeType":"YulIdentifier","src":"22195:1:20"}]},{"nativeSrc":"22229:16:20","nodeType":"YulAssignment","src":"22229:16:20","value":{"arguments":[{"name":"x","nativeSrc":"22240:1:20","nodeType":"YulIdentifier","src":"22240:1:20"},{"name":"y","nativeSrc":"22243:1:20","nodeType":"YulIdentifier","src":"22243:1:20"}],"functionName":{"name":"add","nativeSrc":"22236:3:20","nodeType":"YulIdentifier","src":"22236:3:20"},"nativeSrc":"22236:9:20","nodeType":"YulFunctionCall","src":"22236:9:20"},"variableNames":[{"name":"sum","nativeSrc":"22229:3:20","nodeType":"YulIdentifier","src":"22229:3:20"}]},{"body":{"nativeSrc":"22269:22:20","nodeType":"YulBlock","src":"22269:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"22271:16:20","nodeType":"YulIdentifier","src":"22271:16:20"},"nativeSrc":"22271:18:20","nodeType":"YulFunctionCall","src":"22271:18:20"},"nativeSrc":"22271:18:20","nodeType":"YulExpressionStatement","src":"22271:18:20"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"22261:1:20","nodeType":"YulIdentifier","src":"22261:1:20"},{"name":"sum","nativeSrc":"22264:3:20","nodeType":"YulIdentifier","src":"22264:3:20"}],"functionName":{"name":"gt","nativeSrc":"22258:2:20","nodeType":"YulIdentifier","src":"22258:2:20"},"nativeSrc":"22258:10:20","nodeType":"YulFunctionCall","src":"22258:10:20"},"nativeSrc":"22255:36:20","nodeType":"YulIf","src":"22255:36:20"}]},"name":"checked_add_t_uint256","nativeSrc":"22107:191:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"22138:1:20","nodeType":"YulTypedName","src":"22138:1:20","type":""},{"name":"y","nativeSrc":"22141:1:20","nodeType":"YulTypedName","src":"22141:1:20","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"22147:3:20","nodeType":"YulTypedName","src":"22147:3:20","type":""}],"src":"22107:191:20"},{"body":{"nativeSrc":"22358:87:20","nodeType":"YulBlock","src":"22358:87:20","statements":[{"nativeSrc":"22368:11:20","nodeType":"YulAssignment","src":"22368:11:20","value":{"name":"ptr","nativeSrc":"22376:3:20","nodeType":"YulIdentifier","src":"22376:3:20"},"variableNames":[{"name":"data","nativeSrc":"22368:4:20","nodeType":"YulIdentifier","src":"22368:4:20"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"22396:1:20","nodeType":"YulLiteral","src":"22396:1:20","type":"","value":"0"},{"name":"ptr","nativeSrc":"22399:3:20","nodeType":"YulIdentifier","src":"22399:3:20"}],"functionName":{"name":"mstore","nativeSrc":"22389:6:20","nodeType":"YulIdentifier","src":"22389:6:20"},"nativeSrc":"22389:14:20","nodeType":"YulFunctionCall","src":"22389:14:20"},"nativeSrc":"22389:14:20","nodeType":"YulExpressionStatement","src":"22389:14:20"},{"nativeSrc":"22412:26:20","nodeType":"YulAssignment","src":"22412:26:20","value":{"arguments":[{"kind":"number","nativeSrc":"22430:1:20","nodeType":"YulLiteral","src":"22430:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"22433:4:20","nodeType":"YulLiteral","src":"22433:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"22420:9:20","nodeType":"YulIdentifier","src":"22420:9:20"},"nativeSrc":"22420:18:20","nodeType":"YulFunctionCall","src":"22420:18:20"},"variableNames":[{"name":"data","nativeSrc":"22412:4:20","nodeType":"YulIdentifier","src":"22412:4:20"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"22304:141:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"22345:3:20","nodeType":"YulTypedName","src":"22345:3:20","type":""}],"returnVariables":[{"name":"data","nativeSrc":"22353:4:20","nodeType":"YulTypedName","src":"22353:4:20","type":""}],"src":"22304:141:20"},{"body":{"nativeSrc":"22495:49:20","nodeType":"YulBlock","src":"22495:49:20","statements":[{"nativeSrc":"22505:33:20","nodeType":"YulAssignment","src":"22505:33:20","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"22523:5:20","nodeType":"YulIdentifier","src":"22523:5:20"},{"kind":"number","nativeSrc":"22530:2:20","nodeType":"YulLiteral","src":"22530:2:20","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"22519:3:20","nodeType":"YulIdentifier","src":"22519:3:20"},"nativeSrc":"22519:14:20","nodeType":"YulFunctionCall","src":"22519:14:20"},{"kind":"number","nativeSrc":"22535:2:20","nodeType":"YulLiteral","src":"22535:2:20","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"22515:3:20","nodeType":"YulIdentifier","src":"22515:3:20"},"nativeSrc":"22515:23:20","nodeType":"YulFunctionCall","src":"22515:23:20"},"variableNames":[{"name":"result","nativeSrc":"22505:6:20","nodeType":"YulIdentifier","src":"22505:6:20"}]}]},"name":"divide_by_32_ceil","nativeSrc":"22451:93:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"22478:5:20","nodeType":"YulTypedName","src":"22478:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"22488:6:20","nodeType":"YulTypedName","src":"22488:6:20","type":""}],"src":"22451:93:20"},{"body":{"nativeSrc":"22603:54:20","nodeType":"YulBlock","src":"22603:54:20","statements":[{"nativeSrc":"22613:37:20","nodeType":"YulAssignment","src":"22613:37:20","value":{"arguments":[{"name":"bits","nativeSrc":"22638:4:20","nodeType":"YulIdentifier","src":"22638:4:20"},{"name":"value","nativeSrc":"22644:5:20","nodeType":"YulIdentifier","src":"22644:5:20"}],"functionName":{"name":"shl","nativeSrc":"22634:3:20","nodeType":"YulIdentifier","src":"22634:3:20"},"nativeSrc":"22634:16:20","nodeType":"YulFunctionCall","src":"22634:16:20"},"variableNames":[{"name":"newValue","nativeSrc":"22613:8:20","nodeType":"YulIdentifier","src":"22613:8:20"}]}]},"name":"shift_left_dynamic","nativeSrc":"22550:107:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"22578:4:20","nodeType":"YulTypedName","src":"22578:4:20","type":""},{"name":"value","nativeSrc":"22584:5:20","nodeType":"YulTypedName","src":"22584:5:20","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"22594:8:20","nodeType":"YulTypedName","src":"22594:8:20","type":""}],"src":"22550:107:20"},{"body":{"nativeSrc":"22739:317:20","nodeType":"YulBlock","src":"22739:317:20","statements":[{"nativeSrc":"22749:35:20","nodeType":"YulVariableDeclaration","src":"22749:35:20","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"22770:10:20","nodeType":"YulIdentifier","src":"22770:10:20"},{"kind":"number","nativeSrc":"22782:1:20","nodeType":"YulLiteral","src":"22782:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"22766:3:20","nodeType":"YulIdentifier","src":"22766:3:20"},"nativeSrc":"22766:18:20","nodeType":"YulFunctionCall","src":"22766:18:20"},"variables":[{"name":"shiftBits","nativeSrc":"22753:9:20","nodeType":"YulTypedName","src":"22753:9:20","type":""}]},{"nativeSrc":"22793:109:20","nodeType":"YulVariableDeclaration","src":"22793:109:20","value":{"arguments":[{"name":"shiftBits","nativeSrc":"22824:9:20","nodeType":"YulIdentifier","src":"22824:9:20"},{"kind":"number","nativeSrc":"22835:66:20","nodeType":"YulLiteral","src":"22835:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"22805:18:20","nodeType":"YulIdentifier","src":"22805:18:20"},"nativeSrc":"22805:97:20","nodeType":"YulFunctionCall","src":"22805:97:20"},"variables":[{"name":"mask","nativeSrc":"22797:4:20","nodeType":"YulTypedName","src":"22797:4:20","type":""}]},{"nativeSrc":"22911:51:20","nodeType":"YulAssignment","src":"22911:51:20","value":{"arguments":[{"name":"shiftBits","nativeSrc":"22942:9:20","nodeType":"YulIdentifier","src":"22942:9:20"},{"name":"toInsert","nativeSrc":"22953:8:20","nodeType":"YulIdentifier","src":"22953:8:20"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"22923:18:20","nodeType":"YulIdentifier","src":"22923:18:20"},"nativeSrc":"22923:39:20","nodeType":"YulFunctionCall","src":"22923:39:20"},"variableNames":[{"name":"toInsert","nativeSrc":"22911:8:20","nodeType":"YulIdentifier","src":"22911:8:20"}]},{"nativeSrc":"22971:30:20","nodeType":"YulAssignment","src":"22971:30:20","value":{"arguments":[{"name":"value","nativeSrc":"22984:5:20","nodeType":"YulIdentifier","src":"22984:5:20"},{"arguments":[{"name":"mask","nativeSrc":"22995:4:20","nodeType":"YulIdentifier","src":"22995:4:20"}],"functionName":{"name":"not","nativeSrc":"22991:3:20","nodeType":"YulIdentifier","src":"22991:3:20"},"nativeSrc":"22991:9:20","nodeType":"YulFunctionCall","src":"22991:9:20"}],"functionName":{"name":"and","nativeSrc":"22980:3:20","nodeType":"YulIdentifier","src":"22980:3:20"},"nativeSrc":"22980:21:20","nodeType":"YulFunctionCall","src":"22980:21:20"},"variableNames":[{"name":"value","nativeSrc":"22971:5:20","nodeType":"YulIdentifier","src":"22971:5:20"}]},{"nativeSrc":"23010:40:20","nodeType":"YulAssignment","src":"23010:40:20","value":{"arguments":[{"name":"value","nativeSrc":"23023:5:20","nodeType":"YulIdentifier","src":"23023:5:20"},{"arguments":[{"name":"toInsert","nativeSrc":"23034:8:20","nodeType":"YulIdentifier","src":"23034:8:20"},{"name":"mask","nativeSrc":"23044:4:20","nodeType":"YulIdentifier","src":"23044:4:20"}],"functionName":{"name":"and","nativeSrc":"23030:3:20","nodeType":"YulIdentifier","src":"23030:3:20"},"nativeSrc":"23030:19:20","nodeType":"YulFunctionCall","src":"23030:19:20"}],"functionName":{"name":"or","nativeSrc":"23020:2:20","nodeType":"YulIdentifier","src":"23020:2:20"},"nativeSrc":"23020:30:20","nodeType":"YulFunctionCall","src":"23020:30:20"},"variableNames":[{"name":"result","nativeSrc":"23010:6:20","nodeType":"YulIdentifier","src":"23010:6:20"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"22663:393:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"22700:5:20","nodeType":"YulTypedName","src":"22700:5:20","type":""},{"name":"shiftBytes","nativeSrc":"22707:10:20","nodeType":"YulTypedName","src":"22707:10:20","type":""},{"name":"toInsert","nativeSrc":"22719:8:20","nodeType":"YulTypedName","src":"22719:8:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"22732:6:20","nodeType":"YulTypedName","src":"22732:6:20","type":""}],"src":"22663:393:20"},{"body":{"nativeSrc":"23122:82:20","nodeType":"YulBlock","src":"23122:82:20","statements":[{"nativeSrc":"23132:66:20","nodeType":"YulAssignment","src":"23132:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"23190:5:20","nodeType":"YulIdentifier","src":"23190:5:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"23172:17:20","nodeType":"YulIdentifier","src":"23172:17:20"},"nativeSrc":"23172:24:20","nodeType":"YulFunctionCall","src":"23172:24:20"}],"functionName":{"name":"identity","nativeSrc":"23163:8:20","nodeType":"YulIdentifier","src":"23163:8:20"},"nativeSrc":"23163:34:20","nodeType":"YulFunctionCall","src":"23163:34:20"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"23145:17:20","nodeType":"YulIdentifier","src":"23145:17:20"},"nativeSrc":"23145:53:20","nodeType":"YulFunctionCall","src":"23145:53:20"},"variableNames":[{"name":"converted","nativeSrc":"23132:9:20","nodeType":"YulIdentifier","src":"23132:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"23062:142:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"23102:5:20","nodeType":"YulTypedName","src":"23102:5:20","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"23112:9:20","nodeType":"YulTypedName","src":"23112:9:20","type":""}],"src":"23062:142:20"},{"body":{"nativeSrc":"23257:28:20","nodeType":"YulBlock","src":"23257:28:20","statements":[{"nativeSrc":"23267:12:20","nodeType":"YulAssignment","src":"23267:12:20","value":{"name":"value","nativeSrc":"23274:5:20","nodeType":"YulIdentifier","src":"23274:5:20"},"variableNames":[{"name":"ret","nativeSrc":"23267:3:20","nodeType":"YulIdentifier","src":"23267:3:20"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"23210:75:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"23243:5:20","nodeType":"YulTypedName","src":"23243:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"23253:3:20","nodeType":"YulTypedName","src":"23253:3:20","type":""}],"src":"23210:75:20"},{"body":{"nativeSrc":"23367:193:20","nodeType":"YulBlock","src":"23367:193:20","statements":[{"nativeSrc":"23377:63:20","nodeType":"YulVariableDeclaration","src":"23377:63:20","value":{"arguments":[{"name":"value_0","nativeSrc":"23432:7:20","nodeType":"YulIdentifier","src":"23432:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"23401:30:20","nodeType":"YulIdentifier","src":"23401:30:20"},"nativeSrc":"23401:39:20","nodeType":"YulFunctionCall","src":"23401:39:20"},"variables":[{"name":"convertedValue_0","nativeSrc":"23381:16:20","nodeType":"YulTypedName","src":"23381:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"23456:4:20","nodeType":"YulIdentifier","src":"23456:4:20"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"23496:4:20","nodeType":"YulIdentifier","src":"23496:4:20"}],"functionName":{"name":"sload","nativeSrc":"23490:5:20","nodeType":"YulIdentifier","src":"23490:5:20"},"nativeSrc":"23490:11:20","nodeType":"YulFunctionCall","src":"23490:11:20"},{"name":"offset","nativeSrc":"23503:6:20","nodeType":"YulIdentifier","src":"23503:6:20"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"23535:16:20","nodeType":"YulIdentifier","src":"23535:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"23511:23:20","nodeType":"YulIdentifier","src":"23511:23:20"},"nativeSrc":"23511:41:20","nodeType":"YulFunctionCall","src":"23511:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"23462:27:20","nodeType":"YulIdentifier","src":"23462:27:20"},"nativeSrc":"23462:91:20","nodeType":"YulFunctionCall","src":"23462:91:20"}],"functionName":{"name":"sstore","nativeSrc":"23449:6:20","nodeType":"YulIdentifier","src":"23449:6:20"},"nativeSrc":"23449:105:20","nodeType":"YulFunctionCall","src":"23449:105:20"},"nativeSrc":"23449:105:20","nodeType":"YulExpressionStatement","src":"23449:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"23291:269:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"23344:4:20","nodeType":"YulTypedName","src":"23344:4:20","type":""},{"name":"offset","nativeSrc":"23350:6:20","nodeType":"YulTypedName","src":"23350:6:20","type":""},{"name":"value_0","nativeSrc":"23358:7:20","nodeType":"YulTypedName","src":"23358:7:20","type":""}],"src":"23291:269:20"},{"body":{"nativeSrc":"23615:24:20","nodeType":"YulBlock","src":"23615:24:20","statements":[{"nativeSrc":"23625:8:20","nodeType":"YulAssignment","src":"23625:8:20","value":{"kind":"number","nativeSrc":"23632:1:20","nodeType":"YulLiteral","src":"23632:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"23625:3:20","nodeType":"YulIdentifier","src":"23625:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"23566:73:20","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"23611:3:20","nodeType":"YulTypedName","src":"23611:3:20","type":""}],"src":"23566:73:20"},{"body":{"nativeSrc":"23698:136:20","nodeType":"YulBlock","src":"23698:136:20","statements":[{"nativeSrc":"23708:46:20","nodeType":"YulVariableDeclaration","src":"23708:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"23722:30:20","nodeType":"YulIdentifier","src":"23722:30:20"},"nativeSrc":"23722:32:20","nodeType":"YulFunctionCall","src":"23722:32:20"},"variables":[{"name":"zero_0","nativeSrc":"23712:6:20","nodeType":"YulTypedName","src":"23712:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"23807:4:20","nodeType":"YulIdentifier","src":"23807:4:20"},{"name":"offset","nativeSrc":"23813:6:20","nodeType":"YulIdentifier","src":"23813:6:20"},{"name":"zero_0","nativeSrc":"23821:6:20","nodeType":"YulIdentifier","src":"23821:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"23763:43:20","nodeType":"YulIdentifier","src":"23763:43:20"},"nativeSrc":"23763:65:20","nodeType":"YulFunctionCall","src":"23763:65:20"},"nativeSrc":"23763:65:20","nodeType":"YulExpressionStatement","src":"23763:65:20"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"23645:189:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"23684:4:20","nodeType":"YulTypedName","src":"23684:4:20","type":""},{"name":"offset","nativeSrc":"23690:6:20","nodeType":"YulTypedName","src":"23690:6:20","type":""}],"src":"23645:189:20"},{"body":{"nativeSrc":"23890:136:20","nodeType":"YulBlock","src":"23890:136:20","statements":[{"body":{"nativeSrc":"23957:63:20","nodeType":"YulBlock","src":"23957:63:20","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"24001:5:20","nodeType":"YulIdentifier","src":"24001:5:20"},{"kind":"number","nativeSrc":"24008:1:20","nodeType":"YulLiteral","src":"24008:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"23971:29:20","nodeType":"YulIdentifier","src":"23971:29:20"},"nativeSrc":"23971:39:20","nodeType":"YulFunctionCall","src":"23971:39:20"},"nativeSrc":"23971:39:20","nodeType":"YulExpressionStatement","src":"23971:39:20"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"23910:5:20","nodeType":"YulIdentifier","src":"23910:5:20"},{"name":"end","nativeSrc":"23917:3:20","nodeType":"YulIdentifier","src":"23917:3:20"}],"functionName":{"name":"lt","nativeSrc":"23907:2:20","nodeType":"YulIdentifier","src":"23907:2:20"},"nativeSrc":"23907:14:20","nodeType":"YulFunctionCall","src":"23907:14:20"},"nativeSrc":"23900:120:20","nodeType":"YulForLoop","post":{"nativeSrc":"23922:26:20","nodeType":"YulBlock","src":"23922:26:20","statements":[{"nativeSrc":"23924:22:20","nodeType":"YulAssignment","src":"23924:22:20","value":{"arguments":[{"name":"start","nativeSrc":"23937:5:20","nodeType":"YulIdentifier","src":"23937:5:20"},{"kind":"number","nativeSrc":"23944:1:20","nodeType":"YulLiteral","src":"23944:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"23933:3:20","nodeType":"YulIdentifier","src":"23933:3:20"},"nativeSrc":"23933:13:20","nodeType":"YulFunctionCall","src":"23933:13:20"},"variableNames":[{"name":"start","nativeSrc":"23924:5:20","nodeType":"YulIdentifier","src":"23924:5:20"}]}]},"pre":{"nativeSrc":"23904:2:20","nodeType":"YulBlock","src":"23904:2:20","statements":[]},"src":"23900:120:20"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"23840:186:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"23878:5:20","nodeType":"YulTypedName","src":"23878:5:20","type":""},{"name":"end","nativeSrc":"23885:3:20","nodeType":"YulTypedName","src":"23885:3:20","type":""}],"src":"23840:186:20"},{"body":{"nativeSrc":"24111:464:20","nodeType":"YulBlock","src":"24111:464:20","statements":[{"body":{"nativeSrc":"24137:431:20","nodeType":"YulBlock","src":"24137:431:20","statements":[{"nativeSrc":"24151:54:20","nodeType":"YulVariableDeclaration","src":"24151:54:20","value":{"arguments":[{"name":"array","nativeSrc":"24199:5:20","nodeType":"YulIdentifier","src":"24199:5:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"24167:31:20","nodeType":"YulIdentifier","src":"24167:31:20"},"nativeSrc":"24167:38:20","nodeType":"YulFunctionCall","src":"24167:38:20"},"variables":[{"name":"dataArea","nativeSrc":"24155:8:20","nodeType":"YulTypedName","src":"24155:8:20","type":""}]},{"nativeSrc":"24218:63:20","nodeType":"YulVariableDeclaration","src":"24218:63:20","value":{"arguments":[{"name":"dataArea","nativeSrc":"24241:8:20","nodeType":"YulIdentifier","src":"24241:8:20"},{"arguments":[{"name":"startIndex","nativeSrc":"24269:10:20","nodeType":"YulIdentifier","src":"24269:10:20"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"24251:17:20","nodeType":"YulIdentifier","src":"24251:17:20"},"nativeSrc":"24251:29:20","nodeType":"YulFunctionCall","src":"24251:29:20"}],"functionName":{"name":"add","nativeSrc":"24237:3:20","nodeType":"YulIdentifier","src":"24237:3:20"},"nativeSrc":"24237:44:20","nodeType":"YulFunctionCall","src":"24237:44:20"},"variables":[{"name":"deleteStart","nativeSrc":"24222:11:20","nodeType":"YulTypedName","src":"24222:11:20","type":""}]},{"body":{"nativeSrc":"24438:27:20","nodeType":"YulBlock","src":"24438:27:20","statements":[{"nativeSrc":"24440:23:20","nodeType":"YulAssignment","src":"24440:23:20","value":{"name":"dataArea","nativeSrc":"24455:8:20","nodeType":"YulIdentifier","src":"24455:8:20"},"variableNames":[{"name":"deleteStart","nativeSrc":"24440:11:20","nodeType":"YulIdentifier","src":"24440:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"24422:10:20","nodeType":"YulIdentifier","src":"24422:10:20"},{"kind":"number","nativeSrc":"24434:2:20","nodeType":"YulLiteral","src":"24434:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"24419:2:20","nodeType":"YulIdentifier","src":"24419:2:20"},"nativeSrc":"24419:18:20","nodeType":"YulFunctionCall","src":"24419:18:20"},"nativeSrc":"24416:49:20","nodeType":"YulIf","src":"24416:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"24507:11:20","nodeType":"YulIdentifier","src":"24507:11:20"},{"arguments":[{"name":"dataArea","nativeSrc":"24524:8:20","nodeType":"YulIdentifier","src":"24524:8:20"},{"arguments":[{"name":"len","nativeSrc":"24552:3:20","nodeType":"YulIdentifier","src":"24552:3:20"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"24534:17:20","nodeType":"YulIdentifier","src":"24534:17:20"},"nativeSrc":"24534:22:20","nodeType":"YulFunctionCall","src":"24534:22:20"}],"functionName":{"name":"add","nativeSrc":"24520:3:20","nodeType":"YulIdentifier","src":"24520:3:20"},"nativeSrc":"24520:37:20","nodeType":"YulFunctionCall","src":"24520:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"24478:28:20","nodeType":"YulIdentifier","src":"24478:28:20"},"nativeSrc":"24478:80:20","nodeType":"YulFunctionCall","src":"24478:80:20"},"nativeSrc":"24478:80:20","nodeType":"YulExpressionStatement","src":"24478:80:20"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"24128:3:20","nodeType":"YulIdentifier","src":"24128:3:20"},{"kind":"number","nativeSrc":"24133:2:20","nodeType":"YulLiteral","src":"24133:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"24125:2:20","nodeType":"YulIdentifier","src":"24125:2:20"},"nativeSrc":"24125:11:20","nodeType":"YulFunctionCall","src":"24125:11:20"},"nativeSrc":"24122:446:20","nodeType":"YulIf","src":"24122:446:20"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"24032:543:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"24087:5:20","nodeType":"YulTypedName","src":"24087:5:20","type":""},{"name":"len","nativeSrc":"24094:3:20","nodeType":"YulTypedName","src":"24094:3:20","type":""},{"name":"startIndex","nativeSrc":"24099:10:20","nodeType":"YulTypedName","src":"24099:10:20","type":""}],"src":"24032:543:20"},{"body":{"nativeSrc":"24644:54:20","nodeType":"YulBlock","src":"24644:54:20","statements":[{"nativeSrc":"24654:37:20","nodeType":"YulAssignment","src":"24654:37:20","value":{"arguments":[{"name":"bits","nativeSrc":"24679:4:20","nodeType":"YulIdentifier","src":"24679:4:20"},{"name":"value","nativeSrc":"24685:5:20","nodeType":"YulIdentifier","src":"24685:5:20"}],"functionName":{"name":"shr","nativeSrc":"24675:3:20","nodeType":"YulIdentifier","src":"24675:3:20"},"nativeSrc":"24675:16:20","nodeType":"YulFunctionCall","src":"24675:16:20"},"variableNames":[{"name":"newValue","nativeSrc":"24654:8:20","nodeType":"YulIdentifier","src":"24654:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"24581:117:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"24619:4:20","nodeType":"YulTypedName","src":"24619:4:20","type":""},{"name":"value","nativeSrc":"24625:5:20","nodeType":"YulTypedName","src":"24625:5:20","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"24635:8:20","nodeType":"YulTypedName","src":"24635:8:20","type":""}],"src":"24581:117:20"},{"body":{"nativeSrc":"24755:118:20","nodeType":"YulBlock","src":"24755:118:20","statements":[{"nativeSrc":"24765:68:20","nodeType":"YulVariableDeclaration","src":"24765:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"24814:1:20","nodeType":"YulLiteral","src":"24814:1:20","type":"","value":"8"},{"name":"bytes","nativeSrc":"24817:5:20","nodeType":"YulIdentifier","src":"24817:5:20"}],"functionName":{"name":"mul","nativeSrc":"24810:3:20","nodeType":"YulIdentifier","src":"24810:3:20"},"nativeSrc":"24810:13:20","nodeType":"YulFunctionCall","src":"24810:13:20"},{"arguments":[{"kind":"number","nativeSrc":"24829:1:20","nodeType":"YulLiteral","src":"24829:1:20","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"24825:3:20","nodeType":"YulIdentifier","src":"24825:3:20"},"nativeSrc":"24825:6:20","nodeType":"YulFunctionCall","src":"24825:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"24781:28:20","nodeType":"YulIdentifier","src":"24781:28:20"},"nativeSrc":"24781:51:20","nodeType":"YulFunctionCall","src":"24781:51:20"}],"functionName":{"name":"not","nativeSrc":"24777:3:20","nodeType":"YulIdentifier","src":"24777:3:20"},"nativeSrc":"24777:56:20","nodeType":"YulFunctionCall","src":"24777:56:20"},"variables":[{"name":"mask","nativeSrc":"24769:4:20","nodeType":"YulTypedName","src":"24769:4:20","type":""}]},{"nativeSrc":"24842:25:20","nodeType":"YulAssignment","src":"24842:25:20","value":{"arguments":[{"name":"data","nativeSrc":"24856:4:20","nodeType":"YulIdentifier","src":"24856:4:20"},{"name":"mask","nativeSrc":"24862:4:20","nodeType":"YulIdentifier","src":"24862:4:20"}],"functionName":{"name":"and","nativeSrc":"24852:3:20","nodeType":"YulIdentifier","src":"24852:3:20"},"nativeSrc":"24852:15:20","nodeType":"YulFunctionCall","src":"24852:15:20"},"variableNames":[{"name":"result","nativeSrc":"24842:6:20","nodeType":"YulIdentifier","src":"24842:6:20"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"24704:169:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"24732:4:20","nodeType":"YulTypedName","src":"24732:4:20","type":""},{"name":"bytes","nativeSrc":"24738:5:20","nodeType":"YulTypedName","src":"24738:5:20","type":""}],"returnVariables":[{"name":"result","nativeSrc":"24748:6:20","nodeType":"YulTypedName","src":"24748:6:20","type":""}],"src":"24704:169:20"},{"body":{"nativeSrc":"24959:214:20","nodeType":"YulBlock","src":"24959:214:20","statements":[{"nativeSrc":"25092:37:20","nodeType":"YulAssignment","src":"25092:37:20","value":{"arguments":[{"name":"data","nativeSrc":"25119:4:20","nodeType":"YulIdentifier","src":"25119:4:20"},{"name":"len","nativeSrc":"25125:3:20","nodeType":"YulIdentifier","src":"25125:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"25100:18:20","nodeType":"YulIdentifier","src":"25100:18:20"},"nativeSrc":"25100:29:20","nodeType":"YulFunctionCall","src":"25100:29:20"},"variableNames":[{"name":"data","nativeSrc":"25092:4:20","nodeType":"YulIdentifier","src":"25092:4:20"}]},{"nativeSrc":"25138:29:20","nodeType":"YulAssignment","src":"25138:29:20","value":{"arguments":[{"name":"data","nativeSrc":"25149:4:20","nodeType":"YulIdentifier","src":"25149:4:20"},{"arguments":[{"kind":"number","nativeSrc":"25159:1:20","nodeType":"YulLiteral","src":"25159:1:20","type":"","value":"2"},{"name":"len","nativeSrc":"25162:3:20","nodeType":"YulIdentifier","src":"25162:3:20"}],"functionName":{"name":"mul","nativeSrc":"25155:3:20","nodeType":"YulIdentifier","src":"25155:3:20"},"nativeSrc":"25155:11:20","nodeType":"YulFunctionCall","src":"25155:11:20"}],"functionName":{"name":"or","nativeSrc":"25146:2:20","nodeType":"YulIdentifier","src":"25146:2:20"},"nativeSrc":"25146:21:20","nodeType":"YulFunctionCall","src":"25146:21:20"},"variableNames":[{"name":"used","nativeSrc":"25138:4:20","nodeType":"YulIdentifier","src":"25138:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"24878:295:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"24940:4:20","nodeType":"YulTypedName","src":"24940:4:20","type":""},{"name":"len","nativeSrc":"24946:3:20","nodeType":"YulTypedName","src":"24946:3:20","type":""}],"returnVariables":[{"name":"used","nativeSrc":"24954:4:20","nodeType":"YulTypedName","src":"24954:4:20","type":""}],"src":"24878:295:20"},{"body":{"nativeSrc":"25270:1303:20","nodeType":"YulBlock","src":"25270:1303:20","statements":[{"nativeSrc":"25281:51:20","nodeType":"YulVariableDeclaration","src":"25281:51:20","value":{"arguments":[{"name":"src","nativeSrc":"25328:3:20","nodeType":"YulIdentifier","src":"25328:3:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"25295:32:20","nodeType":"YulIdentifier","src":"25295:32:20"},"nativeSrc":"25295:37:20","nodeType":"YulFunctionCall","src":"25295:37:20"},"variables":[{"name":"newLen","nativeSrc":"25285:6:20","nodeType":"YulTypedName","src":"25285:6:20","type":""}]},{"body":{"nativeSrc":"25417:22:20","nodeType":"YulBlock","src":"25417:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"25419:16:20","nodeType":"YulIdentifier","src":"25419:16:20"},"nativeSrc":"25419:18:20","nodeType":"YulFunctionCall","src":"25419:18:20"},"nativeSrc":"25419:18:20","nodeType":"YulExpressionStatement","src":"25419:18:20"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"25389:6:20","nodeType":"YulIdentifier","src":"25389:6:20"},{"kind":"number","nativeSrc":"25397:18:20","nodeType":"YulLiteral","src":"25397:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"25386:2:20","nodeType":"YulIdentifier","src":"25386:2:20"},"nativeSrc":"25386:30:20","nodeType":"YulFunctionCall","src":"25386:30:20"},"nativeSrc":"25383:56:20","nodeType":"YulIf","src":"25383:56:20"},{"nativeSrc":"25449:52:20","nodeType":"YulVariableDeclaration","src":"25449:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"25495:4:20","nodeType":"YulIdentifier","src":"25495:4:20"}],"functionName":{"name":"sload","nativeSrc":"25489:5:20","nodeType":"YulIdentifier","src":"25489:5:20"},"nativeSrc":"25489:11:20","nodeType":"YulFunctionCall","src":"25489:11:20"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"25463:25:20","nodeType":"YulIdentifier","src":"25463:25:20"},"nativeSrc":"25463:38:20","nodeType":"YulFunctionCall","src":"25463:38:20"},"variables":[{"name":"oldLen","nativeSrc":"25453:6:20","nodeType":"YulTypedName","src":"25453:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"25594:4:20","nodeType":"YulIdentifier","src":"25594:4:20"},{"name":"oldLen","nativeSrc":"25600:6:20","nodeType":"YulIdentifier","src":"25600:6:20"},{"name":"newLen","nativeSrc":"25608:6:20","nodeType":"YulIdentifier","src":"25608:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"25548:45:20","nodeType":"YulIdentifier","src":"25548:45:20"},"nativeSrc":"25548:67:20","nodeType":"YulFunctionCall","src":"25548:67:20"},"nativeSrc":"25548:67:20","nodeType":"YulExpressionStatement","src":"25548:67:20"},{"nativeSrc":"25625:18:20","nodeType":"YulVariableDeclaration","src":"25625:18:20","value":{"kind":"number","nativeSrc":"25642:1:20","nodeType":"YulLiteral","src":"25642:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"25629:9:20","nodeType":"YulTypedName","src":"25629:9:20","type":""}]},{"nativeSrc":"25653:17:20","nodeType":"YulAssignment","src":"25653:17:20","value":{"kind":"number","nativeSrc":"25666:4:20","nodeType":"YulLiteral","src":"25666:4:20","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"25653:9:20","nodeType":"YulIdentifier","src":"25653:9:20"}]},{"cases":[{"body":{"nativeSrc":"25717:611:20","nodeType":"YulBlock","src":"25717:611:20","statements":[{"nativeSrc":"25731:37:20","nodeType":"YulVariableDeclaration","src":"25731:37:20","value":{"arguments":[{"name":"newLen","nativeSrc":"25750:6:20","nodeType":"YulIdentifier","src":"25750:6:20"},{"arguments":[{"kind":"number","nativeSrc":"25762:4:20","nodeType":"YulLiteral","src":"25762:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"25758:3:20","nodeType":"YulIdentifier","src":"25758:3:20"},"nativeSrc":"25758:9:20","nodeType":"YulFunctionCall","src":"25758:9:20"}],"functionName":{"name":"and","nativeSrc":"25746:3:20","nodeType":"YulIdentifier","src":"25746:3:20"},"nativeSrc":"25746:22:20","nodeType":"YulFunctionCall","src":"25746:22:20"},"variables":[{"name":"loopEnd","nativeSrc":"25735:7:20","nodeType":"YulTypedName","src":"25735:7:20","type":""}]},{"nativeSrc":"25782:51:20","nodeType":"YulVariableDeclaration","src":"25782:51:20","value":{"arguments":[{"name":"slot","nativeSrc":"25828:4:20","nodeType":"YulIdentifier","src":"25828:4:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"25796:31:20","nodeType":"YulIdentifier","src":"25796:31:20"},"nativeSrc":"25796:37:20","nodeType":"YulFunctionCall","src":"25796:37:20"},"variables":[{"name":"dstPtr","nativeSrc":"25786:6:20","nodeType":"YulTypedName","src":"25786:6:20","type":""}]},{"nativeSrc":"25846:10:20","nodeType":"YulVariableDeclaration","src":"25846:10:20","value":{"kind":"number","nativeSrc":"25855:1:20","nodeType":"YulLiteral","src":"25855:1:20","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"25850:1:20","nodeType":"YulTypedName","src":"25850:1:20","type":""}]},{"body":{"nativeSrc":"25914:163:20","nodeType":"YulBlock","src":"25914:163:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"25939:6:20","nodeType":"YulIdentifier","src":"25939:6:20"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"25957:3:20","nodeType":"YulIdentifier","src":"25957:3:20"},{"name":"srcOffset","nativeSrc":"25962:9:20","nodeType":"YulIdentifier","src":"25962:9:20"}],"functionName":{"name":"add","nativeSrc":"25953:3:20","nodeType":"YulIdentifier","src":"25953:3:20"},"nativeSrc":"25953:19:20","nodeType":"YulFunctionCall","src":"25953:19:20"}],"functionName":{"name":"mload","nativeSrc":"25947:5:20","nodeType":"YulIdentifier","src":"25947:5:20"},"nativeSrc":"25947:26:20","nodeType":"YulFunctionCall","src":"25947:26:20"}],"functionName":{"name":"sstore","nativeSrc":"25932:6:20","nodeType":"YulIdentifier","src":"25932:6:20"},"nativeSrc":"25932:42:20","nodeType":"YulFunctionCall","src":"25932:42:20"},"nativeSrc":"25932:42:20","nodeType":"YulExpressionStatement","src":"25932:42:20"},{"nativeSrc":"25991:24:20","nodeType":"YulAssignment","src":"25991:24:20","value":{"arguments":[{"name":"dstPtr","nativeSrc":"26005:6:20","nodeType":"YulIdentifier","src":"26005:6:20"},{"kind":"number","nativeSrc":"26013:1:20","nodeType":"YulLiteral","src":"26013:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"26001:3:20","nodeType":"YulIdentifier","src":"26001:3:20"},"nativeSrc":"26001:14:20","nodeType":"YulFunctionCall","src":"26001:14:20"},"variableNames":[{"name":"dstPtr","nativeSrc":"25991:6:20","nodeType":"YulIdentifier","src":"25991:6:20"}]},{"nativeSrc":"26032:31:20","nodeType":"YulAssignment","src":"26032:31:20","value":{"arguments":[{"name":"srcOffset","nativeSrc":"26049:9:20","nodeType":"YulIdentifier","src":"26049:9:20"},{"kind":"number","nativeSrc":"26060:2:20","nodeType":"YulLiteral","src":"26060:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"26045:3:20","nodeType":"YulIdentifier","src":"26045:3:20"},"nativeSrc":"26045:18:20","nodeType":"YulFunctionCall","src":"26045:18:20"},"variableNames":[{"name":"srcOffset","nativeSrc":"26032:9:20","nodeType":"YulIdentifier","src":"26032:9:20"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"25880:1:20","nodeType":"YulIdentifier","src":"25880:1:20"},{"name":"loopEnd","nativeSrc":"25883:7:20","nodeType":"YulIdentifier","src":"25883:7:20"}],"functionName":{"name":"lt","nativeSrc":"25877:2:20","nodeType":"YulIdentifier","src":"25877:2:20"},"nativeSrc":"25877:14:20","nodeType":"YulFunctionCall","src":"25877:14:20"},"nativeSrc":"25869:208:20","nodeType":"YulForLoop","post":{"nativeSrc":"25892:21:20","nodeType":"YulBlock","src":"25892:21:20","statements":[{"nativeSrc":"25894:17:20","nodeType":"YulAssignment","src":"25894:17:20","value":{"arguments":[{"name":"i","nativeSrc":"25903:1:20","nodeType":"YulIdentifier","src":"25903:1:20"},{"kind":"number","nativeSrc":"25906:4:20","nodeType":"YulLiteral","src":"25906:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"25899:3:20","nodeType":"YulIdentifier","src":"25899:3:20"},"nativeSrc":"25899:12:20","nodeType":"YulFunctionCall","src":"25899:12:20"},"variableNames":[{"name":"i","nativeSrc":"25894:1:20","nodeType":"YulIdentifier","src":"25894:1:20"}]}]},"pre":{"nativeSrc":"25873:3:20","nodeType":"YulBlock","src":"25873:3:20","statements":[]},"src":"25869:208:20"},{"body":{"nativeSrc":"26113:156:20","nodeType":"YulBlock","src":"26113:156:20","statements":[{"nativeSrc":"26131:43:20","nodeType":"YulVariableDeclaration","src":"26131:43:20","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"26158:3:20","nodeType":"YulIdentifier","src":"26158:3:20"},{"name":"srcOffset","nativeSrc":"26163:9:20","nodeType":"YulIdentifier","src":"26163:9:20"}],"functionName":{"name":"add","nativeSrc":"26154:3:20","nodeType":"YulIdentifier","src":"26154:3:20"},"nativeSrc":"26154:19:20","nodeType":"YulFunctionCall","src":"26154:19:20"}],"functionName":{"name":"mload","nativeSrc":"26148:5:20","nodeType":"YulIdentifier","src":"26148:5:20"},"nativeSrc":"26148:26:20","nodeType":"YulFunctionCall","src":"26148:26:20"},"variables":[{"name":"lastValue","nativeSrc":"26135:9:20","nodeType":"YulTypedName","src":"26135:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"26198:6:20","nodeType":"YulIdentifier","src":"26198:6:20"},{"arguments":[{"name":"lastValue","nativeSrc":"26225:9:20","nodeType":"YulIdentifier","src":"26225:9:20"},{"arguments":[{"name":"newLen","nativeSrc":"26240:6:20","nodeType":"YulIdentifier","src":"26240:6:20"},{"kind":"number","nativeSrc":"26248:4:20","nodeType":"YulLiteral","src":"26248:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"26236:3:20","nodeType":"YulIdentifier","src":"26236:3:20"},"nativeSrc":"26236:17:20","nodeType":"YulFunctionCall","src":"26236:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"26206:18:20","nodeType":"YulIdentifier","src":"26206:18:20"},"nativeSrc":"26206:48:20","nodeType":"YulFunctionCall","src":"26206:48:20"}],"functionName":{"name":"sstore","nativeSrc":"26191:6:20","nodeType":"YulIdentifier","src":"26191:6:20"},"nativeSrc":"26191:64:20","nodeType":"YulFunctionCall","src":"26191:64:20"},"nativeSrc":"26191:64:20","nodeType":"YulExpressionStatement","src":"26191:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"26096:7:20","nodeType":"YulIdentifier","src":"26096:7:20"},{"name":"newLen","nativeSrc":"26105:6:20","nodeType":"YulIdentifier","src":"26105:6:20"}],"functionName":{"name":"lt","nativeSrc":"26093:2:20","nodeType":"YulIdentifier","src":"26093:2:20"},"nativeSrc":"26093:19:20","nodeType":"YulFunctionCall","src":"26093:19:20"},"nativeSrc":"26090:179:20","nodeType":"YulIf","src":"26090:179:20"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"26289:4:20","nodeType":"YulIdentifier","src":"26289:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"26303:6:20","nodeType":"YulIdentifier","src":"26303:6:20"},{"kind":"number","nativeSrc":"26311:1:20","nodeType":"YulLiteral","src":"26311:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"26299:3:20","nodeType":"YulIdentifier","src":"26299:3:20"},"nativeSrc":"26299:14:20","nodeType":"YulFunctionCall","src":"26299:14:20"},{"kind":"number","nativeSrc":"26315:1:20","nodeType":"YulLiteral","src":"26315:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"26295:3:20","nodeType":"YulIdentifier","src":"26295:3:20"},"nativeSrc":"26295:22:20","nodeType":"YulFunctionCall","src":"26295:22:20"}],"functionName":{"name":"sstore","nativeSrc":"26282:6:20","nodeType":"YulIdentifier","src":"26282:6:20"},"nativeSrc":"26282:36:20","nodeType":"YulFunctionCall","src":"26282:36:20"},"nativeSrc":"26282:36:20","nodeType":"YulExpressionStatement","src":"26282:36:20"}]},"nativeSrc":"25710:618:20","nodeType":"YulCase","src":"25710:618:20","value":{"kind":"number","nativeSrc":"25715:1:20","nodeType":"YulLiteral","src":"25715:1:20","type":"","value":"1"}},{"body":{"nativeSrc":"26345:222:20","nodeType":"YulBlock","src":"26345:222:20","statements":[{"nativeSrc":"26359:14:20","nodeType":"YulVariableDeclaration","src":"26359:14:20","value":{"kind":"number","nativeSrc":"26372:1:20","nodeType":"YulLiteral","src":"26372:1:20","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"26363:5:20","nodeType":"YulTypedName","src":"26363:5:20","type":""}]},{"body":{"nativeSrc":"26396:67:20","nodeType":"YulBlock","src":"26396:67:20","statements":[{"nativeSrc":"26414:35:20","nodeType":"YulAssignment","src":"26414:35:20","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"26433:3:20","nodeType":"YulIdentifier","src":"26433:3:20"},{"name":"srcOffset","nativeSrc":"26438:9:20","nodeType":"YulIdentifier","src":"26438:9:20"}],"functionName":{"name":"add","nativeSrc":"26429:3:20","nodeType":"YulIdentifier","src":"26429:3:20"},"nativeSrc":"26429:19:20","nodeType":"YulFunctionCall","src":"26429:19:20"}],"functionName":{"name":"mload","nativeSrc":"26423:5:20","nodeType":"YulIdentifier","src":"26423:5:20"},"nativeSrc":"26423:26:20","nodeType":"YulFunctionCall","src":"26423:26:20"},"variableNames":[{"name":"value","nativeSrc":"26414:5:20","nodeType":"YulIdentifier","src":"26414:5:20"}]}]},"condition":{"name":"newLen","nativeSrc":"26389:6:20","nodeType":"YulIdentifier","src":"26389:6:20"},"nativeSrc":"26386:77:20","nodeType":"YulIf","src":"26386:77:20"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"26483:4:20","nodeType":"YulIdentifier","src":"26483:4:20"},{"arguments":[{"name":"value","nativeSrc":"26542:5:20","nodeType":"YulIdentifier","src":"26542:5:20"},{"name":"newLen","nativeSrc":"26549:6:20","nodeType":"YulIdentifier","src":"26549:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"26489:52:20","nodeType":"YulIdentifier","src":"26489:52:20"},"nativeSrc":"26489:67:20","nodeType":"YulFunctionCall","src":"26489:67:20"}],"functionName":{"name":"sstore","nativeSrc":"26476:6:20","nodeType":"YulIdentifier","src":"26476:6:20"},"nativeSrc":"26476:81:20","nodeType":"YulFunctionCall","src":"26476:81:20"},"nativeSrc":"26476:81:20","nodeType":"YulExpressionStatement","src":"26476:81:20"}]},"nativeSrc":"26337:230:20","nodeType":"YulCase","src":"26337:230:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"25690:6:20","nodeType":"YulIdentifier","src":"25690:6:20"},{"kind":"number","nativeSrc":"25698:2:20","nodeType":"YulLiteral","src":"25698:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"25687:2:20","nodeType":"YulIdentifier","src":"25687:2:20"},"nativeSrc":"25687:14:20","nodeType":"YulFunctionCall","src":"25687:14:20"},"nativeSrc":"25680:887:20","nodeType":"YulSwitch","src":"25680:887:20"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"25178:1395:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"25259:4:20","nodeType":"YulTypedName","src":"25259:4:20","type":""},{"name":"src","nativeSrc":"25265:3:20","nodeType":"YulTypedName","src":"25265:3:20","type":""}],"src":"25178:1395:20"},{"body":{"nativeSrc":"26637:40:20","nodeType":"YulBlock","src":"26637:40:20","statements":[{"nativeSrc":"26648:22:20","nodeType":"YulAssignment","src":"26648:22:20","value":{"arguments":[{"name":"value","nativeSrc":"26664:5:20","nodeType":"YulIdentifier","src":"26664:5:20"}],"functionName":{"name":"mload","nativeSrc":"26658:5:20","nodeType":"YulIdentifier","src":"26658:5:20"},"nativeSrc":"26658:12:20","nodeType":"YulFunctionCall","src":"26658:12:20"},"variableNames":[{"name":"length","nativeSrc":"26648:6:20","nodeType":"YulIdentifier","src":"26648:6:20"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"26579:98:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26620:5:20","nodeType":"YulTypedName","src":"26620:5:20","type":""}],"returnVariables":[{"name":"length","nativeSrc":"26630:6:20","nodeType":"YulTypedName","src":"26630:6:20","type":""}],"src":"26579:98:20"},{"body":{"nativeSrc":"26778:73:20","nodeType":"YulBlock","src":"26778:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"26795:3:20","nodeType":"YulIdentifier","src":"26795:3:20"},{"name":"length","nativeSrc":"26800:6:20","nodeType":"YulIdentifier","src":"26800:6:20"}],"functionName":{"name":"mstore","nativeSrc":"26788:6:20","nodeType":"YulIdentifier","src":"26788:6:20"},"nativeSrc":"26788:19:20","nodeType":"YulFunctionCall","src":"26788:19:20"},"nativeSrc":"26788:19:20","nodeType":"YulExpressionStatement","src":"26788:19:20"},{"nativeSrc":"26816:29:20","nodeType":"YulAssignment","src":"26816:29:20","value":{"arguments":[{"name":"pos","nativeSrc":"26835:3:20","nodeType":"YulIdentifier","src":"26835:3:20"},{"kind":"number","nativeSrc":"26840:4:20","nodeType":"YulLiteral","src":"26840:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"26831:3:20","nodeType":"YulIdentifier","src":"26831:3:20"},"nativeSrc":"26831:14:20","nodeType":"YulFunctionCall","src":"26831:14:20"},"variableNames":[{"name":"updated_pos","nativeSrc":"26816:11:20","nodeType":"YulIdentifier","src":"26816:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"26683:168:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"26750:3:20","nodeType":"YulTypedName","src":"26750:3:20","type":""},{"name":"length","nativeSrc":"26755:6:20","nodeType":"YulTypedName","src":"26755:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"26766:11:20","nodeType":"YulTypedName","src":"26766:11:20","type":""}],"src":"26683:168:20"},{"body":{"nativeSrc":"26947:283:20","nodeType":"YulBlock","src":"26947:283:20","statements":[{"nativeSrc":"26957:52:20","nodeType":"YulVariableDeclaration","src":"26957:52:20","value":{"arguments":[{"name":"value","nativeSrc":"27003:5:20","nodeType":"YulIdentifier","src":"27003:5:20"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"26971:31:20","nodeType":"YulIdentifier","src":"26971:31:20"},"nativeSrc":"26971:38:20","nodeType":"YulFunctionCall","src":"26971:38:20"},"variables":[{"name":"length","nativeSrc":"26961:6:20","nodeType":"YulTypedName","src":"26961:6:20","type":""}]},{"nativeSrc":"27018:77:20","nodeType":"YulAssignment","src":"27018:77:20","value":{"arguments":[{"name":"pos","nativeSrc":"27083:3:20","nodeType":"YulIdentifier","src":"27083:3:20"},{"name":"length","nativeSrc":"27088:6:20","nodeType":"YulIdentifier","src":"27088:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"27025:57:20","nodeType":"YulIdentifier","src":"27025:57:20"},"nativeSrc":"27025:70:20","nodeType":"YulFunctionCall","src":"27025:70:20"},"variableNames":[{"name":"pos","nativeSrc":"27018:3:20","nodeType":"YulIdentifier","src":"27018:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"27143:5:20","nodeType":"YulIdentifier","src":"27143:5:20"},{"kind":"number","nativeSrc":"27150:4:20","nodeType":"YulLiteral","src":"27150:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"27139:3:20","nodeType":"YulIdentifier","src":"27139:3:20"},"nativeSrc":"27139:16:20","nodeType":"YulFunctionCall","src":"27139:16:20"},{"name":"pos","nativeSrc":"27157:3:20","nodeType":"YulIdentifier","src":"27157:3:20"},{"name":"length","nativeSrc":"27162:6:20","nodeType":"YulIdentifier","src":"27162:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"27104:34:20","nodeType":"YulIdentifier","src":"27104:34:20"},"nativeSrc":"27104:65:20","nodeType":"YulFunctionCall","src":"27104:65:20"},"nativeSrc":"27104:65:20","nodeType":"YulExpressionStatement","src":"27104:65:20"},{"nativeSrc":"27178:46:20","nodeType":"YulAssignment","src":"27178:46:20","value":{"arguments":[{"name":"pos","nativeSrc":"27189:3:20","nodeType":"YulIdentifier","src":"27189:3:20"},{"arguments":[{"name":"length","nativeSrc":"27216:6:20","nodeType":"YulIdentifier","src":"27216:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"27194:21:20","nodeType":"YulIdentifier","src":"27194:21:20"},"nativeSrc":"27194:29:20","nodeType":"YulFunctionCall","src":"27194:29:20"}],"functionName":{"name":"add","nativeSrc":"27185:3:20","nodeType":"YulIdentifier","src":"27185:3:20"},"nativeSrc":"27185:39:20","nodeType":"YulFunctionCall","src":"27185:39:20"},"variableNames":[{"name":"end","nativeSrc":"27178:3:20","nodeType":"YulIdentifier","src":"27178:3:20"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"26857:373:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26928:5:20","nodeType":"YulTypedName","src":"26928:5:20","type":""},{"name":"pos","nativeSrc":"26935:3:20","nodeType":"YulTypedName","src":"26935:3:20","type":""}],"returnVariables":[{"name":"end","nativeSrc":"26943:3:20","nodeType":"YulTypedName","src":"26943:3:20","type":""}],"src":"26857:373:20"},{"body":{"nativeSrc":"27436:440:20","nodeType":"YulBlock","src":"27436:440:20","statements":[{"nativeSrc":"27446:27:20","nodeType":"YulAssignment","src":"27446:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"27458:9:20","nodeType":"YulIdentifier","src":"27458:9:20"},{"kind":"number","nativeSrc":"27469:3:20","nodeType":"YulLiteral","src":"27469:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"27454:3:20","nodeType":"YulIdentifier","src":"27454:3:20"},"nativeSrc":"27454:19:20","nodeType":"YulFunctionCall","src":"27454:19:20"},"variableNames":[{"name":"tail","nativeSrc":"27446:4:20","nodeType":"YulIdentifier","src":"27446:4:20"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"27527:6:20","nodeType":"YulIdentifier","src":"27527:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"27540:9:20","nodeType":"YulIdentifier","src":"27540:9:20"},{"kind":"number","nativeSrc":"27551:1:20","nodeType":"YulLiteral","src":"27551:1:20","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"27536:3:20","nodeType":"YulIdentifier","src":"27536:3:20"},"nativeSrc":"27536:17:20","nodeType":"YulFunctionCall","src":"27536:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"27483:43:20","nodeType":"YulIdentifier","src":"27483:43:20"},"nativeSrc":"27483:71:20","nodeType":"YulFunctionCall","src":"27483:71:20"},"nativeSrc":"27483:71:20","nodeType":"YulExpressionStatement","src":"27483:71:20"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"27608:6:20","nodeType":"YulIdentifier","src":"27608:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"27621:9:20","nodeType":"YulIdentifier","src":"27621:9:20"},{"kind":"number","nativeSrc":"27632:2:20","nodeType":"YulLiteral","src":"27632:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27617:3:20","nodeType":"YulIdentifier","src":"27617:3:20"},"nativeSrc":"27617:18:20","nodeType":"YulFunctionCall","src":"27617:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"27564:43:20","nodeType":"YulIdentifier","src":"27564:43:20"},"nativeSrc":"27564:72:20","nodeType":"YulFunctionCall","src":"27564:72:20"},"nativeSrc":"27564:72:20","nodeType":"YulExpressionStatement","src":"27564:72:20"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"27690:6:20","nodeType":"YulIdentifier","src":"27690:6:20"},{"arguments":[{"name":"headStart","nativeSrc":"27703:9:20","nodeType":"YulIdentifier","src":"27703:9:20"},{"kind":"number","nativeSrc":"27714:2:20","nodeType":"YulLiteral","src":"27714:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27699:3:20","nodeType":"YulIdentifier","src":"27699:3:20"},"nativeSrc":"27699:18:20","nodeType":"YulFunctionCall","src":"27699:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"27646:43:20","nodeType":"YulIdentifier","src":"27646:43:20"},"nativeSrc":"27646:72:20","nodeType":"YulFunctionCall","src":"27646:72:20"},"nativeSrc":"27646:72:20","nodeType":"YulExpressionStatement","src":"27646:72:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27739:9:20","nodeType":"YulIdentifier","src":"27739:9:20"},{"kind":"number","nativeSrc":"27750:2:20","nodeType":"YulLiteral","src":"27750:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27735:3:20","nodeType":"YulIdentifier","src":"27735:3:20"},"nativeSrc":"27735:18:20","nodeType":"YulFunctionCall","src":"27735:18:20"},{"arguments":[{"name":"tail","nativeSrc":"27759:4:20","nodeType":"YulIdentifier","src":"27759:4:20"},{"name":"headStart","nativeSrc":"27765:9:20","nodeType":"YulIdentifier","src":"27765:9:20"}],"functionName":{"name":"sub","nativeSrc":"27755:3:20","nodeType":"YulIdentifier","src":"27755:3:20"},"nativeSrc":"27755:20:20","nodeType":"YulFunctionCall","src":"27755:20:20"}],"functionName":{"name":"mstore","nativeSrc":"27728:6:20","nodeType":"YulIdentifier","src":"27728:6:20"},"nativeSrc":"27728:48:20","nodeType":"YulFunctionCall","src":"27728:48:20"},"nativeSrc":"27728:48:20","nodeType":"YulExpressionStatement","src":"27728:48:20"},{"nativeSrc":"27785:84:20","nodeType":"YulAssignment","src":"27785:84:20","value":{"arguments":[{"name":"value3","nativeSrc":"27855:6:20","nodeType":"YulIdentifier","src":"27855:6:20"},{"name":"tail","nativeSrc":"27864:4:20","nodeType":"YulIdentifier","src":"27864:4:20"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"27793:61:20","nodeType":"YulIdentifier","src":"27793:61:20"},"nativeSrc":"27793:76:20","nodeType":"YulFunctionCall","src":"27793:76:20"},"variableNames":[{"name":"tail","nativeSrc":"27785:4:20","nodeType":"YulIdentifier","src":"27785:4:20"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"27236:640:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27384:9:20","nodeType":"YulTypedName","src":"27384:9:20","type":""},{"name":"value3","nativeSrc":"27396:6:20","nodeType":"YulTypedName","src":"27396:6:20","type":""},{"name":"value2","nativeSrc":"27404:6:20","nodeType":"YulTypedName","src":"27404:6:20","type":""},{"name":"value1","nativeSrc":"27412:6:20","nodeType":"YulTypedName","src":"27412:6:20","type":""},{"name":"value0","nativeSrc":"27420:6:20","nodeType":"YulTypedName","src":"27420:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27431:4:20","nodeType":"YulTypedName","src":"27431:4:20","type":""}],"src":"27236:640:20"},{"body":{"nativeSrc":"27944:79:20","nodeType":"YulBlock","src":"27944:79:20","statements":[{"nativeSrc":"27954:22:20","nodeType":"YulAssignment","src":"27954:22:20","value":{"arguments":[{"name":"offset","nativeSrc":"27969:6:20","nodeType":"YulIdentifier","src":"27969:6:20"}],"functionName":{"name":"mload","nativeSrc":"27963:5:20","nodeType":"YulIdentifier","src":"27963:5:20"},"nativeSrc":"27963:13:20","nodeType":"YulFunctionCall","src":"27963:13:20"},"variableNames":[{"name":"value","nativeSrc":"27954:5:20","nodeType":"YulIdentifier","src":"27954:5:20"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"28011:5:20","nodeType":"YulIdentifier","src":"28011:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"27985:25:20","nodeType":"YulIdentifier","src":"27985:25:20"},"nativeSrc":"27985:32:20","nodeType":"YulFunctionCall","src":"27985:32:20"},"nativeSrc":"27985:32:20","nodeType":"YulExpressionStatement","src":"27985:32:20"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"27882:141:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"27922:6:20","nodeType":"YulTypedName","src":"27922:6:20","type":""},{"name":"end","nativeSrc":"27930:3:20","nodeType":"YulTypedName","src":"27930:3:20","type":""}],"returnVariables":[{"name":"value","nativeSrc":"27938:5:20","nodeType":"YulTypedName","src":"27938:5:20","type":""}],"src":"27882:141:20"},{"body":{"nativeSrc":"28105:273:20","nodeType":"YulBlock","src":"28105:273:20","statements":[{"body":{"nativeSrc":"28151:83:20","nodeType":"YulBlock","src":"28151:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"28153:77:20","nodeType":"YulIdentifier","src":"28153:77:20"},"nativeSrc":"28153:79:20","nodeType":"YulFunctionCall","src":"28153:79:20"},"nativeSrc":"28153:79:20","nodeType":"YulExpressionStatement","src":"28153:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"28126:7:20","nodeType":"YulIdentifier","src":"28126:7:20"},{"name":"headStart","nativeSrc":"28135:9:20","nodeType":"YulIdentifier","src":"28135:9:20"}],"functionName":{"name":"sub","nativeSrc":"28122:3:20","nodeType":"YulIdentifier","src":"28122:3:20"},"nativeSrc":"28122:23:20","nodeType":"YulFunctionCall","src":"28122:23:20"},{"kind":"number","nativeSrc":"28147:2:20","nodeType":"YulLiteral","src":"28147:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"28118:3:20","nodeType":"YulIdentifier","src":"28118:3:20"},"nativeSrc":"28118:32:20","nodeType":"YulFunctionCall","src":"28118:32:20"},"nativeSrc":"28115:119:20","nodeType":"YulIf","src":"28115:119:20"},{"nativeSrc":"28244:127:20","nodeType":"YulBlock","src":"28244:127:20","statements":[{"nativeSrc":"28259:15:20","nodeType":"YulVariableDeclaration","src":"28259:15:20","value":{"kind":"number","nativeSrc":"28273:1:20","nodeType":"YulLiteral","src":"28273:1:20","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"28263:6:20","nodeType":"YulTypedName","src":"28263:6:20","type":""}]},{"nativeSrc":"28288:73:20","nodeType":"YulAssignment","src":"28288:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28333:9:20","nodeType":"YulIdentifier","src":"28333:9:20"},{"name":"offset","nativeSrc":"28344:6:20","nodeType":"YulIdentifier","src":"28344:6:20"}],"functionName":{"name":"add","nativeSrc":"28329:3:20","nodeType":"YulIdentifier","src":"28329:3:20"},"nativeSrc":"28329:22:20","nodeType":"YulFunctionCall","src":"28329:22:20"},{"name":"dataEnd","nativeSrc":"28353:7:20","nodeType":"YulIdentifier","src":"28353:7:20"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"28298:30:20","nodeType":"YulIdentifier","src":"28298:30:20"},"nativeSrc":"28298:63:20","nodeType":"YulFunctionCall","src":"28298:63:20"},"variableNames":[{"name":"value0","nativeSrc":"28288:6:20","nodeType":"YulIdentifier","src":"28288:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"28029:349:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28075:9:20","nodeType":"YulTypedName","src":"28075:9:20","type":""},{"name":"dataEnd","nativeSrc":"28086:7:20","nodeType":"YulTypedName","src":"28086:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"28098:6:20","nodeType":"YulTypedName","src":"28098:6:20","type":""}],"src":"28029:349:20"},{"body":{"nativeSrc":"28412:152:20","nodeType":"YulBlock","src":"28412:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"28429:1:20","nodeType":"YulLiteral","src":"28429:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"28432:77:20","nodeType":"YulLiteral","src":"28432:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"28422:6:20","nodeType":"YulIdentifier","src":"28422:6:20"},"nativeSrc":"28422:88:20","nodeType":"YulFunctionCall","src":"28422:88:20"},"nativeSrc":"28422:88:20","nodeType":"YulExpressionStatement","src":"28422:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"28526:1:20","nodeType":"YulLiteral","src":"28526:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"28529:4:20","nodeType":"YulLiteral","src":"28529:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"28519:6:20","nodeType":"YulIdentifier","src":"28519:6:20"},"nativeSrc":"28519:15:20","nodeType":"YulFunctionCall","src":"28519:15:20"},"nativeSrc":"28519:15:20","nodeType":"YulExpressionStatement","src":"28519:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"28550:1:20","nodeType":"YulLiteral","src":"28550:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"28553:4:20","nodeType":"YulLiteral","src":"28553:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"28543:6:20","nodeType":"YulIdentifier","src":"28543:6:20"},"nativeSrc":"28543:15:20","nodeType":"YulFunctionCall","src":"28543:15:20"},"nativeSrc":"28543:15:20","nodeType":"YulExpressionStatement","src":"28543:15:20"}]},"name":"panic_error_0x12","nativeSrc":"28384:180:20","nodeType":"YulFunctionDefinition","src":"28384:180:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_Content_$3373_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_Content_$3373_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_Content_$3373_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_Content_$3373__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_Content_$3373_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value3,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct Nft.NftData -> struct Nft.NftData\n    function abi_encode_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // tokenId\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // description\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // image\n\n            let memberValue0 := mload(add(value, 0x60))\n\n            mstore(add(pos, 0x60), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // creator\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x80))\n        }\n\n        end := tail\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr(value0, pos)\n    }\n\n    function array_nextElement_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct Nft.NftData[] -> struct Nft.NftData[]\n    function abi_encode_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_NftData_$3400_memory_ptr_to_t_struct$_NftData_$3400_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_NftData_$3400_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101585760003560e01c806375f2fc2c116100c3578063a91496411161007c578063a914964114610403578063b88d4fde14610421578063c87b56dd1461043d578063d3fc98641461046d578063e985e9c514610489578063f2fde38b146104b957610158565b806375f2fc2c146103175780638684e124146103475780638baafe131461037b5780638da5cb5b146103ab57806395d89b41146103c9578063a22cb465146103e757610158565b80632f745c59116101155780632f745c591461023157806341de982e1461026157806342842e0e146102915780636352211e146102ad57806370a08231146102dd578063715018a61461030d57610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db57806323b872dd146101f75780632cb7d92f14610213575b600080fd5b61017760048036038101906101729190612525565b6104d5565b604051610184919061256d565b60405180910390f35b610195610536565b6040516101a29190612618565b60405180910390f35b6101c560048036038101906101c09190612670565b6105c8565b6040516101d291906126de565b60405180910390f35b6101f560048036038101906101f09190612725565b6105e4565b005b610211600480360381019061020c9190612765565b6105fa565b005b61021b6106fc565b6040516102289190612817565b60405180910390f35b61024b60048036038101906102469190612725565b610722565b6040516102589190612841565b60405180910390f35b61027b6004803603810190610276919061285c565b610780565b6040516102889190612841565b60405180910390f35b6102ab60048036038101906102a69190612765565b6107c9565b005b6102c760048036038101906102c29190612670565b6107e9565b6040516102d491906126de565b60405180910390f35b6102f760048036038101906102f2919061285c565b6107fb565b6040516103049190612841565b60405180910390f35b6103156108b5565b005b610331600480360381019061032c9190612889565b6108c9565b60405161033e9190612841565b60405180910390f35b610361600480360381019061035c9190612670565b610971565b6040516103729594939291906128c9565b60405180910390f35b6103956004803603810190610390919061285c565b610b6f565b6040516103a29190612841565b60405180910390f35b6103b3610bb8565b6040516103c091906126de565b60405180910390f35b6103d1610be2565b6040516103de9190612618565b60405180910390f35b61040160048036038101906103fc919061295d565b610c74565b005b61040b610c8a565b6040516104189190612b4b565b60405180910390f35b61043b60048036038101906104369190612ca2565b610eff565b005b61045760048036038101906104529190612670565b610f1c565b6040516104649190612618565b60405180910390f35b61048760048036038101906104829190612d85565b61102f565b005b6104a3600480360381019061049e9190612df9565b61136a565b6040516104b0919061256d565b60405180910390f35b6104d360048036038101906104ce919061285c565b6113fe565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061052f575061052e82611484565b5b9050919050565b60606000805461054590612e68565b80601f016020809104026020016040519081016040528092919081815260200182805461057190612e68565b80156105be5780601f10610593576101008083540402835291602001916105be565b820191906000526020600020905b8154815290600101906020018083116105a157829003601f168201915b5050505050905090565b60006105d382611566565b506105dd826115ee565b9050919050565b6105f682826105f161162b565b611633565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066c5760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161066391906126de565b60405180910390fd5b6000610680838361067b61162b565b611645565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106f6578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016106ed93929190612e99565b60405180910390fd5b50505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154905092915050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107e483838360405180602001604052806000815250610eff565b505050565b60006107f482611566565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361086e5760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161086591906126de565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108bd61185f565b6108c760006118e6565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355eef30383856040518363ffffffff1660e01b8152600401610928929190612ed0565b602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190612f0e565b905092915050565b6009818154811061098157600080fd5b90600052602060002090600502016000915090508060000154908060010180546109aa90612e68565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690612e68565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505090806002018054610a3890612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6490612e68565b8015610ab15780601f10610a8657610100808354040283529160200191610ab1565b820191906000526020600020905b815481529060010190602001808311610a9457829003601f168201915b505050505090806003018054610ac690612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610af290612e68565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610bf190612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1d90612e68565b8015610c6a5780601f10610c3f57610100808354040283529160200191610c6a565b820191906000526020600020905b815481529060010190602001808311610c4d57829003601f168201915b5050505050905090565b610c86610c7f61162b565b83836119ac565b5050565b60606009805480602002602001604051908101604052809291908181526020016000905b82821015610ef657838290600052602060002090600502016040518060a001604052908160008201548152602001600182018054610ceb90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1790612e68565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b50505050508152602001600282018054610d7d90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610da990612e68565b8015610df65780601f10610dcb57610100808354040283529160200191610df6565b820191906000526020600020905b815481529060010190602001808311610dd957829003601f168201915b50505050508152602001600382018054610e0f90612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3b90612e68565b8015610e885780601f10610e5d57610100808354040283529160200191610e88565b820191906000526020600020905b815481529060010190602001808311610e6b57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610cae565b50505050905090565b610f0a8484846105fa565b610f1684848484611b1b565b50505050565b6060610f2782611566565b506000600660008481526020019081526020016000208054610f4890612e68565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7490612e68565b8015610fc15780601f10610f9657610100808354040283529160200191610fc1565b820191906000526020600020905b815481529060010190602001808311610fa457829003601f168201915b505050505090506000610fd2611cd2565b90506000815103610fe757819250505061102a565b60008251111561101c578082604051602001611004929190612f77565b6040516020818303038152906040529250505061102a565b61102584611ce9565b925050505b919050565b6110398484611d52565b6110878383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611e4b565b60005b611093336107fb565b81101561111357604051806020016040528085815250600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060008201518160000155905050808060010191505061108a565b506001600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111649190612fca565b925050819055506001600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111bb9190612fca565b9250508190555060006040518060a001604052808581526020016040518060400160405280600481526020017f4e616d650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600b81526020017f4465736372697074696f6e00000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f496d61676548617368000000000000000000000000000000000000000000000081525081526020013373ffffffffffffffffffffffffffffffffffffffff16815250905060098190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010190816112ed91906131a0565b50604082015181600201908161130391906131a0565b50606082015181600301908161131991906131a0565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61140661185f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114785760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161146f91906126de565b60405180910390fd5b611481816118e6565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061154f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061155f575061155e82611ea7565b5b9050919050565b60008061157283611f11565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115e557826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115dc9190612841565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6116408383836001611f4e565b505050565b60008061165184611f11565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461169357611692818486612113565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611724576116d5600085600080611f4e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146117a7576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b61186761162b565b73ffffffffffffffffffffffffffffffffffffffff16611885610bb8565b73ffffffffffffffffffffffffffffffffffffffff16146118e4576118a861162b565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016118db91906126de565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a1d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611a1491906126de565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b0e919061256d565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611ccc578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5f61162b565b8685856040518563ffffffff1660e01b8152600401611b8194939291906132c7565b6020604051808303816000875af1925050508015611bbd57506040513d601f19601f82011682018060405250810190611bba9190613328565b60015b611c41573d8060008114611bed576040519150601f19603f3d011682016040523d82523d6000602084013e611bf2565b606091505b506000815103611c3957836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c3091906126de565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611cca57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611cc191906126de565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060611cf482611566565b506000611cff611cd2565b90506000815111611d1f5760405180602001604052806000815250611d4a565b80611d29846121d7565b604051602001611d3a929190612f77565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611dc45760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611dbb91906126de565b60405180910390fd5b6000611dd283836000611645565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611e465760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611e3d91906126de565b60405180910390fd5b505050565b80600660008481526020019081526020016000209081611e6b91906131a0565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611e9b9190612841565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611f875750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156120bb576000611f9784611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561200257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156120155750612013818461136a565b155b1561205757826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161204e91906126de565b60405180910390fd5b81156120b957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61211e8383836122a5565b6121d257600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361219357806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161218a9190612841565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016121c9929190612ed0565b60405180910390fd5b505050565b6060600060016121e684612366565b01905060008167ffffffffffffffff81111561220557612204612b77565b5b6040519080825280601f01601f1916602001820160405280156122375781602001600182028036833780820191505090505b509050600082602001820190505b60011561229a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161228e5761228d613355565b5b04945060008503612245575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561235d57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061231e575061231d848461136a565b5b8061235c57508273ffffffffffffffffffffffffffffffffffffffff16612344836115ee565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123c4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816123ba576123b9613355565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612401576d04ee2d6d415b85acef810000000083816123f7576123f6613355565b5b0492506020810190505b662386f26fc10000831061243057662386f26fc10000838161242657612425613355565b5b0492506010810190505b6305f5e1008310612459576305f5e100838161244f5761244e613355565b5b0492506008810190505b612710831061247e57612710838161247457612473613355565b5b0492506004810190505b606483106124a1576064838161249757612496613355565b5b0492506002810190505b600a83106124b0576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612502816124cd565b811461250d57600080fd5b50565b60008135905061251f816124f9565b92915050565b60006020828403121561253b5761253a6124c3565b5b600061254984828501612510565b91505092915050565b60008115159050919050565b61256781612552565b82525050565b6000602082019050612582600083018461255e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125c25780820151818401526020810190506125a7565b60008484015250505050565b6000601f19601f8301169050919050565b60006125ea82612588565b6125f48185612593565b93506126048185602086016125a4565b61260d816125ce565b840191505092915050565b6000602082019050818103600083015261263281846125df565b905092915050565b6000819050919050565b61264d8161263a565b811461265857600080fd5b50565b60008135905061266a81612644565b92915050565b600060208284031215612686576126856124c3565b5b60006126948482850161265b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126c88261269d565b9050919050565b6126d8816126bd565b82525050565b60006020820190506126f360008301846126cf565b92915050565b612702816126bd565b811461270d57600080fd5b50565b60008135905061271f816126f9565b92915050565b6000806040838503121561273c5761273b6124c3565b5b600061274a85828601612710565b925050602061275b8582860161265b565b9150509250929050565b60008060006060848603121561277e5761277d6124c3565b5b600061278c86828701612710565b935050602061279d86828701612710565b92505060406127ae8682870161265b565b9150509250925092565b6000819050919050565b60006127dd6127d86127d38461269d565b6127b8565b61269d565b9050919050565b60006127ef826127c2565b9050919050565b6000612801826127e4565b9050919050565b612811816127f6565b82525050565b600060208201905061282c6000830184612808565b92915050565b61283b8161263a565b82525050565b60006020820190506128566000830184612832565b92915050565b600060208284031215612872576128716124c3565b5b600061288084828501612710565b91505092915050565b600080604083850312156128a05761289f6124c3565b5b60006128ae8582860161265b565b92505060206128bf85828601612710565b9150509250929050565b600060a0820190506128de6000830188612832565b81810360208301526128f081876125df565b9050818103604083015261290481866125df565b9050818103606083015261291881856125df565b905061292760808301846126cf565b9695505050505050565b61293a81612552565b811461294557600080fd5b50565b60008135905061295781612931565b92915050565b60008060408385031215612974576129736124c3565b5b600061298285828601612710565b925050602061299385828601612948565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129d28161263a565b82525050565b600082825260208201905092915050565b60006129f482612588565b6129fe81856129d8565b9350612a0e8185602086016125a4565b612a17816125ce565b840191505092915050565b612a2b816126bd565b82525050565b600060a083016000830151612a4960008601826129c9565b5060208301518482036020860152612a6182826129e9565b91505060408301518482036040860152612a7b82826129e9565b91505060608301518482036060860152612a9582826129e9565b9150506080830151612aaa6080860182612a22565b508091505092915050565b6000612ac18383612a31565b905092915050565b6000602082019050919050565b6000612ae18261299d565b612aeb81856129a8565b935083602082028501612afd856129b9565b8060005b85811015612b395784840389528151612b1a8582612ab5565b9450612b2583612ac9565b925060208a01995050600181019050612b01565b50829750879550505050505092915050565b60006020820190508181036000830152612b658184612ad6565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612baf826125ce565b810181811067ffffffffffffffff82111715612bce57612bcd612b77565b5b80604052505050565b6000612be16124b9565b9050612bed8282612ba6565b919050565b600067ffffffffffffffff821115612c0d57612c0c612b77565b5b612c16826125ce565b9050602081019050919050565b82818337600083830152505050565b6000612c45612c4084612bf2565b612bd7565b905082815260208101848484011115612c6157612c60612b72565b5b612c6c848285612c23565b509392505050565b600082601f830112612c8957612c88612b6d565b5b8135612c99848260208601612c32565b91505092915050565b60008060008060808587031215612cbc57612cbb6124c3565b5b6000612cca87828801612710565b9450506020612cdb87828801612710565b9350506040612cec8782880161265b565b925050606085013567ffffffffffffffff811115612d0d57612d0c6124c8565b5b612d1987828801612c74565b91505092959194509250565b600080fd5b600080fd5b60008083601f840112612d4557612d44612b6d565b5b8235905067ffffffffffffffff811115612d6257612d61612d25565b5b602083019150836001820283011115612d7e57612d7d612d2a565b5b9250929050565b60008060008060608587031215612d9f57612d9e6124c3565b5b6000612dad87828801612710565b9450506020612dbe8782880161265b565b935050604085013567ffffffffffffffff811115612ddf57612dde6124c8565b5b612deb87828801612d2f565b925092505092959194509250565b60008060408385031215612e1057612e0f6124c3565b5b6000612e1e85828601612710565b9250506020612e2f85828601612710565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e8057607f821691505b602082108103612e9357612e92612e39565b5b50919050565b6000606082019050612eae60008301866126cf565b612ebb6020830185612832565b612ec860408301846126cf565b949350505050565b6000604082019050612ee560008301856126cf565b612ef26020830184612832565b9392505050565b600081519050612f0881612644565b92915050565b600060208284031215612f2457612f236124c3565b5b6000612f3284828501612ef9565b91505092915050565b600081905092915050565b6000612f5182612588565b612f5b8185612f3b565b9350612f6b8185602086016125a4565b80840191505092915050565b6000612f838285612f46565b9150612f8f8284612f46565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fd58261263a565b9150612fe08361263a565b9250828201905080821115612ff857612ff7612f9b565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613023565b61306a8683613023565b95508019841693508086168417925050509392505050565b600061309d6130986130938461263a565b6127b8565b61263a565b9050919050565b6000819050919050565b6130b783613082565b6130cb6130c3826130a4565b848454613030565b825550505050565b600090565b6130e06130d3565b6130eb8184846130ae565b505050565b5b8181101561310f576131046000826130d8565b6001810190506130f1565b5050565b601f8211156131545761312581612ffe565b61312e84613013565b8101602085101561313d578190505b61315161314985613013565b8301826130f0565b50505b505050565b600082821c905092915050565b600061317760001984600802613159565b1980831691505092915050565b60006131908383613166565b9150826002028217905092915050565b6131a982612588565b67ffffffffffffffff8111156131c2576131c1612b77565b5b6131cc8254612e68565b6131d7828285613113565b600060209050601f83116001811461320a57600084156131f8578287015190505b6132028582613184565b86555061326a565b601f19841661321886612ffe565b60005b828110156132405784890151825560018201915060208501945060208101905061321b565b8683101561325d5784890151613259601f891682613166565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b600061329982613272565b6132a3818561327d565b93506132b38185602086016125a4565b6132bc816125ce565b840191505092915050565b60006080820190506132dc60008301876126cf565b6132e960208301866126cf565b6132f66040830185612832565b8181036060830152613308818461328e565b905095945050505050565b600081519050613322816124f9565b92915050565b60006020828403121561333e5761333d6124c3565b5b600061334c84828501613313565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220e37662c6aa77e81bbfd434a67fa600e33326d3614212429f998bd955b6d156e764736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75F2FC2C GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xA9149641 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA9149641 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xD3FC9864 EQ PUSH2 0x46D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B9 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x75F2FC2C EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0x8684E124 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x8BAAFE13 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3E7 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x2F745C59 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x41DE982E EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x30D JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x2CB7D92F EQ PUSH2 0x213 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x2525 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x184 SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x195 PUSH2 0x536 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x5C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x5FA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x21B PUSH2 0x6FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x246 SWAP2 SWAP1 PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x258 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x276 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x780 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x7C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F2 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x315 PUSH2 0x8B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x331 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32C SWAP2 SWAP1 PUSH2 0x2889 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x35C SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0x971 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x372 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x395 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x390 SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0xB6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A2 SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B3 PUSH2 0xBB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C0 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D1 PUSH2 0xBE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x401 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x295D JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x40B PUSH2 0xC8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x2B4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x43B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x2CA2 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x2670 JUMP JUMPDEST PUSH2 0xF1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x487 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x482 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH2 0x102F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x49E SWAP2 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B0 SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CE SWAP2 SWAP1 PUSH2 0x285C JUMP JUMPDEST PUSH2 0x13FE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x52F JUMPI POP PUSH2 0x52E DUP3 PUSH2 0x1484 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x545 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x571 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5BE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x593 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5BE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5A1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D3 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH2 0x5DD DUP3 PUSH2 0x15EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5F6 DUP3 DUP3 PUSH2 0x5F1 PUSH2 0x162B JUMP JUMPDEST PUSH2 0x1633 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x66C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x663 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x680 DUP4 DUP4 PUSH2 0x67B PUSH2 0x162B JUMP JUMPDEST PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6F6 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6ED SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E99 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E4 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEFF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F4 DUP3 PUSH2 0x1566 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8BD PUSH2 0x185F JUMP JUMPDEST PUSH2 0x8C7 PUSH1 0x0 PUSH2 0x18E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x55EEF303 DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x928 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x945 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x969 SWAP2 SWAP1 PUSH2 0x2F0E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x9AA SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9D6 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA23 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA23 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA06 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xA38 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA64 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAB1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA86 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAB1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA94 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0xAC6 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAF2 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB3F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB14 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB3F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB22 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xBF1 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC1D SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC6A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC3F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC6A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC4D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC86 PUSH2 0xC7F PUSH2 0x162B JUMP JUMPDEST DUP4 DUP4 PUSH2 0x19AC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xEF6 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xCEB SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD17 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD64 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD39 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD64 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD47 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0xD7D SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDA9 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDF6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDCB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDF6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDD9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xE0F SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE3B SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE88 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE5D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE88 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE6B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xCAE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF0A DUP5 DUP5 DUP5 PUSH2 0x5FA JUMP JUMPDEST PUSH2 0xF16 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1B1B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF27 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xF48 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF74 SWAP1 PUSH2 0x2E68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFC1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF96 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFC1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFA4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xFD2 PUSH2 0x1CD2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xFE7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x102A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x101C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1004 SWAP3 SWAP2 SWAP1 PUSH2 0x2F77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x102A JUMP JUMPDEST PUSH2 0x1025 DUP5 PUSH2 0x1CE9 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 DUP5 DUP5 PUSH2 0x1D52 JUMP JUMPDEST PUSH2 0x1087 DUP4 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x1E4B JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH2 0x1093 CALLER PUSH2 0x7FB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x108A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1164 SWAP2 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4E616D6500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4465736372697074696F6E000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x496D616765486173680000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x9 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1303 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0x1319 SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1406 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1478 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146F SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1481 DUP2 PUSH2 0x18E6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x154F JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x155F JUMPI POP PUSH2 0x155E DUP3 PUSH2 0x1EA7 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1572 DUP4 PUSH2 0x1F11 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15E5 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15DC SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1640 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1F4E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1651 DUP5 PUSH2 0x1F11 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1693 JUMPI PUSH2 0x1692 DUP2 DUP5 DUP7 PUSH2 0x2113 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1724 JUMPI PUSH2 0x16D5 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1F4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17A7 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1867 PUSH2 0x162B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1885 PUSH2 0xBB8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18E4 JUMPI PUSH2 0x18A8 PUSH2 0x162B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18DB SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A1D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A14 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1B0E SWAP2 SWAP1 PUSH2 0x256D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1CCC JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1B5F PUSH2 0x162B JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B81 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32C7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1BBD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BBA SWAP2 SWAP1 PUSH2 0x3328 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C41 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1C39 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C30 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1CCA JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CC1 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1CF4 DUP3 PUSH2 0x1566 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1CFF PUSH2 0x1CD2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1D1F JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D4A JUMP JUMPDEST DUP1 PUSH2 0x1D29 DUP5 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D3A SWAP3 SWAP2 SWAP1 PUSH2 0x2F77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DC4 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DBB SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DD2 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E46 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3D SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x31A0 JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1E9B SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1F87 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x20BB JUMPI PUSH1 0x0 PUSH2 0x1F97 DUP5 PUSH2 0x1566 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2002 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2015 JUMPI POP PUSH2 0x2013 DUP2 DUP5 PUSH2 0x136A JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2057 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x204E SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x20B9 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x211E DUP4 DUP4 DUP4 PUSH2 0x22A5 JUMP JUMPDEST PUSH2 0x21D2 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2193 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x218A SWAP2 SWAP1 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21C9 SWAP3 SWAP2 SWAP1 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x21E6 DUP5 PUSH2 0x2366 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2205 JUMPI PUSH2 0x2204 PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2237 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x229A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x228E JUMPI PUSH2 0x228D PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2245 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x235D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x231E JUMPI POP PUSH2 0x231D DUP5 DUP5 PUSH2 0x136A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x235C JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2344 DUP4 PUSH2 0x15EE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x23C4 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x23BA JUMPI PUSH2 0x23B9 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2401 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x23F7 JUMPI PUSH2 0x23F6 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2430 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2426 JUMPI PUSH2 0x2425 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2459 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x244F JUMPI PUSH2 0x244E PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x247E JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2474 JUMPI PUSH2 0x2473 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x24A1 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2497 JUMPI PUSH2 0x2496 PUSH2 0x3355 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24B0 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2502 DUP2 PUSH2 0x24CD JUMP JUMPDEST DUP2 EQ PUSH2 0x250D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x251F DUP2 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x253B JUMPI PUSH2 0x253A PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2549 DUP5 DUP3 DUP6 ADD PUSH2 0x2510 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2567 DUP2 PUSH2 0x2552 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2582 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x255E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25A7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25EA DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x25F4 DUP2 DUP6 PUSH2 0x2593 JUMP JUMPDEST SWAP4 POP PUSH2 0x2604 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x260D DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2632 DUP2 DUP5 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x264D DUP2 PUSH2 0x263A JUMP JUMPDEST DUP2 EQ PUSH2 0x2658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x266A DUP2 PUSH2 0x2644 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2686 JUMPI PUSH2 0x2685 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2694 DUP5 DUP3 DUP6 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C8 DUP3 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26D8 DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26F3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2702 DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP2 EQ PUSH2 0x270D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x271F DUP2 PUSH2 0x26F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x273C JUMPI PUSH2 0x273B PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x274A DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x275B DUP6 DUP3 DUP7 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x277E JUMPI PUSH2 0x277D PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x278C DUP7 DUP3 DUP8 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x279D DUP7 DUP3 DUP8 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x27AE DUP7 DUP3 DUP8 ADD PUSH2 0x265B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27DD PUSH2 0x27D8 PUSH2 0x27D3 DUP5 PUSH2 0x269D JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27EF DUP3 PUSH2 0x27C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2801 DUP3 PUSH2 0x27E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2811 DUP2 PUSH2 0x27F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x282C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2808 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x283B DUP2 PUSH2 0x263A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2856 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2832 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2872 JUMPI PUSH2 0x2871 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2880 DUP5 DUP3 DUP6 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A0 JUMPI PUSH2 0x289F PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28AE DUP6 DUP3 DUP7 ADD PUSH2 0x265B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x28DE PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2832 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x28F0 DUP2 DUP8 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2904 DUP2 DUP7 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2918 DUP2 DUP6 PUSH2 0x25DF JUMP JUMPDEST SWAP1 POP PUSH2 0x2927 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x293A DUP2 PUSH2 0x2552 JUMP JUMPDEST DUP2 EQ PUSH2 0x2945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2957 DUP2 PUSH2 0x2931 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2974 JUMPI PUSH2 0x2973 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2982 DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2993 DUP6 DUP3 DUP7 ADD PUSH2 0x2948 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29D2 DUP2 PUSH2 0x263A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F4 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x29FE DUP2 DUP6 PUSH2 0x29D8 JUMP JUMPDEST SWAP4 POP PUSH2 0x2A0E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x2A17 DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A2B DUP2 PUSH2 0x26BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x2A49 PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x29C9 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x2A61 DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2A7B DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2A95 DUP3 DUP3 PUSH2 0x29E9 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x2AAA PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x2A22 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AC1 DUP4 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AE1 DUP3 PUSH2 0x299D JUMP JUMPDEST PUSH2 0x2AEB DUP2 DUP6 PUSH2 0x29A8 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2AFD DUP6 PUSH2 0x29B9 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2B39 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x2B1A DUP6 DUP3 PUSH2 0x2AB5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2B25 DUP4 PUSH2 0x2AC9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2B01 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B65 DUP2 DUP5 PUSH2 0x2AD6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2BAF DUP3 PUSH2 0x25CE JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2BCE JUMPI PUSH2 0x2BCD PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BE1 PUSH2 0x24B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2BED DUP3 DUP3 PUSH2 0x2BA6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2C0D JUMPI PUSH2 0x2C0C PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH2 0x2C16 DUP3 PUSH2 0x25CE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C45 PUSH2 0x2C40 DUP5 PUSH2 0x2BF2 JUMP JUMPDEST PUSH2 0x2BD7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2C61 JUMPI PUSH2 0x2C60 PUSH2 0x2B72 JUMP JUMPDEST JUMPDEST PUSH2 0x2C6C DUP5 DUP3 DUP6 PUSH2 0x2C23 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C89 JUMPI PUSH2 0x2C88 PUSH2 0x2B6D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2C99 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2C32 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2CBC JUMPI PUSH2 0x2CBB PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CCA DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2CDB DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2CEC DUP8 DUP3 DUP9 ADD PUSH2 0x265B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D0D JUMPI PUSH2 0x2D0C PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST PUSH2 0x2D19 DUP8 DUP3 DUP9 ADD PUSH2 0x2C74 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2D45 JUMPI PUSH2 0x2D44 PUSH2 0x2B6D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D62 JUMPI PUSH2 0x2D61 PUSH2 0x2D25 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2D7E JUMPI PUSH2 0x2D7D PUSH2 0x2D2A JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2D9F JUMPI PUSH2 0x2D9E PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DAD DUP8 DUP3 DUP9 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2DBE DUP8 DUP3 DUP9 ADD PUSH2 0x265B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DDF JUMPI PUSH2 0x2DDE PUSH2 0x24C8 JUMP JUMPDEST JUMPDEST PUSH2 0x2DEB DUP8 DUP3 DUP9 ADD PUSH2 0x2D2F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E10 JUMPI PUSH2 0x2E0F PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E1E DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E2F DUP6 DUP3 DUP7 ADD PUSH2 0x2710 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2E80 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2E93 JUMPI PUSH2 0x2E92 PUSH2 0x2E39 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2EAE PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x2EBB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2832 JUMP JUMPDEST PUSH2 0x2EC8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x26CF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EE5 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x2EF2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2832 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2F08 DUP2 PUSH2 0x2644 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F24 JUMPI PUSH2 0x2F23 PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F32 DUP5 DUP3 DUP6 ADD PUSH2 0x2EF9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F51 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH2 0x2F5B DUP2 DUP6 PUSH2 0x2F3B JUMP JUMPDEST SWAP4 POP PUSH2 0x2F6B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F83 DUP3 DUP6 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8F DUP3 DUP5 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2FD5 DUP3 PUSH2 0x263A JUMP JUMPDEST SWAP2 POP PUSH2 0x2FE0 DUP4 PUSH2 0x263A JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2FF8 JUMPI PUSH2 0x2FF7 PUSH2 0x2F9B JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3060 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3023 JUMP JUMPDEST PUSH2 0x306A DUP7 DUP4 PUSH2 0x3023 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309D PUSH2 0x3098 PUSH2 0x3093 DUP5 PUSH2 0x263A JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST PUSH2 0x263A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30B7 DUP4 PUSH2 0x3082 JUMP JUMPDEST PUSH2 0x30CB PUSH2 0x30C3 DUP3 PUSH2 0x30A4 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3030 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x30E0 PUSH2 0x30D3 JUMP JUMPDEST PUSH2 0x30EB DUP2 DUP5 DUP5 PUSH2 0x30AE JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x310F JUMPI PUSH2 0x3104 PUSH1 0x0 DUP3 PUSH2 0x30D8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x30F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3154 JUMPI PUSH2 0x3125 DUP2 PUSH2 0x2FFE JUMP JUMPDEST PUSH2 0x312E DUP5 PUSH2 0x3013 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x313D JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3151 PUSH2 0x3149 DUP6 PUSH2 0x3013 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x30F0 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3177 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3159 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3190 DUP4 DUP4 PUSH2 0x3166 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x31A9 DUP3 PUSH2 0x2588 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31C2 JUMPI PUSH2 0x31C1 PUSH2 0x2B77 JUMP JUMPDEST JUMPDEST PUSH2 0x31CC DUP3 SLOAD PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x31D7 DUP3 DUP3 DUP6 PUSH2 0x3113 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x320A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x31F8 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3202 DUP6 DUP3 PUSH2 0x3184 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x326A JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3218 DUP7 PUSH2 0x2FFE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3240 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x321B JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x325D JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3259 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3166 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3299 DUP3 PUSH2 0x3272 JUMP JUMPDEST PUSH2 0x32A3 DUP2 DUP6 PUSH2 0x327D JUMP JUMPDEST SWAP4 POP PUSH2 0x32B3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25A4 JUMP JUMPDEST PUSH2 0x32BC DUP2 PUSH2 0x25CE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x32DC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x32E9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x26CF JUMP JUMPDEST PUSH2 0x32F6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2832 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3308 DUP2 DUP5 PUSH2 0x328E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3322 DUP2 PUSH2 0x24F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x333E JUMPI PUSH2 0x333D PUSH2 0x24C3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x334C DUP5 DUP3 DUP6 ADD PUSH2 0x3313 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 PUSH23 0x62C6AA77E81BBFD434A67FA600E33326D3614212429F99 DUP12 0xD9 SSTORE 0xB6 0xD1 JUMP 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"395:2264:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;937:207:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3323:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4143:578;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;446:30:18;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2182:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1904:109;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4787:132:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2185:118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:1;;;:::i;:::-;;2500:156:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;662:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;2069:107;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3718:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2379:92:18;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4985:208:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1210:593:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1259:557:18;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3928:153:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;937:207:9;1039:4;760:10;753:18;;1062:35;;;:11;:35;;;;:75;;;;1101:36;1125:11;1101:23;:36::i;:::-;1062:75;1055:82;;937:207;;;:::o;2365:89:6:-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;3323:113::-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;4143:578::-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;446:30:18:-;;;;;;;;;;;;;:::o;2182:163::-;2263:7;2288:26;:34;2315:6;2288:34;;;;;;;;;;;;;;;:42;2323:6;2288:42;;;;;;;;;;;:50;;;2281:57;;2182:163;;;;:::o;1904:109::-;1962:7;1988:11;:18;2000:5;1988:18;;;;;;;;;;;;;;;;1981:25;;1904:109;;;:::o;4787:132:6:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2185:118::-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;1920:208::-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;2293:101:1:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;2500:156:18:-;2576:7;2602:15;;;;;;;;;;;:31;;;2634:5;2641:7;2602:47;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2595:54;;2500:156;;;;:::o;662:24::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2069:107::-;2126:7;2152:10;:17;2163:5;2152:17;;;;;;;;;;;;;;;;2145:24;;2069:107;;;:::o;1638:85:1:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2518:93:6:-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;3718:144::-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;2379:92:18:-;2422:16;2457:7;2450:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2379:92;:::o;4985:208:6:-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;1210:593:9:-;1283:13;1308:22;1322:7;1308:13;:22::i;:::-;;1341:23;1367:10;:19;1378:7;1367:19;;;;;;;;;;;1341:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:18;1417:10;:8;:10::i;:::-;1396:31;;1522:1;1506:4;1500:18;:23;1496:70;;1546:9;1539:16;;;;;;1496:70;1691:1;1671:9;1665:23;:27;1661:95;;;1729:4;1735:9;1715:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1708:37;;;;;;1661:95;1773:23;1788:7;1773:14;:23::i;:::-;1766:30;;;;1210:593;;;;:::o;1259:557:18:-;1338:18;1344:3;1348:7;1338:5;:18::i;:::-;1363:26;1376:7;1384:4;;1363:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:26::i;:::-;1408:6;1404:161;1423:21;1433:10;1423:9;:21::i;:::-;1419:1;:25;1404:161;;;1500:54;;;;;;;;1532:7;1500:54;;;1463:26;:31;1490:3;1463:31;;;;;;;;;;;;;;;:34;1495:1;1463:34;;;;;;;;;;;:91;;;;;;;;;;;1445:3;;;;;;;1404:161;;;;1621:1;1601:11;:16;1613:3;1601:16;;;;;;;;;;;;;;;;:21;;;;;;;:::i;:::-;;;;;;;;1679:1;1660:10;:15;1671:3;1660:15;;;;;;;;;;;;;;;;:20;;;;;;;:::i;:::-;;;;;;;;1692:21;1716:64;;;;;;;;1724:7;1716:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1769:10;1716:64;;;;;1692:88;;1790:7;1803:6;1790:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1331:485;1259:557;;;;:::o;3928:153:6:-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;2543:215:1:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1561:300:6:-;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;16138:241::-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;656:96:11:-;709:7;735:10;728:17;;656:96;:::o;14418:120:6:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;8838:795::-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;1796:162:1:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;15591:312:6:-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;3174:92::-;3225:13;3250:9;;;;;;;;;;;;;;3174:92;:::o;2677:255::-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;:8;:10::i;:::-;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;;;2677:255;;;:::o;9955:327::-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;1922:167:9:-;2035:9;2013:10;:19;2024:7;2013:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;2059:23;2074:7;2059:23;;;;;;:::i;:::-;;;;;;;;1922:167;;:::o;762:146:13:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;5707:115:6:-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;637:698:12:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;975:6;971:2;967:15;959:6;955:28;948:35;;1010:282;1017:4;1010:282;;;1041:5;;;;;;;;1180:10;1175:2;1168:5;1164:14;1159:32;1154:3;1146:46;1236:2;1227:11;;;;;;:::i;:::-;;;;;1269:1;1260:5;:10;1010:282;1256:21;1010:282;1312:6;1305:13;;;;;637:698;;;:::o;6376:272:6:-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;12214:916:15:-;12267:7;12286:14;12303:1;12286:18;;12351:8;12342:5;:17;12338:103;;12388:8;12379:17;;;;;;:::i;:::-;;;;;12424:2;12414:12;;;;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;;;;:::i;:::-;;;;;12540:2;12530:12;;;;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;;;;:::i;:::-;;;;;12656:2;12646:12;;;;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;;;;:::i;:::-;;;;;12770:1;12760:11;;;;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;;;;:::i;:::-;;;;;12883:1;12873:11;;;;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;;;;:::i;:::-;;;;;12996:1;12986:11;;;;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;;;;13025:66;13117:6;13110:13;;;12214:916;;;:::o;7:75:20:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:619::-;4969:6;4977;4985;5034:2;5022:9;5013:7;5009:23;5005:32;5002:119;;;5040:79;;:::i;:::-;5002:119;5160:1;5185:53;5230:7;5221:6;5210:9;5206:22;5185:53;:::i;:::-;5175:63;;5131:117;5287:2;5313:53;5358:7;5349:6;5338:9;5334:22;5313:53;:::i;:::-;5303:63;;5258:118;5415:2;5441:53;5486:7;5477:6;5466:9;5462:22;5441:53;:::i;:::-;5431:63;;5386:118;4892:619;;;;;:::o;5517:60::-;5545:3;5566:5;5559:12;;5517:60;;;:::o;5583:142::-;5633:9;5666:53;5684:34;5693:24;5711:5;5693:24;:::i;:::-;5684:34;:::i;:::-;5666:53;:::i;:::-;5653:66;;5583:142;;;:::o;5731:126::-;5781:9;5814:37;5845:5;5814:37;:::i;:::-;5801:50;;5731:126;;;:::o;5863:142::-;5929:9;5962:37;5993:5;5962:37;:::i;:::-;5949:50;;5863:142;;;:::o;6011:163::-;6114:53;6161:5;6114:53;:::i;:::-;6109:3;6102:66;6011:163;;:::o;6180:254::-;6289:4;6327:2;6316:9;6312:18;6304:26;;6340:87;6424:1;6413:9;6409:17;6400:6;6340:87;:::i;:::-;6180:254;;;;:::o;6440:118::-;6527:24;6545:5;6527:24;:::i;:::-;6522:3;6515:37;6440:118;;:::o;6564:222::-;6657:4;6695:2;6684:9;6680:18;6672:26;;6708:71;6776:1;6765:9;6761:17;6752:6;6708:71;:::i;:::-;6564:222;;;;:::o;6792:329::-;6851:6;6900:2;6888:9;6879:7;6875:23;6871:32;6868:119;;;6906:79;;:::i;:::-;6868:119;7026:1;7051:53;7096:7;7087:6;7076:9;7072:22;7051:53;:::i;:::-;7041:63;;6997:117;6792:329;;;;:::o;7127:474::-;7195:6;7203;7252:2;7240:9;7231:7;7227:23;7223:32;7220:119;;;7258:79;;:::i;:::-;7220:119;7378:1;7403:53;7448:7;7439:6;7428:9;7424:22;7403:53;:::i;:::-;7393:63;;7349:117;7505:2;7531:53;7576:7;7567:6;7556:9;7552:22;7531:53;:::i;:::-;7521:63;;7476:118;7127:474;;;;;:::o;7607:937::-;7872:4;7910:3;7899:9;7895:19;7887:27;;7924:71;7992:1;7981:9;7977:17;7968:6;7924:71;:::i;:::-;8042:9;8036:4;8032:20;8027:2;8016:9;8012:18;8005:48;8070:78;8143:4;8134:6;8070:78;:::i;:::-;8062:86;;8195:9;8189:4;8185:20;8180:2;8169:9;8165:18;8158:48;8223:78;8296:4;8287:6;8223:78;:::i;:::-;8215:86;;8348:9;8342:4;8338:20;8333:2;8322:9;8318:18;8311:48;8376:78;8449:4;8440:6;8376:78;:::i;:::-;8368:86;;8464:73;8532:3;8521:9;8517:19;8508:6;8464:73;:::i;:::-;7607:937;;;;;;;;:::o;8550:116::-;8620:21;8635:5;8620:21;:::i;:::-;8613:5;8610:32;8600:60;;8656:1;8653;8646:12;8600:60;8550:116;:::o;8672:133::-;8715:5;8753:6;8740:20;8731:29;;8769:30;8793:5;8769:30;:::i;:::-;8672:133;;;;:::o;8811:468::-;8876:6;8884;8933:2;8921:9;8912:7;8908:23;8904:32;8901:119;;;8939:79;;:::i;:::-;8901:119;9059:1;9084:53;9129:7;9120:6;9109:9;9105:22;9084:53;:::i;:::-;9074:63;;9030:117;9186:2;9212:50;9254:7;9245:6;9234:9;9230:22;9212:50;:::i;:::-;9202:60;;9157:115;8811:468;;;;;:::o;9285:139::-;9377:6;9411:5;9405:12;9395:22;;9285:139;;;:::o;9430:209::-;9554:11;9588:6;9583:3;9576:19;9628:4;9623:3;9619:14;9604:29;;9430:209;;;;:::o;9645:157::-;9737:4;9760:3;9752:11;;9790:4;9785:3;9781:14;9773:22;;9645:157;;;:::o;9808:108::-;9885:24;9903:5;9885:24;:::i;:::-;9880:3;9873:37;9808:108;;:::o;9922:159::-;9996:11;10030:6;10025:3;10018:19;10070:4;10065:3;10061:14;10046:29;;9922:159;;;;:::o;10087:357::-;10165:3;10193:39;10226:5;10193:39;:::i;:::-;10248:61;10302:6;10297:3;10248:61;:::i;:::-;10241:68;;10318:65;10376:6;10371:3;10364:4;10357:5;10353:16;10318:65;:::i;:::-;10408:29;10430:6;10408:29;:::i;:::-;10403:3;10399:39;10392:46;;10169:275;10087:357;;;;:::o;10450:108::-;10527:24;10545:5;10527:24;:::i;:::-;10522:3;10515:37;10450:108;;:::o;10612:1274::-;10721:3;10757:4;10752:3;10748:14;10847:4;10840:5;10836:16;10830:23;10866:63;10923:4;10918:3;10914:14;10900:12;10866:63;:::i;:::-;10772:167;11021:4;11014:5;11010:16;11004:23;11074:3;11068:4;11064:14;11057:4;11052:3;11048:14;11041:38;11100:73;11168:4;11154:12;11100:73;:::i;:::-;11092:81;;10949:235;11273:4;11266:5;11262:16;11256:23;11326:3;11320:4;11316:14;11309:4;11304:3;11300:14;11293:38;11352:73;11420:4;11406:12;11352:73;:::i;:::-;11344:81;;11194:242;11519:4;11512:5;11508:16;11502:23;11572:3;11566:4;11562:14;11555:4;11550:3;11546:14;11539:38;11598:73;11666:4;11652:12;11598:73;:::i;:::-;11590:81;;11446:236;11767:4;11760:5;11756:16;11750:23;11786:63;11843:4;11838:3;11834:14;11820:12;11786:63;:::i;:::-;11692:167;11876:4;11869:11;;10726:1160;10612:1274;;;;:::o;11892:256::-;12011:10;12046:96;12138:3;12130:6;12046:96;:::i;:::-;12032:110;;11892:256;;;;:::o;12154:138::-;12249:4;12281;12276:3;12272:14;12264:22;;12154:138;;;:::o;12350:1111::-;12519:3;12548:79;12621:5;12548:79;:::i;:::-;12643:111;12747:6;12742:3;12643:111;:::i;:::-;12636:118;;12780:3;12825:4;12817:6;12813:17;12808:3;12804:27;12855:81;12930:5;12855:81;:::i;:::-;12959:7;12990:1;12975:441;13000:6;12997:1;12994:13;12975:441;;;13071:9;13065:4;13061:20;13056:3;13049:33;13122:6;13116:13;13150:114;13259:4;13244:13;13150:114;:::i;:::-;13142:122;;13287:85;13365:6;13287:85;:::i;:::-;13277:95;;13401:4;13396:3;13392:14;13385:21;;13035:381;13022:1;13019;13015:9;13010:14;;12975:441;;;12979:14;13432:4;13425:11;;13452:3;13445:10;;12524:937;;;;;12350:1111;;;;:::o;13467:473::-;13660:4;13698:2;13687:9;13683:18;13675:26;;13747:9;13741:4;13737:20;13733:1;13722:9;13718:17;13711:47;13775:158;13928:4;13919:6;13775:158;:::i;:::-;13767:166;;13467:473;;;;:::o;13946:117::-;14055:1;14052;14045:12;14069:117;14178:1;14175;14168:12;14192:180;14240:77;14237:1;14230:88;14337:4;14334:1;14327:15;14361:4;14358:1;14351:15;14378:281;14461:27;14483:4;14461:27;:::i;:::-;14453:6;14449:40;14591:6;14579:10;14576:22;14555:18;14543:10;14540:34;14537:62;14534:88;;;14602:18;;:::i;:::-;14534:88;14642:10;14638:2;14631:22;14421:238;14378:281;;:::o;14665:129::-;14699:6;14726:20;;:::i;:::-;14716:30;;14755:33;14783:4;14775:6;14755:33;:::i;:::-;14665:129;;;:::o;14800:307::-;14861:4;14951:18;14943:6;14940:30;14937:56;;;14973:18;;:::i;:::-;14937:56;15011:29;15033:6;15011:29;:::i;:::-;15003:37;;15095:4;15089;15085:15;15077:23;;14800:307;;;:::o;15113:148::-;15211:6;15206:3;15201;15188:30;15252:1;15243:6;15238:3;15234:16;15227:27;15113:148;;;:::o;15267:423::-;15344:5;15369:65;15385:48;15426:6;15385:48;:::i;:::-;15369:65;:::i;:::-;15360:74;;15457:6;15450:5;15443:21;15495:4;15488:5;15484:16;15533:3;15524:6;15519:3;15515:16;15512:25;15509:112;;;15540:79;;:::i;:::-;15509:112;15630:54;15677:6;15672:3;15667;15630:54;:::i;:::-;15350:340;15267:423;;;;;:::o;15709:338::-;15764:5;15813:3;15806:4;15798:6;15794:17;15790:27;15780:122;;15821:79;;:::i;:::-;15780:122;15938:6;15925:20;15963:78;16037:3;16029:6;16022:4;16014:6;16010:17;15963:78;:::i;:::-;15954:87;;15770:277;15709:338;;;;:::o;16053:943::-;16148:6;16156;16164;16172;16221:3;16209:9;16200:7;16196:23;16192:33;16189:120;;;16228:79;;:::i;:::-;16189:120;16348:1;16373:53;16418:7;16409:6;16398:9;16394:22;16373:53;:::i;:::-;16363:63;;16319:117;16475:2;16501:53;16546:7;16537:6;16526:9;16522:22;16501:53;:::i;:::-;16491:63;;16446:118;16603:2;16629:53;16674:7;16665:6;16654:9;16650:22;16629:53;:::i;:::-;16619:63;;16574:118;16759:2;16748:9;16744:18;16731:32;16790:18;16782:6;16779:30;16776:117;;;16812:79;;:::i;:::-;16776:117;16917:62;16971:7;16962:6;16951:9;16947:22;16917:62;:::i;:::-;16907:72;;16702:287;16053:943;;;;;;;:::o;17002:117::-;17111:1;17108;17101:12;17125:117;17234:1;17231;17224:12;17262:553;17320:8;17330:6;17380:3;17373:4;17365:6;17361:17;17357:27;17347:122;;17388:79;;:::i;:::-;17347:122;17501:6;17488:20;17478:30;;17531:18;17523:6;17520:30;17517:117;;;17553:79;;:::i;:::-;17517:117;17667:4;17659:6;17655:17;17643:29;;17721:3;17713:4;17705:6;17701:17;17691:8;17687:32;17684:41;17681:128;;;17728:79;;:::i;:::-;17681:128;17262:553;;;;;:::o;17821:819::-;17910:6;17918;17926;17934;17983:2;17971:9;17962:7;17958:23;17954:32;17951:119;;;17989:79;;:::i;:::-;17951:119;18109:1;18134:53;18179:7;18170:6;18159:9;18155:22;18134:53;:::i;:::-;18124:63;;18080:117;18236:2;18262:53;18307:7;18298:6;18287:9;18283:22;18262:53;:::i;:::-;18252:63;;18207:118;18392:2;18381:9;18377:18;18364:32;18423:18;18415:6;18412:30;18409:117;;;18445:79;;:::i;:::-;18409:117;18558:65;18615:7;18606:6;18595:9;18591:22;18558:65;:::i;:::-;18540:83;;;;18335:298;17821:819;;;;;;;:::o;18646:474::-;18714:6;18722;18771:2;18759:9;18750:7;18746:23;18742:32;18739:119;;;18777:79;;:::i;:::-;18739:119;18897:1;18922:53;18967:7;18958:6;18947:9;18943:22;18922:53;:::i;:::-;18912:63;;18868:117;19024:2;19050:53;19095:7;19086:6;19075:9;19071:22;19050:53;:::i;:::-;19040:63;;18995:118;18646:474;;;;;:::o;19126:180::-;19174:77;19171:1;19164:88;19271:4;19268:1;19261:15;19295:4;19292:1;19285:15;19312:320;19356:6;19393:1;19387:4;19383:12;19373:22;;19440:1;19434:4;19430:12;19461:18;19451:81;;19517:4;19509:6;19505:17;19495:27;;19451:81;19579:2;19571:6;19568:14;19548:18;19545:38;19542:84;;19598:18;;:::i;:::-;19542:84;19363:269;19312:320;;;:::o;19638:442::-;19787:4;19825:2;19814:9;19810:18;19802:26;;19838:71;19906:1;19895:9;19891:17;19882:6;19838:71;:::i;:::-;19919:72;19987:2;19976:9;19972:18;19963:6;19919:72;:::i;:::-;20001;20069:2;20058:9;20054:18;20045:6;20001:72;:::i;:::-;19638:442;;;;;;:::o;20086:332::-;20207:4;20245:2;20234:9;20230:18;20222:26;;20258:71;20326:1;20315:9;20311:17;20302:6;20258:71;:::i;:::-;20339:72;20407:2;20396:9;20392:18;20383:6;20339:72;:::i;:::-;20086:332;;;;;:::o;20424:143::-;20481:5;20512:6;20506:13;20497:22;;20528:33;20555:5;20528:33;:::i;:::-;20424:143;;;;:::o;20573:351::-;20643:6;20692:2;20680:9;20671:7;20667:23;20663:32;20660:119;;;20698:79;;:::i;:::-;20660:119;20818:1;20843:64;20899:7;20890:6;20879:9;20875:22;20843:64;:::i;:::-;20833:74;;20789:128;20573:351;;;;:::o;20930:148::-;21032:11;21069:3;21054:18;;20930:148;;;;:::o;21084:390::-;21190:3;21218:39;21251:5;21218:39;:::i;:::-;21273:89;21355:6;21350:3;21273:89;:::i;:::-;21266:96;;21371:65;21429:6;21424:3;21417:4;21410:5;21406:16;21371:65;:::i;:::-;21461:6;21456:3;21452:16;21445:23;;21194:280;21084:390;;;;:::o;21480:435::-;21660:3;21682:95;21773:3;21764:6;21682:95;:::i;:::-;21675:102;;21794:95;21885:3;21876:6;21794:95;:::i;:::-;21787:102;;21906:3;21899:10;;21480:435;;;;;:::o;21921:180::-;21969:77;21966:1;21959:88;22066:4;22063:1;22056:15;22090:4;22087:1;22080:15;22107:191;22147:3;22166:20;22184:1;22166:20;:::i;:::-;22161:25;;22200:20;22218:1;22200:20;:::i;:::-;22195:25;;22243:1;22240;22236:9;22229:16;;22264:3;22261:1;22258:10;22255:36;;;22271:18;;:::i;:::-;22255:36;22107:191;;;;:::o;22304:141::-;22353:4;22376:3;22368:11;;22399:3;22396:1;22389:14;22433:4;22430:1;22420:18;22412:26;;22304:141;;;:::o;22451:93::-;22488:6;22535:2;22530;22523:5;22519:14;22515:23;22505:33;;22451:93;;;:::o;22550:107::-;22594:8;22644:5;22638:4;22634:16;22613:37;;22550:107;;;;:::o;22663:393::-;22732:6;22782:1;22770:10;22766:18;22805:97;22835:66;22824:9;22805:97;:::i;:::-;22923:39;22953:8;22942:9;22923:39;:::i;:::-;22911:51;;22995:4;22991:9;22984:5;22980:21;22971:30;;23044:4;23034:8;23030:19;23023:5;23020:30;23010:40;;22739:317;;22663:393;;;;;:::o;23062:142::-;23112:9;23145:53;23163:34;23172:24;23190:5;23172:24;:::i;:::-;23163:34;:::i;:::-;23145:53;:::i;:::-;23132:66;;23062:142;;;:::o;23210:75::-;23253:3;23274:5;23267:12;;23210:75;;;:::o;23291:269::-;23401:39;23432:7;23401:39;:::i;:::-;23462:91;23511:41;23535:16;23511:41;:::i;:::-;23503:6;23496:4;23490:11;23462:91;:::i;:::-;23456:4;23449:105;23367:193;23291:269;;;:::o;23566:73::-;23611:3;23566:73;:::o;23645:189::-;23722:32;;:::i;:::-;23763:65;23821:6;23813;23807:4;23763:65;:::i;:::-;23698:136;23645:189;;:::o;23840:186::-;23900:120;23917:3;23910:5;23907:14;23900:120;;;23971:39;24008:1;24001:5;23971:39;:::i;:::-;23944:1;23937:5;23933:13;23924:22;;23900:120;;;23840:186;;:::o;24032:543::-;24133:2;24128:3;24125:11;24122:446;;;24167:38;24199:5;24167:38;:::i;:::-;24251:29;24269:10;24251:29;:::i;:::-;24241:8;24237:44;24434:2;24422:10;24419:18;24416:49;;;24455:8;24440:23;;24416:49;24478:80;24534:22;24552:3;24534:22;:::i;:::-;24524:8;24520:37;24507:11;24478:80;:::i;:::-;24137:431;;24122:446;24032:543;;;:::o;24581:117::-;24635:8;24685:5;24679:4;24675:16;24654:37;;24581:117;;;;:::o;24704:169::-;24748:6;24781:51;24829:1;24825:6;24817:5;24814:1;24810:13;24781:51;:::i;:::-;24777:56;24862:4;24856;24852:15;24842:25;;24755:118;24704:169;;;;:::o;24878:295::-;24954:4;25100:29;25125:3;25119:4;25100:29;:::i;:::-;25092:37;;25162:3;25159:1;25155:11;25149:4;25146:21;25138:29;;24878:295;;;;:::o;25178:1395::-;25295:37;25328:3;25295:37;:::i;:::-;25397:18;25389:6;25386:30;25383:56;;;25419:18;;:::i;:::-;25383:56;25463:38;25495:4;25489:11;25463:38;:::i;:::-;25548:67;25608:6;25600;25594:4;25548:67;:::i;:::-;25642:1;25666:4;25653:17;;25698:2;25690:6;25687:14;25715:1;25710:618;;;;26372:1;26389:6;26386:77;;;26438:9;26433:3;26429:19;26423:26;26414:35;;26386:77;26489:67;26549:6;26542:5;26489:67;:::i;:::-;26483:4;26476:81;26345:222;25680:887;;25710:618;25762:4;25758:9;25750:6;25746:22;25796:37;25828:4;25796:37;:::i;:::-;25855:1;25869:208;25883:7;25880:1;25877:14;25869:208;;;25962:9;25957:3;25953:19;25947:26;25939:6;25932:42;26013:1;26005:6;26001:14;25991:24;;26060:2;26049:9;26045:18;26032:31;;25906:4;25903:1;25899:12;25894:17;;25869:208;;;26105:6;26096:7;26093:19;26090:179;;;26163:9;26158:3;26154:19;26148:26;26206:48;26248:4;26240:6;26236:17;26225:9;26206:48;:::i;:::-;26198:6;26191:64;26113:156;26090:179;26315:1;26311;26303:6;26299:14;26295:22;26289:4;26282:36;25717:611;;;25680:887;;25270:1303;;;25178:1395;;:::o;26579:98::-;26630:6;26664:5;26658:12;26648:22;;26579:98;;;:::o;26683:168::-;26766:11;26800:6;26795:3;26788:19;26840:4;26835:3;26831:14;26816:29;;26683:168;;;;:::o;26857:373::-;26943:3;26971:38;27003:5;26971:38;:::i;:::-;27025:70;27088:6;27083:3;27025:70;:::i;:::-;27018:77;;27104:65;27162:6;27157:3;27150:4;27143:5;27139:16;27104:65;:::i;:::-;27194:29;27216:6;27194:29;:::i;:::-;27189:3;27185:39;27178:46;;26947:283;26857:373;;;;:::o;27236:640::-;27431:4;27469:3;27458:9;27454:19;27446:27;;27483:71;27551:1;27540:9;27536:17;27527:6;27483:71;:::i;:::-;27564:72;27632:2;27621:9;27617:18;27608:6;27564:72;:::i;:::-;27646;27714:2;27703:9;27699:18;27690:6;27646:72;:::i;:::-;27765:9;27759:4;27755:20;27750:2;27739:9;27735:18;27728:48;27793:76;27864:4;27855:6;27793:76;:::i;:::-;27785:84;;27236:640;;;;;;;:::o;27882:141::-;27938:5;27969:6;27963:13;27954:22;;27985:32;28011:5;27985:32;:::i;:::-;27882:141;;;;:::o;28029:349::-;28098:6;28147:2;28135:9;28126:7;28122:23;28118:32;28115:119;;;28153:79;;:::i;:::-;28115:119;28273:1;28298:63;28353:7;28344:6;28333:9;28329:22;28298:63;:::i;:::-;28288:73;;28244:127;28029:349;;;;:::o;28384:180::-;28432:77;28429:1;28422:88;28529:4;28526:1;28519:15;28553:4;28550:1;28543:15"},"gasEstimates":{"creation":{"codeDepositCost":"2648400","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"infinite","contentContract()":"infinite","getApproved(uint256)":"infinite","getNftFeed()":"infinite","getNftPrice(uint256,address)":"infinite","isApprovedForAll(address,address)":"infinite","mint(address,uint256,string)":"infinite","name()":"infinite","nftFeed(uint256)":"infinite","nftsMinted(address)":"2886","nftsOwned(address)":"2908","owner()":"2611","ownerOf(uint256)":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"892","symbol()":"infinite","tokenOfOwnerByIndex(address,uint256)":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","contentContract()":"2cb7d92f","getApproved(uint256)":"081812fc","getNftFeed()":"a9149641","getNftPrice(uint256,address)":"75f2fc2c","isApprovedForAll(address,address)":"e985e9c5","mint(address,uint256,string)":"d3fc9864","name()":"06fdde03","nftFeed(uint256)":"8684e124","nftsMinted(address)":"41de982e","nftsOwned(address)":"8baafe13","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contentContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentContract\",\"outputs\":[{\"internalType\":\"contract Content\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftFeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Nft.NftData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getNftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nftsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nftsOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256,string)\":{\"notice\":\"Functions\"},\"nftsMinted(address)\":{\"notice\":\"Getter Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"Nft\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Content.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {PriceConvertor} from \\\"./PriceConvertor.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Content{\\n    //set the price of a content using content id\\n    //buy content\\n    //allow users to access content only when purchased\\n    IERC721 public nftContract;\\n\\n    using PriceConvertor for uint256;\\n\\n    //errors\\n    error Content__PriceMustNotBeZero();\\n    error Content__ContentAlreadyPurchased();\\n    error Content__TransactionFailed();\\n    error Content__ContentPurchaseError();\\n    error Content__ContentIdDoesNotExist();\\n\\n    //events\\n    event ContentPriceSet(address indexed owner,uint256 indexed price);\\n\\n    mapping(address => mapping(uint256 => uint256)) public addressToContentToPrice;\\n    mapping(address => bool) public contentPurchased;\\n    mapping(address => uint256) public addressToContent;\\n    \\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeed,address nftContractAddress){\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        nftContract = IERC721(nftContractAddress);\\n    }\\n\\n    function setContentPrice(uint256 content_id,uint256 price) public{\\n        if(price <= 0){\\n            revert Content__PriceMustNotBeZero();\\n        }\\n        addressToContentToPrice[msg.sender][content_id] = price.getConversionRate(s_priceFeed);\\n        addressToContent[msg.sender] = content_id;\\n        emit ContentPriceSet(msg.sender,price);\\n    }\\n\\n    function buyContent(address owner,uint256 content_id) public payable{\\n        //check if content id exist\\n        if(nftContract.ownerOf(content_id) != owner){\\n           revert Content__ContentIdDoesNotExist();\\n        }\\n        //check if the content is already purchased\\n        if(contentPurchased[msg.sender] == true){\\n            revert Content__ContentAlreadyPurchased();\\n        }\\n        if(msg.value.getConversionRate(s_priceFeed) == addressToContentToPrice[owner][content_id]){\\n            contentPurchased[msg.sender] = true;\\n            (bool success,) = owner.call{value : msg.value.getConversionRate(s_priceFeed)}(\\\"\\\");\\n           if(!success){\\n            revert Content__TransactionFailed();\\n           } \\n        }\\n        else revert Content__ContentPurchaseError();\\n    }\\n\\n    function setNftContract(address _nftContractAddress) external {\\n         nftContract = IERC721(_nftContractAddress);\\n    }\\n\\n\\n    //getter functions\\n    function getContentPrice(address owner,uint256 content_id) public view returns(uint256){\\n        return addressToContentToPrice[owner][content_id];\\n    }\\n\\n    function getContentAccess(address user) public view returns (bool){\\n        return contentPurchased[user];\\n    }\\n\\n    function getContentId(address user) public view returns (uint256){\\n        return addressToContent[user];\\n    }\\n}\",\"keccak256\":\"0xc5f1bc00a1db44ea59d1c9bb784d7886b68e0710b32de5578d137e9071ed3e5e\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title  Nft  Contract\\n * @author Owusu Nelson Osei Tutu\\n * @notice A nft contract with additional features \\n */\\n\\nimport {ERC721URIStorage,ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Content} from './Content.sol';\\n\\ncontract Nft is ERC721URIStorage,Ownable{\\n    \\n    Content public contentContract;\\n    \\n     //nft data structure\\n    struct NftData {\\n        uint256 tokenId;\\n        string name;\\n        string description;\\n        string image;\\n        address creator;\\n    }\\n\\n    NftData[] public nftFeed; // Store all NFTs in a global feed\\n\\n   struct NFT{\\n     uint256 tokenId;\\n   }\\n\\n    mapping(address => uint256) private _nftsMinted;\\n    mapping(address => uint256) private _nftsOwned;\\n    mapping (address => mapping (uint256 => NFT)) private tokenOfOwnerByIndexMapping;\\n\\n   constructor(string memory name, string memory symbol,address initialOwner,address contentContractAddress,address priceFeed) ERC721(name,symbol) Ownable(initialOwner){\\n    contentContract = new Content(priceFeed,contentContractAddress);\\n   }\\n\\n   /**\\n    *   Functions\\n    */\\n\\n   //mint function\\n   function mint(address _to,uint256 tokenId,string calldata _uri) external{\\n     _mint(_to,tokenId);\\n     _setTokenURI(tokenId,_uri);\\n      \\n      for(uint i = 0;i < balanceOf(msg.sender);i++){\\n            tokenOfOwnerByIndexMapping[_to][i] = NFT({\\n                tokenId : tokenId\\n            });\\n        }\\n      // Track NFTs minted\\n        _nftsMinted[_to] += 1;\\n        // Track NFTs owned\\n        _nftsOwned[_to] += 1;\\n\\n         NftData memory newNft = NftData(tokenId, \\\"Name\\\", \\\"Description\\\", \\\"ImageHash\\\", msg.sender);\\n        nftFeed.push(newNft);\\n   }\\n\\n\\n     /** Getter Functions */\\n\\n    // Get the number of NFTs minted by an address\\n    function nftsMinted(address owner) external view returns (uint256) {\\n        return _nftsMinted[owner];\\n    }\\n\\n    // Get the number of NFTs owned by an address\\n    function nftsOwned(address owner) external view returns (uint256) {\\n        return _nftsOwned[owner];\\n    }\\n\\n    function tokenOfOwnerByIndex(address _owner,uint256 _index) public view returns (uint256){\\n        return tokenOfOwnerByIndexMapping[_owner][_index].tokenId;\\n    }\\n\\n     // Get the entire feed\\n    function getNftFeed() public view returns (NftData[] memory) {\\n        return nftFeed;\\n    }\\n\\n    //get Price of nft\\n    function getNftPrice(uint256 tokenId, address owner) external view returns (uint256) {\\n        return contentContract.getContentPrice(owner, tokenId);\\n    } \\n}\",\"keccak256\":\"0xbe83b8acd16ae4c82c4312d69caaad5c954e3968a5cc4733ce7e9f90e542f1f6\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n \\npragma solidity ^0.8.18;\\n\\n//import contract ABI from github\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor{\\n    //function to get pricefeed\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        //get latest price feed\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\n\\n        return uint256(price * 1e18);\\n    }\\n\\n    //convert eth amount to usd\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n    //function to getversion\\n    function getVersion() internal view returns(uint256){\\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\\n    }\\n} \",\"keccak256\":\"0xcc50d53f23b46ca2c1a593cca0c009d651b65e1906b85ab9db9aeb7d525c61d8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":395,"contract":"contracts/NFT.sol:Nft","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":397,"contract":"contracts/NFT.sol:Nft","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":401,"contract":"contracts/NFT.sol:Nft","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":405,"contract":"contracts/NFT.sol:Nft","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":409,"contract":"contracts/NFT.sol:Nft","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":415,"contract":"contracts/NFT.sol:Nft","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1534,"contract":"contracts/NFT.sol:Nft","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":54,"contract":"contracts/NFT.sol:Nft","label":"_owner","offset":0,"slot":"7","type":"t_address"},{"astId":3389,"contract":"contracts/NFT.sol:Nft","label":"contentContract","offset":0,"slot":"8","type":"t_contract(Content)3373"},{"astId":3404,"contract":"contracts/NFT.sol:Nft","label":"nftFeed","offset":0,"slot":"9","type":"t_array(t_struct(NftData)3400_storage)dyn_storage"},{"astId":3411,"contract":"contracts/NFT.sol:Nft","label":"_nftsMinted","offset":0,"slot":"10","type":"t_mapping(t_address,t_uint256)"},{"astId":3415,"contract":"contracts/NFT.sol:Nft","label":"_nftsOwned","offset":0,"slot":"11","type":"t_mapping(t_address,t_uint256)"},{"astId":3422,"contract":"contracts/NFT.sol:Nft","label":"tokenOfOwnerByIndexMapping","offset":0,"slot":"12","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(NFT)3407_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(NftData)3400_storage)dyn_storage":{"base":"t_struct(NftData)3400_storage","encoding":"dynamic_array","label":"struct Nft.NftData[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(Content)3373":{"encoding":"inplace","label":"contract Content","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(NFT)3407_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct Nft.NFT))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(NFT)3407_storage)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_struct(NFT)3407_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct Nft.NFT)","numberOfBytes":"32","value":"t_struct(NFT)3407_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(NFT)3407_storage":{"encoding":"inplace","label":"struct Nft.NFT","members":[{"astId":3406,"contract":"contracts/NFT.sol:Nft","label":"tokenId","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(NftData)3400_storage":{"encoding":"inplace","label":"struct Nft.NftData","members":[{"astId":3391,"contract":"contracts/NFT.sol:Nft","label":"tokenId","offset":0,"slot":"0","type":"t_uint256"},{"astId":3393,"contract":"contracts/NFT.sol:Nft","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3395,"contract":"contracts/NFT.sol:Nft","label":"description","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3397,"contract":"contracts/NFT.sol:Nft","label":"image","offset":0,"slot":"3","type":"t_string_storage"},{"astId":3399,"contract":"contracts/NFT.sol:Nft","label":"creator","offset":0,"slot":"4","type":"t_address"}],"numberOfBytes":"160"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"mint(address,uint256,string)":{"notice":"Functions"},"nftsMinted(address)":{"notice":"Getter Functions "}},"version":1}}},"contracts/PriceConvertor.sol":{"PriceConvertor":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ac97b1e2d44a88e0993eb18d1d2e5d9c30d166959b22ade5f88bf1249bda94e64736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xC9 PUSH28 0x1E2D44A88E0993EB18D1D2E5D9C30D166959B22ADE5F88BF1249BDA9 0x4E PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"208:824:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ac97b1e2d44a88e0993eb18d1d2e5d9c30d166959b22ade5f88bf1249bda94e64736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xC9 PUSH28 0x1E2D44A88E0993EB18D1D2E5D9C30D166959B22ADE5F88BF1249BDA9 0x4E PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ","sourceMap":"208:824:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getConversionRate(uint256,contract AggregatorV3Interface)":"infinite","getPrice(contract AggregatorV3Interface)":"infinite","getVersion()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceConvertor.sol\":\"PriceConvertor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n \\npragma solidity ^0.8.18;\\n\\n//import contract ABI from github\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConvertor{\\n    //function to get pricefeed\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        //Address 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        //get latest price feed\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\n\\n        return uint256(price * 1e18);\\n    }\\n\\n    //convert eth amount to usd\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n    //function to getversion\\n    function getVersion() internal view returns(uint256){\\n        return AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();\\n    }\\n} \",\"keccak256\":\"0xcc50d53f23b46ca2c1a593cca0c009d651b65e1906b85ab9db9aeb7d525c61d8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}